
Self_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe8  08006fe8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006fe8  08006fe8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fe8  08006fe8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fec  08006fec  00016fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000010  08007000  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08007000  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014795  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027e6  00000000  00000000  000347ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  00036fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  00038310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001962a  00000000  00000000  000395a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2b2  00000000  00000000  00052bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f512  00000000  00000000  00060e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f038e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e4  00000000  00000000  000f040c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ce4 	.word	0x08006ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08006ce4 	.word	0x08006ce4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_frsub>:
 80009f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009fc:	e002      	b.n	8000a04 <__addsf3>
 80009fe:	bf00      	nop

08000a00 <__aeabi_fsub>:
 8000a00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a04 <__addsf3>:
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	bf1f      	itttt	ne
 8000a08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a0c:	ea92 0f03 	teqne	r2, r3
 8000a10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a18:	d06a      	beq.n	8000af0 <__addsf3+0xec>
 8000a1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a22:	bfc1      	itttt	gt
 8000a24:	18d2      	addgt	r2, r2, r3
 8000a26:	4041      	eorgt	r1, r0
 8000a28:	4048      	eorgt	r0, r1
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	bfb8      	it	lt
 8000a2e:	425b      	neglt	r3, r3
 8000a30:	2b19      	cmp	r3, #25
 8000a32:	bf88      	it	hi
 8000a34:	4770      	bxhi	lr
 8000a36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a42:	bf18      	it	ne
 8000a44:	4240      	negne	r0, r0
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a52:	bf18      	it	ne
 8000a54:	4249      	negne	r1, r1
 8000a56:	ea92 0f03 	teq	r2, r3
 8000a5a:	d03f      	beq.n	8000adc <__addsf3+0xd8>
 8000a5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a60:	fa41 fc03 	asr.w	ip, r1, r3
 8000a64:	eb10 000c 	adds.w	r0, r0, ip
 8000a68:	f1c3 0320 	rsb	r3, r3, #32
 8000a6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a74:	d502      	bpl.n	8000a7c <__addsf3+0x78>
 8000a76:	4249      	negs	r1, r1
 8000a78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a80:	d313      	bcc.n	8000aaa <__addsf3+0xa6>
 8000a82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a86:	d306      	bcc.n	8000a96 <__addsf3+0x92>
 8000a88:	0840      	lsrs	r0, r0, #1
 8000a8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a8e:	f102 0201 	add.w	r2, r2, #1
 8000a92:	2afe      	cmp	r2, #254	; 0xfe
 8000a94:	d251      	bcs.n	8000b3a <__addsf3+0x136>
 8000a96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a9e:	bf08      	it	eq
 8000aa0:	f020 0001 	biceq.w	r0, r0, #1
 8000aa4:	ea40 0003 	orr.w	r0, r0, r3
 8000aa8:	4770      	bx	lr
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	eb40 0000 	adc.w	r0, r0, r0
 8000ab0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ab4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab8:	d1ed      	bne.n	8000a96 <__addsf3+0x92>
 8000aba:	fab0 fc80 	clz	ip, r0
 8000abe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ac6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aca:	bfaa      	itet	ge
 8000acc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad0:	4252      	neglt	r2, r2
 8000ad2:	4318      	orrge	r0, r3
 8000ad4:	bfbc      	itt	lt
 8000ad6:	40d0      	lsrlt	r0, r2
 8000ad8:	4318      	orrlt	r0, r3
 8000ada:	4770      	bx	lr
 8000adc:	f092 0f00 	teq	r2, #0
 8000ae0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae4:	bf06      	itte	eq
 8000ae6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aea:	3201      	addeq	r2, #1
 8000aec:	3b01      	subne	r3, #1
 8000aee:	e7b5      	b.n	8000a5c <__addsf3+0x58>
 8000af0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afe:	d021      	beq.n	8000b44 <__addsf3+0x140>
 8000b00:	ea92 0f03 	teq	r2, r3
 8000b04:	d004      	beq.n	8000b10 <__addsf3+0x10c>
 8000b06:	f092 0f00 	teq	r2, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	4608      	moveq	r0, r1
 8000b0e:	4770      	bx	lr
 8000b10:	ea90 0f01 	teq	r0, r1
 8000b14:	bf1c      	itt	ne
 8000b16:	2000      	movne	r0, #0
 8000b18:	4770      	bxne	lr
 8000b1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b1e:	d104      	bne.n	8000b2a <__addsf3+0x126>
 8000b20:	0040      	lsls	r0, r0, #1
 8000b22:	bf28      	it	cs
 8000b24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	4770      	bx	lr
 8000b2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b2e:	bf3c      	itt	cc
 8000b30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bxcc	lr
 8000b36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	4770      	bx	lr
 8000b44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b48:	bf16      	itet	ne
 8000b4a:	4608      	movne	r0, r1
 8000b4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b50:	4601      	movne	r1, r0
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	bf06      	itte	eq
 8000b56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5a:	ea90 0f01 	teqeq	r0, r1
 8000b5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_ui2f>:
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e004      	b.n	8000b74 <__aeabi_i2f+0x8>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_i2f>:
 8000b6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	bf48      	it	mi
 8000b72:	4240      	negmi	r0, r0
 8000b74:	ea5f 0c00 	movs.w	ip, r0
 8000b78:	bf08      	it	eq
 8000b7a:	4770      	bxeq	lr
 8000b7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b80:	4601      	mov	r1, r0
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	e01c      	b.n	8000bc2 <__aeabi_l2f+0x2a>

08000b88 <__aeabi_ul2f>:
 8000b88:	ea50 0201 	orrs.w	r2, r0, r1
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e00a      	b.n	8000bac <__aeabi_l2f+0x14>
 8000b96:	bf00      	nop

08000b98 <__aeabi_l2f>:
 8000b98:	ea50 0201 	orrs.w	r2, r0, r1
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__aeabi_l2f+0x14>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	ea5f 0c01 	movs.w	ip, r1
 8000bb0:	bf02      	ittt	eq
 8000bb2:	4684      	moveq	ip, r0
 8000bb4:	4601      	moveq	r1, r0
 8000bb6:	2000      	moveq	r0, #0
 8000bb8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bc6:	fabc f28c 	clz	r2, ip
 8000bca:	3a08      	subs	r2, #8
 8000bcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd0:	db10      	blt.n	8000bf4 <__aeabi_l2f+0x5c>
 8000bd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be4:	fa20 f202 	lsr.w	r2, r0, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	f020 0001 	biceq.w	r0, r0, #1
 8000bf2:	4770      	bx	lr
 8000bf4:	f102 0220 	add.w	r2, r2, #32
 8000bf8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfc:	f1c2 0220 	rsb	r2, r2, #32
 8000c00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c04:	fa21 f202 	lsr.w	r2, r1, r2
 8000c08:	eb43 0002 	adc.w	r0, r3, r2
 8000c0c:	bf08      	it	eq
 8000c0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_fmul>:
 8000c14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c22:	ea92 0f0c 	teqne	r2, ip
 8000c26:	ea93 0f0c 	teqne	r3, ip
 8000c2a:	d06f      	beq.n	8000d0c <__aeabi_fmul+0xf8>
 8000c2c:	441a      	add	r2, r3
 8000c2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c32:	0240      	lsls	r0, r0, #9
 8000c34:	bf18      	it	ne
 8000c36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3a:	d01e      	beq.n	8000c7a <__aeabi_fmul+0x66>
 8000c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c48:	fba0 3101 	umull	r3, r1, r0, r1
 8000c4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c54:	bf3e      	ittt	cc
 8000c56:	0049      	lslcc	r1, r1, #1
 8000c58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c5c:	005b      	lslcc	r3, r3, #1
 8000c5e:	ea40 0001 	orr.w	r0, r0, r1
 8000c62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c66:	2afd      	cmp	r2, #253	; 0xfd
 8000c68:	d81d      	bhi.n	8000ca6 <__aeabi_fmul+0x92>
 8000c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	4770      	bx	lr
 8000c7a:	f090 0f00 	teq	r0, #0
 8000c7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c82:	bf08      	it	eq
 8000c84:	0249      	lsleq	r1, r1, #9
 8000c86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c8e:	3a7f      	subs	r2, #127	; 0x7f
 8000c90:	bfc2      	ittt	gt
 8000c92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9a:	4770      	bxgt	lr
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	3a01      	subs	r2, #1
 8000ca6:	dc5d      	bgt.n	8000d64 <__aeabi_fmul+0x150>
 8000ca8:	f112 0f19 	cmn.w	r2, #25
 8000cac:	bfdc      	itt	le
 8000cae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb2:	4770      	bxle	lr
 8000cb4:	f1c2 0200 	rsb	r2, r2, #0
 8000cb8:	0041      	lsls	r1, r0, #1
 8000cba:	fa21 f102 	lsr.w	r1, r1, r2
 8000cbe:	f1c2 0220 	rsb	r2, r2, #32
 8000cc2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cca:	f140 0000 	adc.w	r0, r0, #0
 8000cce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd2:	bf08      	it	eq
 8000cd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd8:	4770      	bx	lr
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce2:	bf02      	ittt	eq
 8000ce4:	0040      	lsleq	r0, r0, #1
 8000ce6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cea:	3a01      	subeq	r2, #1
 8000cec:	d0f9      	beq.n	8000ce2 <__aeabi_fmul+0xce>
 8000cee:	ea40 000c 	orr.w	r0, r0, ip
 8000cf2:	f093 0f00 	teq	r3, #0
 8000cf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	bf02      	ittt	eq
 8000cfc:	0049      	lsleq	r1, r1, #1
 8000cfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d02:	3b01      	subeq	r3, #1
 8000d04:	d0f9      	beq.n	8000cfa <__aeabi_fmul+0xe6>
 8000d06:	ea41 010c 	orr.w	r1, r1, ip
 8000d0a:	e78f      	b.n	8000c2c <__aeabi_fmul+0x18>
 8000d0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d10:	ea92 0f0c 	teq	r2, ip
 8000d14:	bf18      	it	ne
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d00a      	beq.n	8000d32 <__aeabi_fmul+0x11e>
 8000d1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d20:	bf18      	it	ne
 8000d22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d26:	d1d8      	bne.n	8000cda <__aeabi_fmul+0xc6>
 8000d28:	ea80 0001 	eor.w	r0, r0, r1
 8000d2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f090 0f00 	teq	r0, #0
 8000d36:	bf17      	itett	ne
 8000d38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	f091 0f00 	teqne	r1, #0
 8000d42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d46:	d014      	beq.n	8000d72 <__aeabi_fmul+0x15e>
 8000d48:	ea92 0f0c 	teq	r2, ip
 8000d4c:	d101      	bne.n	8000d52 <__aeabi_fmul+0x13e>
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	d10f      	bne.n	8000d72 <__aeabi_fmul+0x15e>
 8000d52:	ea93 0f0c 	teq	r3, ip
 8000d56:	d103      	bne.n	8000d60 <__aeabi_fmul+0x14c>
 8000d58:	024b      	lsls	r3, r1, #9
 8000d5a:	bf18      	it	ne
 8000d5c:	4608      	movne	r0, r1
 8000d5e:	d108      	bne.n	8000d72 <__aeabi_fmul+0x15e>
 8000d60:	ea80 0001 	eor.w	r0, r0, r1
 8000d64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	4770      	bx	lr
 8000d72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fdiv>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d069      	beq.n	8000e68 <__aeabi_fdiv+0xec>
 8000d94:	eba2 0203 	sub.w	r2, r2, r3
 8000d98:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9c:	0249      	lsls	r1, r1, #9
 8000d9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da2:	d037      	beq.n	8000e14 <__aeabi_fdiv+0x98>
 8000da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000da8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db4:	428b      	cmp	r3, r1
 8000db6:	bf38      	it	cc
 8000db8:	005b      	lslcc	r3, r3, #1
 8000dba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	bf24      	itt	cs
 8000dc6:	1a5b      	subcs	r3, r3, r1
 8000dc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dde:	bf24      	itt	cs
 8000de0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000de8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dec:	bf24      	itt	cs
 8000dee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	bf18      	it	ne
 8000dfa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dfe:	d1e0      	bne.n	8000dc2 <__aeabi_fdiv+0x46>
 8000e00:	2afd      	cmp	r2, #253	; 0xfd
 8000e02:	f63f af50 	bhi.w	8000ca6 <__aeabi_fmul+0x92>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e0c:	bf08      	it	eq
 8000e0e:	f020 0001 	biceq.w	r0, r0, #1
 8000e12:	4770      	bx	lr
 8000e14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1c:	327f      	adds	r2, #127	; 0x7f
 8000e1e:	bfc2      	ittt	gt
 8000e20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e28:	4770      	bxgt	lr
 8000e2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	3a01      	subs	r2, #1
 8000e34:	e737      	b.n	8000ca6 <__aeabi_fmul+0x92>
 8000e36:	f092 0f00 	teq	r2, #0
 8000e3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0040      	lsleq	r0, r0, #1
 8000e42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e46:	3a01      	subeq	r2, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fdiv+0xc2>
 8000e4a:	ea40 000c 	orr.w	r0, r0, ip
 8000e4e:	f093 0f00 	teq	r3, #0
 8000e52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0049      	lsleq	r1, r1, #1
 8000e5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5e:	3b01      	subeq	r3, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fdiv+0xda>
 8000e62:	ea41 010c 	orr.w	r1, r1, ip
 8000e66:	e795      	b.n	8000d94 <__aeabi_fdiv+0x18>
 8000e68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e6c:	ea92 0f0c 	teq	r2, ip
 8000e70:	d108      	bne.n	8000e84 <__aeabi_fdiv+0x108>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	f47f af7d 	bne.w	8000d72 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	f47f af70 	bne.w	8000d60 <__aeabi_fmul+0x14c>
 8000e80:	4608      	mov	r0, r1
 8000e82:	e776      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000e84:	ea93 0f0c 	teq	r3, ip
 8000e88:	d104      	bne.n	8000e94 <__aeabi_fdiv+0x118>
 8000e8a:	024b      	lsls	r3, r1, #9
 8000e8c:	f43f af4c 	beq.w	8000d28 <__aeabi_fmul+0x114>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e76e      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000e94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e98:	bf18      	it	ne
 8000e9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	d1ca      	bne.n	8000e36 <__aeabi_fdiv+0xba>
 8000ea0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea4:	f47f af5c 	bne.w	8000d60 <__aeabi_fmul+0x14c>
 8000ea8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eac:	f47f af3c 	bne.w	8000d28 <__aeabi_fmul+0x114>
 8000eb0:	e75f      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000eb2:	bf00      	nop

08000eb4 <__gesf2>:
 8000eb4:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb8:	e006      	b.n	8000ec8 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__lesf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	e002      	b.n	8000ec8 <__cmpsf2+0x4>
 8000ec2:	bf00      	nop

08000ec4 <__cmpsf2>:
 8000ec4:	f04f 0c01 	mov.w	ip, #1
 8000ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ecc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed8:	bf18      	it	ne
 8000eda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ede:	d011      	beq.n	8000f04 <__cmpsf2+0x40>
 8000ee0:	b001      	add	sp, #4
 8000ee2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee6:	bf18      	it	ne
 8000ee8:	ea90 0f01 	teqne	r0, r1
 8000eec:	bf58      	it	pl
 8000eee:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef2:	bf88      	it	hi
 8000ef4:	17c8      	asrhi	r0, r1, #31
 8000ef6:	bf38      	it	cc
 8000ef8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000efc:	bf18      	it	ne
 8000efe:	f040 0001 	orrne.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f08:	d102      	bne.n	8000f10 <__cmpsf2+0x4c>
 8000f0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0e:	d105      	bne.n	8000f1c <__cmpsf2+0x58>
 8000f10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f14:	d1e4      	bne.n	8000ee0 <__cmpsf2+0x1c>
 8000f16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1a:	d0e1      	beq.n	8000ee0 <__cmpsf2+0x1c>
 8000f1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__aeabi_cfrcmple>:
 8000f24:	4684      	mov	ip, r0
 8000f26:	4608      	mov	r0, r1
 8000f28:	4661      	mov	r1, ip
 8000f2a:	e7ff      	b.n	8000f2c <__aeabi_cfcmpeq>

08000f2c <__aeabi_cfcmpeq>:
 8000f2c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2e:	f7ff ffc9 	bl	8000ec4 <__cmpsf2>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	bf48      	it	mi
 8000f36:	f110 0f00 	cmnmi.w	r0, #0
 8000f3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f3c <__aeabi_fcmpeq>:
 8000f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f40:	f7ff fff4 	bl	8000f2c <__aeabi_cfcmpeq>
 8000f44:	bf0c      	ite	eq
 8000f46:	2001      	moveq	r0, #1
 8000f48:	2000      	movne	r0, #0
 8000f4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4e:	bf00      	nop

08000f50 <__aeabi_fcmplt>:
 8000f50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f54:	f7ff ffea 	bl	8000f2c <__aeabi_cfcmpeq>
 8000f58:	bf34      	ite	cc
 8000f5a:	2001      	movcc	r0, #1
 8000f5c:	2000      	movcs	r0, #0
 8000f5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f62:	bf00      	nop

08000f64 <__aeabi_fcmple>:
 8000f64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f68:	f7ff ffe0 	bl	8000f2c <__aeabi_cfcmpeq>
 8000f6c:	bf94      	ite	ls
 8000f6e:	2001      	movls	r0, #1
 8000f70:	2000      	movhi	r0, #0
 8000f72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f76:	bf00      	nop

08000f78 <__aeabi_fcmpge>:
 8000f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f7c:	f7ff ffd2 	bl	8000f24 <__aeabi_cfrcmple>
 8000f80:	bf94      	ite	ls
 8000f82:	2001      	movls	r0, #1
 8000f84:	2000      	movhi	r0, #0
 8000f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8a:	bf00      	nop

08000f8c <__aeabi_fcmpgt>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff ffc8 	bl	8000f24 <__aeabi_cfrcmple>
 8000f94:	bf34      	ite	cc
 8000f96:	2001      	movcc	r0, #1
 8000f98:	2000      	movcs	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_f2uiz>:
 8000fa0:	0042      	lsls	r2, r0, #1
 8000fa2:	d20e      	bcs.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30b      	bcc.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d409      	bmi.n	8000fc8 <__aeabi_f2uiz+0x28>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2uiz+0x32>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d102      	bne.n	8000fd8 <__aeabi_f2uiz+0x38>
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd6:	4770      	bx	lr
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <SBR1_init>:
static const float u_PS_p[] = { 0.3333f };
static const float u_PM_p[] = { 0.4500f };//0.6670
static const float u_PB_p[] = { 1.0000f };


void SBR1_init( void ){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( SBR1_inputs, theta, -1.0000f, 1.0000f );
 8000fe6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fea:	4a8d      	ldr	r2, [pc, #564]	; (8001220 <SBR1_init+0x240>)
 8000fec:	2100      	movs	r1, #0
 8000fee:	488d      	ldr	r0, [pc, #564]	; (8001224 <SBR1_init+0x244>)
 8000ff0:	f000 ffe0 	bl	8001fb4 <qFIS_InputSetup>
    qFIS_InputSetup( SBR1_inputs, thetadot, -1.0000f, 1.0000f );
 8000ff4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ff8:	4a89      	ldr	r2, [pc, #548]	; (8001220 <SBR1_init+0x240>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4889      	ldr	r0, [pc, #548]	; (8001224 <SBR1_init+0x244>)
 8000ffe:	f000 ffd9 	bl	8001fb4 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( SBR1_outputs, u, -1.0000f, 1.0000f );
 8001002:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001006:	4a86      	ldr	r2, [pc, #536]	; (8001220 <SBR1_init+0x240>)
 8001008:	2100      	movs	r1, #0
 800100a:	4887      	ldr	r0, [pc, #540]	; (8001228 <SBR1_init+0x248>)
 800100c:	f000 fffd 	bl	800200a <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, theta, theta_NB, trapmf, NULL, theta_NB_p, 1.0f );
 8001010:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	4b85      	ldr	r3, [pc, #532]	; (800122c <SBR1_init+0x24c>)
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	2300      	movs	r3, #0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	4882      	ldr	r0, [pc, #520]	; (8001230 <SBR1_init+0x250>)
 8001026:	f001 f85d 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_NS, trapmf, NULL, theta_NS_p, 1.0f );
 800102a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	4b80      	ldr	r3, [pc, #512]	; (8001234 <SBR1_init+0x254>)
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	2300      	movs	r3, #0
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	2201      	movs	r2, #1
 800103c:	2100      	movs	r1, #0
 800103e:	487c      	ldr	r0, [pc, #496]	; (8001230 <SBR1_init+0x250>)
 8001040:	f001 f850 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_ZE, trimf, NULL, theta_ZE_p, 1.0f );
 8001044:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	4b7b      	ldr	r3, [pc, #492]	; (8001238 <SBR1_init+0x258>)
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2300      	movs	r3, #0
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2202      	movs	r2, #2
 8001056:	2100      	movs	r1, #0
 8001058:	4875      	ldr	r0, [pc, #468]	; (8001230 <SBR1_init+0x250>)
 800105a:	f001 f843 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PS, trapmf, NULL, theta_PS_p, 1.0f );
 800105e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	4b75      	ldr	r3, [pc, #468]	; (800123c <SBR1_init+0x25c>)
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2302      	movs	r3, #2
 800106e:	2203      	movs	r2, #3
 8001070:	2100      	movs	r1, #0
 8001072:	486f      	ldr	r0, [pc, #444]	; (8001230 <SBR1_init+0x250>)
 8001074:	f001 f836 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PB, trapmf, NULL, theta_PB_p, 1.0f );
 8001078:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	4b70      	ldr	r3, [pc, #448]	; (8001240 <SBR1_init+0x260>)
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2300      	movs	r3, #0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2302      	movs	r3, #2
 8001088:	2204      	movs	r2, #4
 800108a:	2100      	movs	r1, #0
 800108c:	4868      	ldr	r0, [pc, #416]	; (8001230 <SBR1_init+0x250>)
 800108e:	f001 f829 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NB, trimf, NULL, thetadot_NB_p, 1.0f );
 8001092:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <SBR1_init+0x264>)
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2205      	movs	r2, #5
 80010a4:	2101      	movs	r1, #1
 80010a6:	4862      	ldr	r0, [pc, #392]	; (8001230 <SBR1_init+0x250>)
 80010a8:	f001 f81c 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NS, trimf, NULL, thetadot_NS_p, 1.0f );
 80010ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <SBR1_init+0x268>)
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2206      	movs	r2, #6
 80010be:	2101      	movs	r1, #1
 80010c0:	485b      	ldr	r0, [pc, #364]	; (8001230 <SBR1_init+0x250>)
 80010c2:	f001 f80f 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_ZE, trimf, NULL, thetadot_ZE_p, 1.0f );
 80010c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <SBR1_init+0x26c>)
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2207      	movs	r2, #7
 80010d8:	2101      	movs	r1, #1
 80010da:	4855      	ldr	r0, [pc, #340]	; (8001230 <SBR1_init+0x250>)
 80010dc:	f001 f802 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PS, trimf, NULL, thetadot_PS_p, 1.0f );
 80010e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	4b5a      	ldr	r3, [pc, #360]	; (8001250 <SBR1_init+0x270>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	2208      	movs	r2, #8
 80010f2:	2101      	movs	r1, #1
 80010f4:	484e      	ldr	r0, [pc, #312]	; (8001230 <SBR1_init+0x250>)
 80010f6:	f000 fff5 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PB, trimf, NULL, thetadot_PB_p, 1.0f );
 80010fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	4b54      	ldr	r3, [pc, #336]	; (8001254 <SBR1_init+0x274>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2300      	movs	r3, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	2209      	movs	r2, #9
 800110c:	2101      	movs	r1, #1
 800110e:	4848      	ldr	r0, [pc, #288]	; (8001230 <SBR1_init+0x250>)
 8001110:	f000 ffe8 	bl	80020e4 <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001114:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <SBR1_init+0x278>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2313      	movs	r3, #19
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	484c      	ldr	r0, [pc, #304]	; (800125c <SBR1_init+0x27c>)
 800112a:	f000 ffdb 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 800112e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <SBR1_init+0x280>)
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2313      	movs	r3, #19
 800113e:	2201      	movs	r2, #1
 8001140:	2100      	movs	r1, #0
 8001142:	4846      	ldr	r0, [pc, #280]	; (800125c <SBR1_init+0x27c>)
 8001144:	f000 ffce 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 8001148:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <SBR1_init+0x284>)
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2313      	movs	r3, #19
 8001158:	2202      	movs	r2, #2
 800115a:	2100      	movs	r1, #0
 800115c:	483f      	ldr	r0, [pc, #252]	; (800125c <SBR1_init+0x27c>)
 800115e:	f000 ffc1 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 8001162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <SBR1_init+0x288>)
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2313      	movs	r3, #19
 8001172:	2203      	movs	r2, #3
 8001174:	2100      	movs	r1, #0
 8001176:	4839      	ldr	r0, [pc, #228]	; (800125c <SBR1_init+0x27c>)
 8001178:	f000 ffb4 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 800117c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <SBR1_init+0x28c>)
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2313      	movs	r3, #19
 800118c:	2204      	movs	r2, #4
 800118e:	2100      	movs	r1, #0
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <SBR1_init+0x27c>)
 8001192:	f000 ffa7 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 8001196:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	4b34      	ldr	r3, [pc, #208]	; (8001270 <SBR1_init+0x290>)
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2313      	movs	r3, #19
 80011a6:	2205      	movs	r2, #5
 80011a8:	2100      	movs	r1, #0
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <SBR1_init+0x27c>)
 80011ac:	f000 ff9a 	bl	80020e4 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 80011b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <SBR1_init+0x294>)
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2313      	movs	r3, #19
 80011c0:	2206      	movs	r2, #6
 80011c2:	2100      	movs	r1, #0
 80011c4:	4825      	ldr	r0, [pc, #148]	; (800125c <SBR1_init+0x27c>)
 80011c6:	f000 ff8d 	bl	80020e4 <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &SBR1, Sugeno,
 80011ca:	2319      	movs	r3, #25
 80011cc:	9308      	str	r3, [sp, #32]
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <SBR1_init+0x298>)
 80011d0:	9307      	str	r3, [sp, #28]
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <SBR1_init+0x29c>)
 80011d4:	9306      	str	r3, [sp, #24]
 80011d6:	238c      	movs	r3, #140	; 0x8c
 80011d8:	9305      	str	r3, [sp, #20]
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <SBR1_init+0x27c>)
 80011dc:	9304      	str	r3, [sp, #16]
 80011de:	23c8      	movs	r3, #200	; 0xc8
 80011e0:	9303      	str	r3, [sp, #12]
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <SBR1_init+0x250>)
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2334      	movs	r3, #52	; 0x34
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <SBR1_init+0x248>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2318      	movs	r3, #24
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <SBR1_init+0x244>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	4822      	ldr	r0, [pc, #136]	; (8001280 <SBR1_init+0x2a0>)
 80011f6:	f000 fe05 	bl	8001e04 <qFIS_Setup>
                SBR1_inputs, sizeof(SBR1_inputs),
                SBR1_outputs, sizeof(SBR1_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &SBR1, qFIS_AND, qFIS_PROD );
 80011fa:	2201      	movs	r2, #1
 80011fc:	2102      	movs	r1, #2
 80011fe:	4820      	ldr	r0, [pc, #128]	; (8001280 <SBR1_init+0x2a0>)
 8001200:	f000 fd8e 	bl	8001d20 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Implication, qFIS_PROD );
 8001204:	2201      	movs	r2, #1
 8001206:	2100      	movs	r1, #0
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <SBR1_init+0x2a0>)
 800120a:	f000 fd89 	bl	8001d20 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Aggregation, qFIS_SUM );
 800120e:	2204      	movs	r2, #4
 8001210:	2101      	movs	r1, #1
 8001212:	481b      	ldr	r0, [pc, #108]	; (8001280 <SBR1_init+0x2a0>)
 8001214:	f000 fd84 	bl	8001d20 <qFIS_SetParameter>
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	bf800000 	.word	0xbf800000
 8001224:	2000008c 	.word	0x2000008c
 8001228:	200000a4 	.word	0x200000a4
 800122c:	08006ea4 	.word	0x08006ea4
 8001230:	200000d8 	.word	0x200000d8
 8001234:	08006eb4 	.word	0x08006eb4
 8001238:	08006ec4 	.word	0x08006ec4
 800123c:	08006ed0 	.word	0x08006ed0
 8001240:	08006ee0 	.word	0x08006ee0
 8001244:	08006ef0 	.word	0x08006ef0
 8001248:	08006efc 	.word	0x08006efc
 800124c:	08006f08 	.word	0x08006f08
 8001250:	08006f14 	.word	0x08006f14
 8001254:	08006f20 	.word	0x08006f20
 8001258:	08006f2c 	.word	0x08006f2c
 800125c:	200001a0 	.word	0x200001a0
 8001260:	08006f30 	.word	0x08006f30
 8001264:	08006f34 	.word	0x08006f34
 8001268:	08006f38 	.word	0x08006f38
 800126c:	08006f3c 	.word	0x08006f3c
 8001270:	08006f40 	.word	0x08006f40
 8001274:	08006f44 	.word	0x08006f44
 8001278:	2000022c 	.word	0x2000022c
 800127c:	08006d10 	.word	0x08006d10
 8001280:	2000002c 	.word	0x2000002c

08001284 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d102      	bne.n	800129c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		u8_flag_10ms = 1;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
	}
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	20000290 	.word	0x20000290

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f002 fa06 	bl	80036c4 <HAL_Init>

  /* USER CODE BEGIN Init */
	 SBR1_init();
 80012b8:	f7ff fe92 	bl	8000fe0 <SBR1_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f822 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f000 f9cc 	bl	800165c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012c4:	f000 f85a 	bl	800137c <MX_I2C1_Init>
  MX_TIM1_Init();
 80012c8:	f000 f886 	bl	80013d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012cc:	f000 f8d4 	bl	8001478 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012d0:	f000 f936 	bl	8001540 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80012d4:	f000 f998 	bl	8001608 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <main+0x4c>)
 80012da:	f004 f9df 	bl	800569c <HAL_TIM_Base_Start_IT>
  Init_tim_pwm();
 80012de:	f000 fa65 	bl	80017ac <Init_tim_pwm>

  while (MPU6050_Init(&hi2c1) == 1);
 80012e2:	bf00      	nop
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <main+0x50>)
 80012e6:	f000 fa9b 	bl	8001820 <MPU6050_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d0f9      	beq.n	80012e4 <main+0x34>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Reverse(1);
 80012f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012f4:	f000 fa72 	bl	80017dc <Reverse>
 80012f8:	e7fa      	b.n	80012f0 <main+0x40>
 80012fa:	bf00      	nop
 80012fc:	20000488 	.word	0x20000488
 8001300:	200002e8 	.word	0x200002e8

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b090      	sub	sp, #64	; 0x40
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f005 fcde 	bl	8006cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001326:	2302      	movs	r3, #2
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132a:	2301      	movs	r3, #1
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132e:	2310      	movs	r3, #16
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fd42 	bl	8004dc4 <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001346:	f000 f9f5 	bl	8001734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f003 ffae 	bl	80052c4 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800136e:	f000 f9e1 	bl	8001734 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3740      	adds	r7, #64	; 0x40
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2C1_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <MX_I2C1_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_I2C1_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_I2C1_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_I2C1_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_I2C1_Init+0x50>)
 80013ba:	f002 fd15 	bl	8003de8 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f9b6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200002e8 	.word	0x200002e8
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_TIM1_Init+0x98>)
 80013f6:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <MX_TIM1_Init+0x9c>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_TIM1_Init+0x98>)
 80013fc:	f240 321f 	movw	r2, #799	; 0x31f
 8001400:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_TIM1_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM1_Init+0x98>)
 800140a:	2263      	movs	r2, #99	; 0x63
 800140c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_TIM1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_TIM1_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_TIM1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <MX_TIM1_Init+0x98>)
 8001422:	f004 f8eb 	bl	80055fc <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800142c:	f000 f982 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_TIM1_Init+0x98>)
 800143e:	f004 fc37 	bl	8005cb0 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001448:	f000 f974 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM1_Init+0x98>)
 800145a:	f004 ffa9 	bl	80063b0 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001464:	f000 f966 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000488 	.word	0x20000488
 8001474:	40012c00 	.word	0x40012c00

08001478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <MX_TIM3_Init+0xc0>)
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <MX_TIM3_Init+0xc4>)
 800149e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014a2:	224f      	movs	r2, #79	; 0x4f
 80014a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014c2:	f004 f93d 	bl	8005740 <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014cc:	f000 f932 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	4619      	mov	r1, r3
 80014de:	4816      	ldr	r0, [pc, #88]	; (8001538 <MX_TIM3_Init+0xc0>)
 80014e0:	f004 ff66 	bl	80063b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ea:	f000 f923 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM3_Init+0xc0>)
 8001506:	f004 fb15 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001510:	f000 f910 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2204      	movs	r2, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM3_Init+0xc0>)
 800151c:	f004 fb0a 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001526:	f000 f905 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM3_Init+0xc0>)
 800152c:	f001 ffa8 	bl	8003480 <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000033c 	.word	0x2000033c
 800153c:	40000400 	.word	0x40000400

08001540 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <MX_TIM4_Init+0xc0>)
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <MX_TIM4_Init+0xc4>)
 8001566:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <MX_TIM4_Init+0xc0>)
 800156a:	224f      	movs	r2, #79	; 0x4f
 800156c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <MX_TIM4_Init+0xc0>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_TIM4_Init+0xc0>)
 8001576:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800157a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_TIM4_Init+0xc0>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_TIM4_Init+0xc0>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001588:	481d      	ldr	r0, [pc, #116]	; (8001600 <MX_TIM4_Init+0xc0>)
 800158a:	f004 f8d9 	bl	8005740 <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001594:	f000 f8ce 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4619      	mov	r1, r3
 80015a6:	4816      	ldr	r0, [pc, #88]	; (8001600 <MX_TIM4_Init+0xc0>)
 80015a8:	f004 ff02 	bl	80063b0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80015b2:	f000 f8bf 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b6:	2360      	movs	r3, #96	; 0x60
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM4_Init+0xc0>)
 80015ce:	f004 fab1 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80015d8:	f000 f8ac 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM4_Init+0xc0>)
 80015e4:	f004 faa6 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015ee:	f000 f8a1 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM4_Init+0xc0>)
 80015f4:	f001 ff44 	bl	8003480 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002a0 	.word	0x200002a0
 8001604:	40000800 	.word	0x40000800

08001608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f004 ff26 	bl	8006490 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f873 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003e0 	.word	0x200003e0
 8001658:	40013800 	.word	0x40013800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <MX_GPIO_Init+0xcc>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <MX_GPIO_Init+0xcc>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_GPIO_Init+0xcc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_GPIO_Init+0xcc>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a26      	ldr	r2, [pc, #152]	; (8001728 <MX_GPIO_Init+0xcc>)
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_GPIO_Init+0xcc>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_GPIO_Init+0xcc>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a20      	ldr	r2, [pc, #128]	; (8001728 <MX_GPIO_Init+0xcc>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_GPIO_Init+0xcc>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_GPIO_Init+0xcc>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <MX_GPIO_Init+0xcc>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_GPIO_Init+0xcc>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4815      	ldr	r0, [pc, #84]	; (800172c <MX_GPIO_Init+0xd0>)
 80016d8:	f002 fb6e 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2128      	movs	r1, #40	; 0x28
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <MX_GPIO_Init+0xd4>)
 80016e2:	f002 fb69 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <MX_GPIO_Init+0xd0>)
 8001700:	f002 fa00 	bl	8003b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001704:	2328      	movs	r3, #40	; 0x28
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2302      	movs	r3, #2
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_GPIO_Init+0xd4>)
 800171c:	f002 f9f2 	bl	8003b04 <HAL_GPIO_Init>

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	40011000 	.word	0x40011000
 8001730:	40010800 	.word	0x40010800

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173a:	e7fe      	b.n	800173a <Error_Handler+0x6>

0800173c <Set_duty>:
static void Limit_val(float *value){
	if(*value> VAL_MAX)  *value = VAL_MAX;
	if(*value<-VAL_MAX) *value = -VAL_MAX;
}

static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d111      	bne.n	8001772 <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 800174e:	4915      	ldr	r1, [pc, #84]	; (80017a4 <Set_duty+0x68>)
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff fa5f 	bl	8000c14 <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	4913      	ldr	r1, [pc, #76]	; (80017a8 <Set_duty+0x6c>)
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f952 	bl	8000a04 <__addsf3>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	4610      	mov	r0, r2
 800176a:	f7ff fc19 	bl	8000fa0 <__aeabi_f2uiz>
 800176e:	4603      	mov	r3, r0
 8001770:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d111      	bne.n	800179c <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 8001778:	490a      	ldr	r1, [pc, #40]	; (80017a4 <Set_duty+0x68>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff fa4a 	bl	8000c14 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	4909      	ldr	r1, [pc, #36]	; (80017a8 <Set_duty+0x6c>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f93d 	bl	8000a04 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	681c      	ldr	r4, [r3, #0]
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff fc04 	bl	8000fa0 <__aeabi_f2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	44ed6000 	.word	0x44ed6000
 80017a8:	42c80000 	.word	0x42c80000

080017ac <Init_tim_pwm>:

void Init_tim_pwm(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017b0:	2100      	movs	r1, #0
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <Init_tim_pwm+0x28>)
 80017b4:	f004 f814 	bl	80057e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017b8:	2104      	movs	r1, #4
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <Init_tim_pwm+0x28>)
 80017bc:	f004 f810 	bl	80057e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017c0:	2100      	movs	r1, #0
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <Init_tim_pwm+0x2c>)
 80017c4:	f004 f80c 	bl	80057e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80017c8:	2104      	movs	r1, #4
 80017ca:	4803      	ldr	r0, [pc, #12]	; (80017d8 <Init_tim_pwm+0x2c>)
 80017cc:	f004 f808 	bl	80057e0 <HAL_TIM_PWM_Start>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000033c 	.word	0x2000033c
 80017d8:	200002a0 	.word	0x200002a0

080017dc <Reverse>:
	Set_duty(duty, &htim3, 2);
	Set_duty(0, &htim4, 1);
	Set_duty(duty, &htim4, 2);
}

void Reverse (float duty){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <Reverse+0x3c>)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffa7 	bl	800173c <Set_duty>
	Set_duty(0, &htim3, 2);
 80017ee:	2202      	movs	r2, #2
 80017f0:	4909      	ldr	r1, [pc, #36]	; (8001818 <Reverse+0x3c>)
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f7ff ffa1 	bl	800173c <Set_duty>
	Set_duty(duty, &htim4, 1);
 80017fa:	2201      	movs	r2, #1
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <Reverse+0x40>)
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ff9c 	bl	800173c <Set_duty>
	Set_duty(0, &htim4, 2);
 8001804:	2202      	movs	r2, #2
 8001806:	4905      	ldr	r1, [pc, #20]	; (800181c <Reverse+0x40>)
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	f7ff ff96 	bl	800173c <Set_duty>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000033c 	.word	0x2000033c
 800181c:	200002a0 	.word	0x200002a0

08001820 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2301      	movs	r3, #1
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	f107 030f 	add.w	r3, r7, #15
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	2275      	movs	r2, #117	; 0x75
 800183a:	21d0      	movs	r1, #208	; 0xd0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f002 fd05 	bl	800424c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b68      	cmp	r3, #104	; 0x68
 8001846:	d13d      	bne.n	80018c4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2301      	movs	r3, #1
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f107 030e 	add.w	r3, r7, #14
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	226b      	movs	r2, #107	; 0x6b
 800185e:	21d0      	movs	r1, #208	; 0xd0
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f002 fbf9 	bl	8004058 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001866:	2307      	movs	r3, #7
 8001868:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2301      	movs	r3, #1
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f107 030e 	add.w	r3, r7, #14
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	2219      	movs	r2, #25
 800187c:	21d0      	movs	r1, #208	; 0xd0
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f002 fbea 	bl	8004058 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001888:	2364      	movs	r3, #100	; 0x64
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	2301      	movs	r3, #1
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	f107 030e 	add.w	r3, r7, #14
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	221c      	movs	r2, #28
 800189a:	21d0      	movs	r1, #208	; 0xd0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f002 fbdb 	bl	8004058 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f107 030e 	add.w	r3, r7, #14
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	221b      	movs	r2, #27
 80018b8:	21d0      	movs	r1, #208	; 0xd0
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f002 fbcc 	bl	8004058 <HAL_I2C_Mem_Write>
        return 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <MPU6050_Init+0xa6>
    }
    return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <_qFFMath_GetAbnormal>:
#define cast_reinterpret( dst, src, dst_type )                              \
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <_qFFMath_GetAbnormal+0x34>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <_qFFMath_GetAbnormal+0x22>
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <_qFFMath_GetAbnormal+0x38>)
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <_qFFMath_GetAbnormal+0x3c>)
 80018e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e8:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <_qFFMath_GetAbnormal+0x34>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_qFFMath_GetAbnormal+0x38>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000
 8001908:	20000294 	.word	0x20000294
 800190c:	08006f48 	.word	0x08006f48

08001910 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
    int retVal;

    cast_reinterpret( u, f, uint32_t );
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001926:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e016      	b.n	8001962 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800193a:	d202      	bcs.n	8001942 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 800193c:	2301      	movs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e00f      	b.n	8001962 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001948:	d202      	bcs.n	8001950 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 800194a:	2302      	movs	r3, #2
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e008      	b.n	8001962 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001956:	d102      	bne.n	800195e <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 8001958:	2303      	movs	r3, #3
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e001      	b.n	8001962 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 800195e:	2304      	movs	r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffca 	bl	8001910 <qFFMath_FPClassify>
 800197c:	4603      	mov	r3, r0
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fad7 	bl	8000f50 <__aeabi_fcmplt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <qFFMath_Abs+0x20>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019ae:	e000      	b.n	80019b2 <qFFMath_Abs+0x22>
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fac1 	bl	8000f50 <__aeabi_fcmplt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff ff7b 	bl	80018d0 <_qFFMath_GetAbnormal>
 80019da:	6178      	str	r0, [r7, #20]
 80019dc:	e02f      	b.n	8001a3e <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff95 	bl	8001910 <qFFMath_FPClassify>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e024      	b.n	8001a3e <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a0e:	613b      	str	r3, [r7, #16]
        cast_reinterpret( z, y, float );
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f9ae 	bl	8000d7c <__aeabi_fdiv>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f7fe ffeb 	bl	8000a04 <__addsf3>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f8ed 	bl	8000c14 <__aeabi_fmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001a3e:	697b      	ldr	r3, [r7, #20]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    float y;
    x *= -0.318309886f;
 8001a50:	491e      	ldr	r1, [pc, #120]	; (8001acc <qFFMath_Sin+0x84>)
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff f8de 	bl	8000c14 <__aeabi_fmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 8001a5c:	491c      	ldr	r1, [pc, #112]	; (8001ad0 <qFFMath_Sin+0x88>)
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe ffd0 	bl	8000a04 <__addsf3>
 8001a64:	4603      	mov	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 8001a68:	4919      	ldr	r1, [pc, #100]	; (8001ad0 <qFFMath_Sin+0x88>)
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7fe ffc8 	bl	8000a00 <__aeabi_fsub>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7fe ffc3 	bl	8000a00 <__aeabi_fsub>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff86 	bl	8001990 <qFFMath_Abs>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe ffb8 	bl	8000a00 <__aeabi_fsub>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff f8bd 	bl	8000c14 <__aeabi_fmul>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	607b      	str	r3, [r7, #4]
    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff76 	bl	8001990 <qFFMath_Abs>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	490b      	ldr	r1, [pc, #44]	; (8001ad4 <qFFMath_Sin+0x8c>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f8b3 	bl	8000c14 <__aeabi_fmul>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <qFFMath_Sin+0x90>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe ffa6 	bl	8000a04 <__addsf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f8a9 	bl	8000c14 <__aeabi_fmul>
 8001ac2:	4603      	mov	r3, r0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	bea2f983 	.word	0xbea2f983
 8001ad0:	4bc00000 	.word	0x4bc00000
 8001ad4:	40656265 	.word	0x40656265
 8001ad8:	4046a767 	.word	0x4046a767

08001adc <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + 1.570796327f );
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <qFFMath_Cos+0x24>)
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe ff8c 	bl	8000a04 <__addsf3>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffaa 	bl	8001a48 <qFFMath_Sin>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	3fc90fdb 	.word	0x3fc90fdb

08001b04 <qFFMath_Exp2>:
    y = qFFMath_ATan( y/( x + f ) ) + ( ( x < 0.0f ) ? t : 0.0f );
    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 8001b0c:	492e      	ldr	r1, [pc, #184]	; (8001bc8 <qFFMath_Exp2+0xc4>)
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fa28 	bl	8000f64 <__aeabi_fcmple>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e04c      	b.n	8001bbc <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 8001b22:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fa30 	bl	8000f8c <__aeabi_fcmpgt>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fecc 	bl	80018d0 <_qFFMath_GetAbnormal>
 8001b38:	6178      	str	r0, [r7, #20]
 8001b3a:	e03f      	b.n	8001bbc <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <qFFMath_Exp2+0xc8>)
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe ff5d 	bl	8000a04 <__addsf3>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa27 	bl	8000fa0 <__aeabi_f2uiz>
 8001b52:	4603      	mov	r3, r0
 8001b54:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f803 	bl	8000b64 <__aeabi_ui2f>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4619      	mov	r1, r3
 8001b62:	481a      	ldr	r0, [pc, #104]	; (8001bcc <qFFMath_Exp2+0xc8>)
 8001b64:	f7fe ff4c 	bl	8000a00 <__aeabi_fsub>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7fe ff49 	bl	8000a04 <__addsf3>
 8001b72:	4603      	mov	r3, r0
 8001b74:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	05db      	lsls	r3, r3, #23
 8001b7a:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( y, exponent, float );
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 8001b80:	4913      	ldr	r1, [pc, #76]	; (8001bd0 <qFFMath_Exp2+0xcc>)
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff f846 	bl	8000c14 <__aeabi_fmul>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4912      	ldr	r1, [pc, #72]	; (8001bd4 <qFFMath_Exp2+0xd0>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ff39 	bl	8000a04 <__addsf3>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff f83c 	bl	8000c14 <__aeabi_fmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 8001ba0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe ff2d 	bl	8000a04 <__addsf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff f82e 	bl	8000c14 <__aeabi_fmul>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001bbc:	697b      	ldr	r3, [r7, #20]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	c2fc0000 	.word	0xc2fc0000
 8001bcc:	42fe0000 	.word	0x42fe0000
 8001bd0:	3eadf5d0 	.word	0x3eadf5d0
 8001bd4:	3f290518 	.word	0x3f290518

08001bd8 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f9b2 	bl	8000f50 <__aeabi_fcmplt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fe6c 	bl	80018d0 <_qFFMath_GetAbnormal>
 8001bf8:	6178      	str	r0, [r7, #20]
 8001bfa:	e049      	b.n	8001c90 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fe86 	bl	8001910 <qFFMath_FPClassify>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fe60 	bl	80018d0 <_qFFMath_GetAbnormal>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e03a      	b.n	8001c90 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
        y2 = y;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	0ddb      	lsrs	r3, r3, #23
 8001c2a:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe ff98 	bl	8000b64 <__aeabi_ui2f>
 8001c34:	4603      	mov	r3, r0
 8001c36:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001c3e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8001c42:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( x, y, float );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4914      	ldr	r1, [pc, #80]	; (8001c9c <qFFMath_Log2+0xc4>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe ffe1 	bl	8000c14 <__aeabi_fmul>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fed3 	bl	8000a04 <__addsf3>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ffd4 	bl	8000c14 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fec4 	bl	8000a00 <__aeabi_fsub>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4909      	ldr	r1, [pc, #36]	; (8001ca0 <qFFMath_Log2+0xc8>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe febf 	bl	8000a00 <__aeabi_fsub>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7fe febc 	bl	8000a04 <__addsf3>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001c90:	697b      	ldr	r3, [r7, #20]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	beaaaaab 	.word	0xbeaaaaab
 8001ca0:	3f2aaaab 	.word	0x3f2aaaab

08001ca4 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( 1.442695041f*x );
 8001cac:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <qFFMath_Exp+0x24>)
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe ffb0 	bl	8000c14 <__aeabi_fmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff24 	bl	8001b04 <qFFMath_Exp2>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	3fb8aa3b 	.word	0x3fb8aa3b

08001ccc <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    return 0.693147181f*qFFMath_Log2(x);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff7f 	bl	8001bd8 <qFFMath_Log2>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4904      	ldr	r1, [pc, #16]	; (8001cf0 <qFFMath_Log+0x24>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ff98 	bl	8000c14 <__aeabi_fmul>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	3f317218 	.word	0x3f317218

08001cf4 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff6a 	bl	8001bd8 <qFFMath_Log2>
 8001d04:	4603      	mov	r3, r0
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe ff83 	bl	8000c14 <__aeabi_fmul>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fef7 	bl	8001b04 <qFFMath_Exp2>
 8001d16:	4603      	mov	r3, r0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d04f      	beq.n	8001dda <qFIS_SetParameter+0xba>
        switch ( p ) {
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d84e      	bhi.n	8001dde <qFIS_SetParameter+0xbe>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <qFIS_SetParameter+0x28>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d75 	.word	0x08001d75
 8001d50:	08001d93 	.word	0x08001d93
 8001d54:	08001dab 	.word	0x08001dab
 8001d58:	08001dc9 	.word	0x08001dc9
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 8001d5c:	78bb      	ldrb	r3, [r7, #2]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d83f      	bhi.n	8001de2 <qFIS_SetParameter+0xc2>
                    f->implicate = method[ x ];
 8001d62:	78bb      	ldrb	r3, [r7, #2]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <qFIS_SetParameter+0xe0>)
 8001d66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
                }
                break;
 8001d72:	e036      	b.n	8001de2 <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8001d74:	78bb      	ldrb	r3, [r7, #2]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d935      	bls.n	8001de6 <qFIS_SetParameter+0xc6>
 8001d7a:	78bb      	ldrb	r3, [r7, #2]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d832      	bhi.n	8001de6 <qFIS_SetParameter+0xc6>
                    f->aggregate = method[ x ];
 8001d80:	78bb      	ldrb	r3, [r7, #2]
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <qFIS_SetParameter+0xe0>)
 8001d84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
                }
                break;
 8001d90:	e029      	b.n	8001de6 <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d828      	bhi.n	8001dea <qFIS_SetParameter+0xca>
                    f->andOp = method[ x ];
 8001d98:	78bb      	ldrb	r3, [r7, #2]
 8001d9a:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <qFIS_SetParameter+0xe0>)
 8001d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
                }
                break;
 8001da8:	e01f      	b.n	8001dea <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 8001daa:	78bb      	ldrb	r3, [r7, #2]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d91e      	bls.n	8001dee <qFIS_SetParameter+0xce>
 8001db0:	78bb      	ldrb	r3, [r7, #2]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d81b      	bhi.n	8001dee <qFIS_SetParameter+0xce>
                    f->orOp = method[ x ];
 8001db6:	78bb      	ldrb	r3, [r7, #2]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <qFIS_SetParameter+0xe0>)
 8001dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
                }
                break;
 8001dc6:	e012      	b.n	8001dee <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 8001dc8:	78bb      	ldrb	r3, [r7, #2]
 8001dca:	2b13      	cmp	r3, #19
 8001dcc:	d911      	bls.n	8001df2 <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 8001dce:	78ba      	ldrb	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
                }
                break;
 8001dd8:	e00b      	b.n	8001df2 <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 8001dda:	bf00      	nop
 8001ddc:	e00a      	b.n	8001df4 <qFIS_SetParameter+0xd4>
                break;
 8001dde:	bf00      	nop
 8001de0:	e008      	b.n	8001df4 <qFIS_SetParameter+0xd4>
                break;
 8001de2:	bf00      	nop
 8001de4:	e006      	b.n	8001df4 <qFIS_SetParameter+0xd4>
                break;
 8001de6:	bf00      	nop
 8001de8:	e004      	b.n	8001df4 <qFIS_SetParameter+0xd4>
                break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <qFIS_SetParameter+0xd4>
                break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <qFIS_SetParameter+0xd4>
                break;
 8001df2:	bf00      	nop

    return retVal;
 8001df4:	68fb      	ldr	r3, [r7, #12]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	08006f50 	.word	0x08006f50

08001e04 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	460b      	mov	r3, r1
 8001e12:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80bb 	beq.w	8001f96 <qFIS_Setup+0x192>
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	f200 80b7 	bhi.w	8001f96 <qFIS_Setup+0x192>
 8001e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80b3 	beq.w	8001f96 <qFIS_Setup+0x192>
 8001e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80af 	beq.w	8001f96 <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <qFIS_Setup+0x19c>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <qFIS_Setup+0x1a0>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091a      	lsrs	r2, r3, #4
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <qFIS_Setup+0x1a4>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	091a      	lsrs	r2, r3, #4
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <qFIS_Setup+0x1a4>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	091a      	lsrs	r2, r3, #4
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7a:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e80:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e86:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	7afa      	ldrb	r2, [r7, #11]
 8001e9e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8001ea2:	2264      	movs	r2, #100	; 0x64
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff ff3a 	bl	8001d20 <qFIS_SetParameter>
 8001eac:	4602      	mov	r2, r0
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff ff31 	bl	8001d20 <qFIS_SetParameter>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	2103      	movs	r1, #3
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff ff28 	bl	8001d20 <qFIS_SetParameter>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff ff1f 	bl	8001d20 <qFIS_SetParameter>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 8001eea:	2202      	movs	r2, #2
 8001eec:	2101      	movs	r1, #1
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7ff ff16 	bl	8001d20 <qFIS_SetParameter>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	4413      	add	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
        retVal = ( 5 == retVal ) ? 1 : 0;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	bf0c      	ite	eq
 8001f02:	2301      	moveq	r3, #1
 8001f04:	2300      	movne	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <qFIS_Setup+0x110>
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <qFIS_Setup+0x1a8>)
 8001f12:	e000      	b.n	8001f16 <qFIS_Setup+0x112>
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e032      	b.n	8001f8c <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2134      	movs	r1, #52	; 0x34
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	6858      	ldr	r0, [r3, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2134      	movs	r1, #52	; 0x34
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fd5a 	bl	8000a00 <__aeabi_fsub>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461d      	mov	r5, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fe05 	bl	8000b64 <__aeabi_ui2f>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2134      	movs	r1, #52	; 0x34
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	18d4      	adds	r4, r2, r3
 8001f68:	4601      	mov	r1, r0
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f7fe ff06 	bl	8000d7c <__aeabi_fdiv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	60e3      	str	r3, [r4, #12]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2134      	movs	r1, #52	; 0x34
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3c7      	bcc.n	8001f26 <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8001f96:	697b      	ldr	r3, [r7, #20]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa0:	aaaaaaab 	.word	0xaaaaaaab
 8001fa4:	4ec4ec4f 	.word	0x4ec4ec4f
 8001fa8:	cccccccd 	.word	0xcccccccd
 8001fac:	080021b9 	.word	0x080021b9
 8001fb0:	0800224d 	.word	0x0800224d

08001fb4 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <qFIS_InputSetup+0x4a>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db15      	blt.n	8001ffe <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001ffe:	697b      	ldr	r3, [r7, #20]
}
 8002000:	4618      	mov	r0, r3
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 800200a:	b480      	push	{r7}
 800200c:	b087      	sub	sp, #28
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d05a      	beq.n	80020d8 <qFIS_OutputSetup+0xce>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db57      	blt.n	80020d8 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2234      	movs	r2, #52	; 0x34
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
        v[ t ].data[ 1 ] = 0.0f;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2234      	movs	r2, #52	; 0x34
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
        v[ t ].data[ 2 ] = 0.0f;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2234      	movs	r2, #52	; 0x34
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
        v[ t ].data[ 3 ] = 0.0f;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2234      	movs	r2, #52	; 0x34
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].x = 0.0f;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2234      	movs	r2, #52	; 0x34
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
        v[ t ].y = 0.0f;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2234      	movs	r2, #52	; 0x34
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
        v[ t ].b.min = min;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2234      	movs	r2, #52	; 0x34
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2234      	movs	r2, #52	; 0x34
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2234      	movs	r2, #52	; 0x34
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	2200      	movs	r2, #0
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].yag = NULL;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2234      	movs	r2, #52	; 0x34
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
        retVal = 1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80020d8:	697b      	ldr	r3, [r7, #20]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d055      	beq.n	80021a8 <qFIS_SetMF+0xc4>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db52      	blt.n	80021a8 <qFIS_SetMF+0xc4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db4f      	blt.n	80021a8 <qFIS_SetMF+0xc4>
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	2b1a      	cmp	r3, #26
 800210c:	d84c      	bhi.n	80021a8 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e00c      	b.n	8002144 <qFIS_SetMF+0x60>
        }
        else {
            m[ mf ].shape = fShape[ s ];
 800212a:	78f9      	ldrb	r1, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <qFIS_SetMF+0xd0>)
 800213e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002142:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	189c      	adds	r4, r3, r2
 8002192:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800219c:	f001 f81b 	bl	80031d6 <qFIS_Bound>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80021a8:	697b      	ldr	r3, [r7, #20]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08006f64 	.word	0x08006f64

080021b8 <qFIS_DeFuzz_Centroid>:
    }
}
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d004      	beq.n	80021da <qFIS_DeFuzz_Centroid+0x22>
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d02b      	beq.n	800222c <qFIS_DeFuzz_Centroid+0x74>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <qFIS_DeFuzz_Centroid+0x62>
            break;
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
            break;
        default:
            break;
 80021d8:	e033      	b.n	8002242 <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] += o->x*o->y;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699c      	ldr	r4, [r3, #24]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7fe fd13 	bl	8000c14 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7fe fc06 	bl	8000a04 <__addsf3>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += o->y;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f7fe fbfa 	bl	8000a04 <__addsf3>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	61da      	str	r2, [r3, #28]
            break;
 8002218:	e013      	b.n	8002242 <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
            break;
 800222a:	e00a      	b.n	8002242 <qFIS_DeFuzz_Centroid+0x8a>
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7fe fda0 	bl	8000d7c <__aeabi_fdiv>
 800223c:	4603      	mov	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
            break;
 8002240:	bf00      	nop
    }

    return d;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d109      	bne.n	8002278 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f7fe fd84 	bl	8000d7c <__aeabi_fdiv>
 8002274:	4603      	mov	r3, r0
 8002276:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8002278:	68fb      	ldr	r3, [r7, #12]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <qFIS_TriMF>:
}
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8002282:	b5b0      	push	{r4, r5, r7, lr}
 8002284:	b08a      	sub	sp, #40	; 0x28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 80022a6:	6a39      	ldr	r1, [r7, #32]
 80022a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022aa:	f7fe fba9 	bl	8000a00 <__aeabi_fsub>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461c      	mov	r4, r3
 80022b2:	6a39      	ldr	r1, [r7, #32]
 80022b4:	69f8      	ldr	r0, [r7, #28]
 80022b6:	f7fe fba3 	bl	8000a00 <__aeabi_fsub>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	4620      	mov	r0, r4
 80022c0:	f7fe fd5c 	bl	8000d7c <__aeabi_fdiv>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461c      	mov	r4, r3
 80022c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ca:	69b8      	ldr	r0, [r7, #24]
 80022cc:	f7fe fb98 	bl	8000a00 <__aeabi_fsub>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461d      	mov	r5, r3
 80022d4:	69f9      	ldr	r1, [r7, #28]
 80022d6:	69b8      	ldr	r0, [r7, #24]
 80022d8:	f7fe fb92 	bl	8000a00 <__aeabi_fsub>
 80022dc:	4603      	mov	r3, r0
 80022de:	4619      	mov	r1, r3
 80022e0:	4628      	mov	r0, r5
 80022e2:	f7fe fd4b 	bl	8000d7c <__aeabi_fdiv>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4619      	mov	r1, r3
 80022ea:	4620      	mov	r0, r4
 80022ec:	f000 fef0 	bl	80030d0 <qFIS_Min>
 80022f0:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 80022f2:	f04f 0100 	mov.w	r1, #0
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f000 ff05 	bl	8003106 <qFIS_Max>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bdb0      	pop	{r4, r5, r7, pc}

08002306 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b08b      	sub	sp, #44	; 0x2c
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002334:	f7fe fb64 	bl	8000a00 <__aeabi_fsub>
 8002338:	4603      	mov	r3, r0
 800233a:	461c      	mov	r4, r3
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	69f8      	ldr	r0, [r7, #28]
 8002340:	f7fe fb5e 	bl	8000a00 <__aeabi_fsub>
 8002344:	4603      	mov	r3, r0
 8002346:	4619      	mov	r1, r3
 8002348:	4620      	mov	r0, r4
 800234a:	f7fe fd17 	bl	8000d7c <__aeabi_fdiv>
 800234e:	4603      	mov	r3, r0
 8002350:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002354:	4618      	mov	r0, r3
 8002356:	f000 febb 	bl	80030d0 <qFIS_Min>
 800235a:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 800235c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7fe fb4e 	bl	8000a00 <__aeabi_fsub>
 8002364:	4603      	mov	r3, r0
 8002366:	461c      	mov	r4, r3
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7fe fb48 	bl	8000a00 <__aeabi_fsub>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f7fe fd01 	bl	8000d7c <__aeabi_fdiv>
 800237a:	4603      	mov	r3, r0
 800237c:	4619      	mov	r1, r3
 800237e:	6938      	ldr	r0, [r7, #16]
 8002380:	f000 fea6 	bl	80030d0 <qFIS_Min>
 8002384:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	6938      	ldr	r0, [r7, #16]
 800238c:	f000 febb 	bl	8003106 <qFIS_Max>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	372c      	adds	r7, #44	; 0x2c
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}

0800239a <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800239a:	b590      	push	{r4, r7, lr}
 800239c:	b089      	sub	sp, #36	; 0x24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 80023be:	6939      	ldr	r1, [r7, #16]
 80023c0:	69f8      	ldr	r0, [r7, #28]
 80023c2:	f7fe fb1d 	bl	8000a00 <__aeabi_fsub>
 80023c6:	4603      	mov	r3, r0
 80023c8:	69b9      	ldr	r1, [r7, #24]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fcd6 	bl	8000d7c <__aeabi_fdiv>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fadc 	bl	8001990 <qFFMath_Abs>
 80023d8:	4604      	mov	r4, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4619      	mov	r1, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fb10 	bl	8000a04 <__addsf3>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff fc83 	bl	8001cf4 <qFFMath_Pow>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fb05 	bl	8000a04 <__addsf3>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002402:	f7fe fcbb 	bl	8000d7c <__aeabi_fdiv>
 8002406:	4603      	mov	r3, r0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3724      	adds	r7, #36	; 0x24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd90      	pop	{r4, r7, pc}

08002410 <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 800242e:	6979      	ldr	r1, [r7, #20]
 8002430:	69f8      	ldr	r0, [r7, #28]
 8002432:	f7fe fae5 	bl	8000a00 <__aeabi_fsub>
 8002436:	4603      	mov	r3, r0
 8002438:	69b9      	ldr	r1, [r7, #24]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fc9e 	bl	8000d7c <__aeabi_fdiv>
 8002440:	4603      	mov	r3, r0
 8002442:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 8002444:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8002448:	6938      	ldr	r0, [r7, #16]
 800244a:	f7fe fbe3 	bl	8000c14 <__aeabi_fmul>
 800244e:	4603      	mov	r3, r0
 8002450:	6939      	ldr	r1, [r7, #16]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fbde 	bl	8000c14 <__aeabi_fmul>
 8002458:	4603      	mov	r3, r0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc22 	bl	8001ca4 <qFFMath_Exp>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b08a      	sub	sp, #40	; 0x28
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 8002488:	6a39      	ldr	r1, [r7, #32]
 800248a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800248c:	f7fe fd6a 	bl	8000f64 <__aeabi_fcmple>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <qFIS_Gauss2MF+0x3a>
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7ff ffb8 	bl	8002410 <qFIS_GaussMF>
 80024a0:	4603      	mov	r3, r0
 80024a2:	e001      	b.n	80024a8 <qFIS_Gauss2MF+0x3e>
 80024a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024a8:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 80024aa:	69f9      	ldr	r1, [r7, #28]
 80024ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ae:	f7fe fd59 	bl	8000f64 <__aeabi_fcmple>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <qFIS_Gauss2MF+0x60>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3308      	adds	r3, #8
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4619      	mov	r1, r3
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff ffa5 	bl	8002410 <qFIS_GaussMF>
 80024c6:	4603      	mov	r3, r0
 80024c8:	e001      	b.n	80024ce <qFIS_Gauss2MF+0x64>
 80024ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024ce:	617b      	str	r3, [r7, #20]

    return f1*f2;
 80024d0:	6979      	ldr	r1, [r7, #20]
 80024d2:	69b8      	ldr	r0, [r7, #24]
 80024d4:	f7fe fb9e 	bl	8000c14 <__aeabi_fmul>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 80024e2:	b590      	push	{r4, r7, lr}
 80024e4:	b089      	sub	sp, #36	; 0x24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002506:	6979      	ldr	r1, [r7, #20]
 8002508:	69f8      	ldr	r0, [r7, #28]
 800250a:	f7fe fa79 	bl	8000a00 <__aeabi_fsub>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	4620      	mov	r0, r4
 8002514:	f7fe fb7e 	bl	8000c14 <__aeabi_fmul>
 8002518:	4603      	mov	r3, r0
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fbc2 	bl	8001ca4 <qFFMath_Exp>
 8002520:	4603      	mov	r3, r0
 8002522:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fa6c 	bl	8000a04 <__addsf3>
 800252c:	4603      	mov	r3, r0
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002534:	f7fe fc22 	bl	8000d7c <__aeabi_fdiv>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}

08002542 <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b08a      	sub	sp, #40	; 0x28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 800256c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002570:	6a38      	ldr	r0, [r7, #32]
 8002572:	f000 fe9a 	bl	80032aa <qFMathEx_Equal>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	6978      	ldr	r0, [r7, #20]
 8002582:	f7fe fcf9 	bl	8000f78 <__aeabi_fcmpge>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <qFIS_TSigMF+0x50>
            y = max;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	e033      	b.n	80025fa <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
 8002596:	e030      	b.n	80025fa <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	6a38      	ldr	r0, [r7, #32]
 800259e:	f000 fe84 	bl	80032aa <qFMathEx_Equal>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f7fe fce3 	bl	8000f78 <__aeabi_fcmpge>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <qFIS_TSigMF+0x7c>
            y = min;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e01d      	b.n	80025fa <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	e01a      	b.n	80025fa <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80025ca:	f7fe fbd7 	bl	8000d7c <__aeabi_fdiv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fa13 	bl	8000a00 <__aeabi_fsub>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb75 	bl	8001ccc <qFFMath_Log>
 80025e2:	4603      	mov	r3, r0
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbc8 	bl	8000d7c <__aeabi_fdiv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4619      	mov	r1, r3
 80025f0:	6938      	ldr	r0, [r7, #16]
 80025f2:	f7fe fa05 	bl	8000a00 <__aeabi_fsub>
 80025f6:	4603      	mov	r3, r0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ff64 	bl	80024e2 <qFIS_SigMF>
 800261a:	4604      	mov	r4, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	3308      	adds	r3, #8
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4619      	mov	r1, r3
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff ff5c 	bl	80024e2 <qFIS_SigMF>
 800262a:	4603      	mov	r3, r0
 800262c:	4619      	mov	r1, r3
 800262e:	4620      	mov	r0, r4
 8002630:	f7fe f9e6 	bl	8000a00 <__aeabi_fsub>
 8002634:	4603      	mov	r3, r0
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9aa 	bl	8001990 <qFFMath_Abs>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bd90      	pop	{r4, r7, pc}

08002646 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002646:	b590      	push	{r4, r7, lr}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff ff43 	bl	80024e2 <qFIS_SigMF>
 800265c:	4604      	mov	r4, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3308      	adds	r3, #8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff ff3b 	bl	80024e2 <qFIS_SigMF>
 800266c:	4603      	mov	r3, r0
 800266e:	4619      	mov	r1, r3
 8002670:	4620      	mov	r0, r4
 8002672:	f7fe facf 	bl	8000c14 <__aeabi_fmul>
 8002676:	4603      	mov	r3, r0
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f989 	bl	8001990 <qFFMath_Abs>
 800267e:	4603      	mov	r3, r0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 80026a6:	69f9      	ldr	r1, [r7, #28]
 80026a8:	6a38      	ldr	r0, [r7, #32]
 80026aa:	f7fe fc5b 	bl	8000f64 <__aeabi_fcmple>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <qFIS_SMF+0x34>
        y =  0.0f;
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e081      	b.n	80027c0 <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 80026bc:	69b9      	ldr	r1, [r7, #24]
 80026be:	6a38      	ldr	r0, [r7, #32]
 80026c0:	f7fe fc5a 	bl	8000f78 <__aeabi_fcmpge>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <qFIS_SMF+0x4a>
        y = 1.0f;
 80026ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	e076      	b.n	80027c0 <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 80026d2:	69f9      	ldr	r1, [r7, #28]
 80026d4:	6a38      	ldr	r0, [r7, #32]
 80026d6:	f7fe fc4f 	bl	8000f78 <__aeabi_fcmpge>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02f      	beq.n	8002740 <qFIS_SMF+0xb8>
 80026e0:	69b9      	ldr	r1, [r7, #24]
 80026e2:	69f8      	ldr	r0, [r7, #28]
 80026e4:	f7fe f98e 	bl	8000a04 <__addsf3>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fa90 	bl	8000c14 <__aeabi_fmul>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4619      	mov	r1, r3
 80026f8:	6a38      	ldr	r0, [r7, #32]
 80026fa:	f7fe fc33 	bl	8000f64 <__aeabi_fcmple>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01d      	beq.n	8002740 <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 8002704:	69f9      	ldr	r1, [r7, #28]
 8002706:	6a38      	ldr	r0, [r7, #32]
 8002708:	f7fe f97a 	bl	8000a00 <__aeabi_fsub>
 800270c:	4603      	mov	r3, r0
 800270e:	461c      	mov	r4, r3
 8002710:	69f9      	ldr	r1, [r7, #28]
 8002712:	69b8      	ldr	r0, [r7, #24]
 8002714:	f7fe f974 	bl	8000a00 <__aeabi_fsub>
 8002718:	4603      	mov	r3, r0
 800271a:	4619      	mov	r1, r3
 800271c:	4620      	mov	r0, r4
 800271e:	f7fe fb2d 	bl	8000d7c <__aeabi_fdiv>
 8002722:	4603      	mov	r3, r0
 8002724:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4619      	mov	r1, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe f96a 	bl	8000a04 <__addsf3>
 8002730:	4603      	mov	r3, r0
 8002732:	4619      	mov	r1, r3
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f7fe fa6d 	bl	8000c14 <__aeabi_fmul>
 800273a:	4603      	mov	r3, r0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e03f      	b.n	80027c0 <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	6a38      	ldr	r0, [r7, #32]
 8002744:	f7fe fc0e 	bl	8000f64 <__aeabi_fcmple>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d035      	beq.n	80027ba <qFIS_SMF+0x132>
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	69f8      	ldr	r0, [r7, #28]
 8002752:	f7fe f957 	bl	8000a04 <__addsf3>
 8002756:	4603      	mov	r3, r0
 8002758:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fa59 	bl	8000c14 <__aeabi_fmul>
 8002762:	4603      	mov	r3, r0
 8002764:	4619      	mov	r1, r3
 8002766:	6a38      	ldr	r0, [r7, #32]
 8002768:	f7fe fc06 	bl	8000f78 <__aeabi_fcmpge>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d023      	beq.n	80027ba <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	6a38      	ldr	r0, [r7, #32]
 8002776:	f7fe f943 	bl	8000a00 <__aeabi_fsub>
 800277a:	4603      	mov	r3, r0
 800277c:	461c      	mov	r4, r3
 800277e:	69f9      	ldr	r1, [r7, #28]
 8002780:	69b8      	ldr	r0, [r7, #24]
 8002782:	f7fe f93d 	bl	8000a00 <__aeabi_fsub>
 8002786:	4603      	mov	r3, r0
 8002788:	4619      	mov	r1, r3
 800278a:	4620      	mov	r0, r4
 800278c:	f7fe faf6 	bl	8000d7c <__aeabi_fdiv>
 8002790:	4603      	mov	r3, r0
 8002792:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	4619      	mov	r1, r3
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe f933 	bl	8000a04 <__addsf3>
 800279e:	4603      	mov	r3, r0
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fa36 	bl	8000c14 <__aeabi_fmul>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4619      	mov	r1, r3
 80027ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80027b0:	f7fe f926 	bl	8000a00 <__aeabi_fsub>
 80027b4:	4603      	mov	r3, r0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	e002      	b.n	80027c0 <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	372c      	adds	r7, #44	; 0x2c
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}

080027ca <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80027ca:	b590      	push	{r4, r7, lr}
 80027cc:	b091      	sub	sp, #68	; 0x44
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 80027e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027ec:	f7fe f908 	bl	8000a00 <__aeabi_fsub>
 80027f0:	4603      	mov	r3, r0
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 80027f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fa:	f7fe fa0b 	bl	8000c14 <__aeabi_fmul>
 80027fe:	4603      	mov	r3, r0
 8002800:	4619      	mov	r1, r3
 8002802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002804:	f7fe fa06 	bl	8000c14 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 800280c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800280e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002810:	f7fe fa00 	bl	8000c14 <__aeabi_fmul>
 8002814:	4603      	mov	r3, r0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff f8cf 	bl	80019ba <qFFMath_Sqrt>
 800281c:	4603      	mov	r3, r0
 800281e:	4619      	mov	r1, r3
 8002820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002822:	f7fe f8ef 	bl	8000a04 <__addsf3>
 8002826:	4603      	mov	r3, r0
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff26 	bl	8002688 <qFIS_SMF>
 800283c:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 800283e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002842:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002844:	f7fe f8dc 	bl	8000a00 <__aeabi_fsub>
 8002848:	4603      	mov	r3, r0
 800284a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800284e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe f9df 	bl	8000c14 <__aeabi_fmul>
 8002856:	4603      	mov	r3, r0
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f8ae 	bl	80019ba <qFFMath_Sqrt>
 800285e:	4603      	mov	r3, r0
 8002860:	4619      	mov	r1, r3
 8002862:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002864:	f7fe f8ce 	bl	8000a04 <__addsf3>
 8002868:	4603      	mov	r3, r0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff05 	bl	8002688 <qFIS_SMF>
 800287e:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8002880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002882:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002884:	f7fe f8bc 	bl	8000a00 <__aeabi_fsub>
 8002888:	4603      	mov	r3, r0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f880 	bl	8001990 <qFFMath_Abs>
 8002890:	4604      	mov	r4, r0
 8002892:	6a39      	ldr	r1, [r7, #32]
 8002894:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002896:	f7fe f8b3 	bl	8000a00 <__aeabi_fsub>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f877 	bl	8001990 <qFFMath_Abs>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4619      	mov	r1, r3
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7fe fb52 	bl	8000f50 <__aeabi_fcmplt>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <qFIS_TSMF+0xec>
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	e000      	b.n	80028b8 <qFIS_TSMF+0xee>
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3744      	adds	r7, #68	; 0x44
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}

080028c0 <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08b      	sub	sp, #44	; 0x2c
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 80028de:	69f9      	ldr	r1, [r7, #28]
 80028e0:	6a38      	ldr	r0, [r7, #32]
 80028e2:	f7fe fb3f 	bl	8000f64 <__aeabi_fcmple>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <qFIS_ZMF+0x34>
        y = 1.0f;
 80028ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e081      	b.n	80029f8 <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 80028f4:	69b9      	ldr	r1, [r7, #24]
 80028f6:	6a38      	ldr	r0, [r7, #32]
 80028f8:	f7fe fb3e 	bl	8000f78 <__aeabi_fcmpge>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <qFIS_ZMF+0x4a>
        y = 0.0f;
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
 8002908:	e076      	b.n	80029f8 <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 800290a:	69f9      	ldr	r1, [r7, #28]
 800290c:	6a38      	ldr	r0, [r7, #32]
 800290e:	f7fe fb33 	bl	8000f78 <__aeabi_fcmpge>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d035      	beq.n	8002984 <qFIS_ZMF+0xc4>
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	69f8      	ldr	r0, [r7, #28]
 800291c:	f7fe f872 	bl	8000a04 <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe f974 	bl	8000c14 <__aeabi_fmul>
 800292c:	4603      	mov	r3, r0
 800292e:	4619      	mov	r1, r3
 8002930:	6a38      	ldr	r0, [r7, #32]
 8002932:	f7fe fb17 	bl	8000f64 <__aeabi_fcmple>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 800293c:	69f9      	ldr	r1, [r7, #28]
 800293e:	6a38      	ldr	r0, [r7, #32]
 8002940:	f7fe f85e 	bl	8000a00 <__aeabi_fsub>
 8002944:	4603      	mov	r3, r0
 8002946:	461c      	mov	r4, r3
 8002948:	69f9      	ldr	r1, [r7, #28]
 800294a:	69b8      	ldr	r0, [r7, #24]
 800294c:	f7fe f858 	bl	8000a00 <__aeabi_fsub>
 8002950:	4603      	mov	r3, r0
 8002952:	4619      	mov	r1, r3
 8002954:	4620      	mov	r0, r4
 8002956:	f7fe fa11 	bl	8000d7c <__aeabi_fdiv>
 800295a:	4603      	mov	r3, r0
 800295c:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4619      	mov	r1, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe f84e 	bl	8000a04 <__addsf3>
 8002968:	4603      	mov	r3, r0
 800296a:	6979      	ldr	r1, [r7, #20]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f951 	bl	8000c14 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800297a:	f7fe f841 	bl	8000a00 <__aeabi_fsub>
 800297e:	4603      	mov	r3, r0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	e039      	b.n	80029f8 <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	6a38      	ldr	r0, [r7, #32]
 8002988:	f7fe faec 	bl	8000f64 <__aeabi_fcmple>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02f      	beq.n	80029f2 <qFIS_ZMF+0x132>
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	69f8      	ldr	r0, [r7, #28]
 8002996:	f7fe f835 	bl	8000a04 <__addsf3>
 800299a:	4603      	mov	r3, r0
 800299c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe f937 	bl	8000c14 <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	6a38      	ldr	r0, [r7, #32]
 80029ac:	f7fe fae4 	bl	8000f78 <__aeabi_fcmpge>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01d      	beq.n	80029f2 <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	6a38      	ldr	r0, [r7, #32]
 80029ba:	f7fe f821 	bl	8000a00 <__aeabi_fsub>
 80029be:	4603      	mov	r3, r0
 80029c0:	461c      	mov	r4, r3
 80029c2:	69f9      	ldr	r1, [r7, #28]
 80029c4:	69b8      	ldr	r0, [r7, #24]
 80029c6:	f7fe f81b 	bl	8000a00 <__aeabi_fsub>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4619      	mov	r1, r3
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7fe f9d4 	bl	8000d7c <__aeabi_fdiv>
 80029d4:	4603      	mov	r3, r0
 80029d6:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4619      	mov	r1, r3
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f811 	bl	8000a04 <__addsf3>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7fe f914 	bl	8000c14 <__aeabi_fmul>
 80029ec:	4603      	mov	r3, r0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e002      	b.n	80029f8 <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	372c      	adds	r7, #44	; 0x2c
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd90      	pop	{r4, r7, pc}

08002a02 <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002a02:	b590      	push	{r4, r7, lr}
 8002a04:	b089      	sub	sp, #36	; 0x24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8002a20:	6939      	ldr	r1, [r7, #16]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7fe fa94 	bl	8000f50 <__aeabi_fcmplt>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d027      	beq.n	8002a7e <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	69b8      	ldr	r0, [r7, #24]
 8002a32:	f7fe fa8d 	bl	8000f50 <__aeabi_fcmplt>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <qFIS_LinSMF+0x42>
            y = 0.0f;
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e034      	b.n	8002aae <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	69b8      	ldr	r0, [r7, #24]
 8002a48:	f7fe faa0 	bl	8000f8c <__aeabi_fcmpgt>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <qFIS_LinSMF+0x58>
            y = 1.0f;
 8002a52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e029      	b.n	8002aae <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 8002a5a:	6979      	ldr	r1, [r7, #20]
 8002a5c:	69b8      	ldr	r0, [r7, #24]
 8002a5e:	f7fd ffcf 	bl	8000a00 <__aeabi_fsub>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461c      	mov	r4, r3
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	6938      	ldr	r0, [r7, #16]
 8002a6a:	f7fd ffc9 	bl	8000a00 <__aeabi_fsub>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fe f982 	bl	8000d7c <__aeabi_fdiv>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e017      	b.n	8002aae <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8002a7e:	6939      	ldr	r1, [r7, #16]
 8002a80:	6978      	ldr	r0, [r7, #20]
 8002a82:	f000 fc12 	bl	80032aa <qFMathEx_Equal>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	69b8      	ldr	r0, [r7, #24]
 8002a90:	f7fe fa5e 	bl	8000f50 <__aeabi_fcmplt>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <qFIS_LinSMF+0x9e>
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e001      	b.n	8002aa4 <qFIS_LinSMF+0xa2>
 8002aa0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e002      	b.n	8002aae <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8002aae:	69fb      	ldr	r3, [r7, #28]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3724      	adds	r7, #36	; 0x24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd90      	pop	{r4, r7, pc}

08002ab8 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8002ad6:	6939      	ldr	r1, [r7, #16]
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f7fe fa39 	bl	8000f50 <__aeabi_fcmplt>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d027      	beq.n	8002b34 <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	69b8      	ldr	r0, [r7, #24]
 8002ae8:	f7fe fa32 	bl	8000f50 <__aeabi_fcmplt>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <qFIS_LinZMF+0x42>
            y = 1.0f;
 8002af2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	e034      	b.n	8002b64 <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 8002afa:	6939      	ldr	r1, [r7, #16]
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f7fe fa45 	bl	8000f8c <__aeabi_fcmpgt>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <qFIS_LinZMF+0x58>
            y = 0.0f;
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e029      	b.n	8002b64 <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7fd ff74 	bl	8000a00 <__aeabi_fsub>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461c      	mov	r4, r3
 8002b1c:	6939      	ldr	r1, [r7, #16]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7fd ff6e 	bl	8000a00 <__aeabi_fsub>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4619      	mov	r1, r3
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7fe f927 	bl	8000d7c <__aeabi_fdiv>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e017      	b.n	8002b64 <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8002b34:	6939      	ldr	r1, [r7, #16]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f000 fbb7 	bl	80032aa <qFMathEx_Equal>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	69b8      	ldr	r0, [r7, #24]
 8002b46:	f7fe fa03 	bl	8000f50 <__aeabi_fcmplt>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <qFIS_LinZMF+0x9e>
 8002b50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b54:	e001      	b.n	8002b5a <qFIS_LinZMF+0xa2>
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	e002      	b.n	8002b64 <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8002b64:	69fb      	ldr	r3, [r7, #28]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8002b6e:	b590      	push	{r4, r7, lr}
 8002b70:	b091      	sub	sp, #68	; 0x44
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8002b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b90:	f7fd ff36 	bl	8000a00 <__aeabi_fsub>
 8002b94:	4603      	mov	r3, r0
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8002b98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9e:	f7fe f839 	bl	8000c14 <__aeabi_fmul>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba8:	f7fe f834 	bl	8000c14 <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 8002bb0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002bb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bb6:	f7fd ff23 	bl	8000a00 <__aeabi_fsub>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe f826 	bl	8000c14 <__aeabi_fmul>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fef5 	bl	80019ba <qFFMath_Sqrt>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bd6:	f7fd ff15 	bl	8000a04 <__addsf3>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fd4c 	bl	8002688 <qFIS_SMF>
 8002bf0:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 8002bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bf6:	f7fe f80d 	bl	8000c14 <__aeabi_fmul>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fedc 	bl	80019ba <qFFMath_Sqrt>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4619      	mov	r1, r3
 8002c06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c08:	f7fd fefc 	bl	8000a04 <__addsf3>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fd33 	bl	8002688 <qFIS_SMF>
 8002c22:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8002c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c28:	f7fd feea 	bl	8000a00 <__aeabi_fsub>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe feae 	bl	8001990 <qFFMath_Abs>
 8002c34:	4604      	mov	r4, r0
 8002c36:	6a39      	ldr	r1, [r7, #32]
 8002c38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c3a:	f7fd fee1 	bl	8000a00 <__aeabi_fsub>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fea5 	bl	8001990 <qFFMath_Abs>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7fe f980 	bl	8000f50 <__aeabi_fcmplt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <qFIS_TZMF+0xec>
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	e000      	b.n	8002c5c <qFIS_TZMF+0xee>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3744      	adds	r7, #68	; 0x44
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd90      	pop	{r4, r7, pc}

08002c64 <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fd07 	bl	8002688 <qFIS_SMF>
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4619      	mov	r1, r3
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff fe1b 	bl	80028c0 <qFIS_ZMF>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f7fd ffc0 	bl	8000c14 <__aeabi_fmul>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fe7a 	bl	8001990 <qFFMath_Abs>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}

08002ca6 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f000 faf3 	bl	80032aa <qFMathEx_Equal>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <qFIS_SingletonMF+0x2a>
 8002cca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cce:	e001      	b.n	8002cd4 <qFIS_SingletonMF+0x2e>
 8002cd0:	f04f 0300 	mov.w	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8002cfa:	6939      	ldr	r1, [r7, #16]
 8002cfc:	6978      	ldr	r0, [r7, #20]
 8002cfe:	f7fe f931 	bl	8000f64 <__aeabi_fcmple>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <qFIS_ConcaveMF+0x74>
 8002d08:	6939      	ldr	r1, [r7, #16]
 8002d0a:	69b8      	ldr	r0, [r7, #24]
 8002d0c:	f7fe f920 	bl	8000f50 <__aeabi_fcmplt>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01c      	beq.n	8002d50 <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	6938      	ldr	r0, [r7, #16]
 8002d1a:	f7fd fe71 	bl	8000a00 <__aeabi_fsub>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461c      	mov	r4, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fe6c 	bl	8000a04 <__addsf3>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fe65 	bl	8000a00 <__aeabi_fsub>
 8002d36:	4603      	mov	r3, r0
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fe60 	bl	8000a00 <__aeabi_fsub>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7fe f819 	bl	8000d7c <__aeabi_fdiv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e02d      	b.n	8002dac <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7fe f91a 	bl	8000f8c <__aeabi_fcmpgt>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d023      	beq.n	8002da6 <qFIS_ConcaveMF+0xca>
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	69b8      	ldr	r0, [r7, #24]
 8002d62:	f7fe f913 	bl	8000f8c <__aeabi_fcmpgt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01c      	beq.n	8002da6 <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 8002d6c:	6939      	ldr	r1, [r7, #16]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7fd fe46 	bl	8000a00 <__aeabi_fsub>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461c      	mov	r4, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fe41 	bl	8000a04 <__addsf3>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4619      	mov	r1, r3
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7fd fe3a 	bl	8000a00 <__aeabi_fsub>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	69b9      	ldr	r1, [r7, #24]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fe37 	bl	8000a04 <__addsf3>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7fd ffee 	bl	8000d7c <__aeabi_fdiv>
 8002da0:	4603      	mov	r3, r0
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	e002      	b.n	8002dac <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 8002da6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002daa:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8002dac:	69fb      	ldr	r3, [r7, #28]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd90      	pop	{r4, r7, pc}

08002db6 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8002db6:	b590      	push	{r4, r7, lr}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 8002dce:	6939      	ldr	r1, [r7, #16]
 8002dd0:	6978      	ldr	r0, [r7, #20]
 8002dd2:	f7fd fe15 	bl	8000a00 <__aeabi_fsub>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461c      	mov	r4, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ff7c 	bl	8002cdc <qFIS_ConcaveMF>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4619      	mov	r1, r3
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7fd ffc7 	bl	8000d7c <__aeabi_fdiv>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461c      	mov	r4, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fe04 	bl	8000a04 <__addsf3>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7fd fdff 	bl	8000a04 <__addsf3>
 8002e06:	4603      	mov	r3, r0
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fdf8 	bl	8000a00 <__aeabi_fsub>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}
	...

08002e1c <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8002e3a:	6979      	ldr	r1, [r7, #20]
 8002e3c:	69f8      	ldr	r0, [r7, #28]
 8002e3e:	f7fd fddf 	bl	8000a00 <__aeabi_fsub>
 8002e42:	4603      	mov	r3, r0
 8002e44:	490b      	ldr	r1, [pc, #44]	; (8002e74 <qFIS_SpikeMF+0x58>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fee4 	bl	8000c14 <__aeabi_fmul>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd ff93 	bl	8000d7c <__aeabi_fdiv>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fd99 	bl	8001990 <qFFMath_Abs>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ff1d 	bl	8001ca4 <qFFMath_Exp>
 8002e6a:	4603      	mov	r3, r0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	41200000 	.word	0x41200000

08002e78 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 8002e96:	69b9      	ldr	r1, [r7, #24]
 8002e98:	6978      	ldr	r0, [r7, #20]
 8002e9a:	f7fd fdb1 	bl	8000a00 <__aeabi_fsub>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	69f9      	ldr	r1, [r7, #28]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd feb6 	bl	8000c14 <__aeabi_fmul>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fda9 	bl	8000a04 <__addsf3>
 8002eb2:	4603      	mov	r3, r0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	f7fd fd8f 	bl	8000a00 <__aeabi_fsub>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	69f9      	ldr	r1, [r7, #28]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fe94 	bl	8000c14 <__aeabi_fmul>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4619      	mov	r1, r3
 8002ef0:	69b8      	ldr	r0, [r7, #24]
 8002ef2:	f7fd fd85 	bl	8000a00 <__aeabi_fsub>
 8002ef6:	4603      	mov	r3, r0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	69f8      	ldr	r0, [r7, #28]
 8002f22:	f7fe f829 	bl	8000f78 <__aeabi_fcmpge>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <qFIS_RectangleMF+0x40>
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	69f8      	ldr	r0, [r7, #28]
 8002f30:	f7fe f818 	bl	8000f64 <__aeabi_fcmple>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <qFIS_RectangleMF+0x40>
 8002f3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f3e:	e001      	b.n	8002f44 <qFIS_RectangleMF+0x44>
 8002f40:	f04f 0300 	mov.w	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8002f4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f50:	b08a      	sub	sp, #40	; 0x28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <qFIS_CosineMF+0xec>)
 8002f62:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 8002f70:	6a38      	ldr	r0, [r7, #32]
 8002f72:	f7fd fa4f 	bl	8000414 <__aeabi_f2d>
 8002f76:	4604      	mov	r4, r0
 8002f78:	460d      	mov	r5, r1
 8002f7a:	69b8      	ldr	r0, [r7, #24]
 8002f7c:	f7fd fa4a 	bl	8000414 <__aeabi_f2d>
 8002f80:	4680      	mov	r8, r0
 8002f82:	4689      	mov	r9, r1
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7fd fa45 	bl	8000414 <__aeabi_f2d>
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <qFIS_CosineMF+0xf0>)
 8002f90:	f7fd fa98 	bl	80004c4 <__aeabi_dmul>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4640      	mov	r0, r8
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	f7fd f8da 	bl	8000154 <__aeabi_dsub>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	f7fd fcfe 	bl	80009a8 <__aeabi_dcmplt>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d111      	bne.n	8002fd6 <qFIS_CosineMF+0x8a>
 8002fb2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7fd fe2c 	bl	8000c14 <__aeabi_fmul>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fd1f 	bl	8000a04 <__addsf3>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6a38      	ldr	r0, [r7, #32]
 8002fcc:	f7fd ffde 	bl	8000f8c <__aeabi_fcmpgt>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <qFIS_CosineMF+0x92>
        y = 0.0f;
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
 8002fdc:	e026      	b.n	800302c <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 8002fde:	6979      	ldr	r1, [r7, #20]
 8002fe0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fe4:	f7fd feca 	bl	8000d7c <__aeabi_fdiv>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	69f9      	ldr	r1, [r7, #28]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fe11 	bl	8000c14 <__aeabi_fmul>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	6a38      	ldr	r0, [r7, #32]
 8002ffa:	f7fd fd01 	bl	8000a00 <__aeabi_fsub>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4619      	mov	r1, r3
 8003002:	4620      	mov	r0, r4
 8003004:	f7fd fe06 	bl	8000c14 <__aeabi_fmul>
 8003008:	4603      	mov	r3, r0
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fd66 	bl	8001adc <qFFMath_Cos>
 8003010:	4603      	mov	r3, r0
 8003012:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fcf4 	bl	8000a04 <__addsf3>
 800301c:	4603      	mov	r3, r0
 800301e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fdf6 	bl	8000c14 <__aeabi_fmul>
 8003028:	4603      	mov	r3, r0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800302e:	4618      	mov	r0, r3
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003038:	40490fdb 	.word	0x40490fdb
 800303c:	3fe00000 	.word	0x3fe00000

08003040 <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e01a      	b.n	80030a8 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	461a      	mov	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	6898      	ldr	r0, [r3, #8]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4619      	mov	r1, r3
 8003090:	f7fd fdc0 	bl	8000c14 <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	4619      	mov	r1, r3
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f7fd fcb3 	bl	8000a04 <__addsf3>
 800309e:	4603      	mov	r3, r0
 80030a0:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3301      	adds	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3e0      	bcc.n	8003072 <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4619      	mov	r1, r3
 80030bc:	6978      	ldr	r0, [r7, #20]
 80030be:	f7fd fca1 	bl	8000a04 <__addsf3>
 80030c2:	4603      	mov	r3, r0
 80030c4:	617b      	str	r3, [r7, #20]

    return px;
 80030c6:	697b      	ldr	r3, [r7, #20]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd ff37 	bl	8000f50 <__aeabi_fcmplt>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <qFIS_Min+0x1c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	e000      	b.n	80030ee <qFIS_Min+0x1e>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f86d 	bl	80031d6 <qFIS_Bound>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd ff3a 	bl	8000f8c <__aeabi_fcmpgt>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <qFIS_Max+0x1c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e000      	b.n	8003124 <qFIS_Max+0x1e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003128:	f04f 0100 	mov.w	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 f852 	bl	80031d6 <qFIS_Bound>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd fd63 	bl	8000c14 <__aeabi_fmul>
 800314e:	4603      	mov	r3, r0
 8003150:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f83c 	bl	80031d6 <qFIS_Bound>
 800315e:	4603      	mov	r3, r0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fc45 	bl	8000a04 <__addsf3>
 800317a:	4603      	mov	r3, r0
 800317c:	461c      	mov	r4, r3
 800317e:	6839      	ldr	r1, [r7, #0]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fd fd47 	bl	8000c14 <__aeabi_fmul>
 8003186:	4603      	mov	r3, r0
 8003188:	4619      	mov	r1, r3
 800318a:	4620      	mov	r0, r4
 800318c:	f7fd fc38 	bl	8000a00 <__aeabi_fsub>
 8003190:	4603      	mov	r3, r0
 8003192:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f81b 	bl	80031d6 <qFIS_Bound>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fc24 	bl	8000a04 <__addsf3>
 80031bc:	4603      	mov	r3, r0
 80031be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f805 	bl	80031d6 <qFIS_Bound>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f805 	bl	80031fa <qFMathEx_InRangeCoerce>

    return y;
 80031f0:	68fb      	ldr	r3, [r7, #12]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fbad 	bl	800196e <qFFMath_IsNaN>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e01b      	b.n	800325a <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	68b8      	ldr	r0, [r7, #8]
 800322a:	f7fd feaf 	bl	8000f8c <__aeabi_fcmpgt>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00e      	b.n	800325a <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fe84 	bl	8000f50 <__aeabi_fcmplt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e001      	b.n	800325a <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 8003264:	b5b0      	push	{r4, r5, r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7fd fbc4 	bl	8000a00 <__aeabi_fsub>
 8003278:	4603      	mov	r3, r0
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe fb88 	bl	8001990 <qFFMath_Abs>
 8003280:	4605      	mov	r5, r0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe fb84 	bl	8001990 <qFFMath_Abs>
 8003288:	4602      	mov	r2, r0
 800328a:	2301      	movs	r3, #1
 800328c:	461c      	mov	r4, r3
 800328e:	4611      	mov	r1, r2
 8003290:	4628      	mov	r0, r5
 8003292:	f7fd fe67 	bl	8000f64 <__aeabi_fcmple>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <qFMathEx_AlmostEqual+0x3c>
 800329c:	2300      	movs	r3, #0
 800329e:	461c      	mov	r4, r3
 80032a0:	b2e3      	uxtb	r3, r4
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}

080032aa <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 80032b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffd2 	bl	8003264 <qFMathEx_AlmostEqual>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_MspInit+0x5c>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_MspInit+0x5c>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6193      	str	r3, [r2, #24]
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_MspInit+0x5c>)
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <HAL_MspInit+0x5c>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <HAL_MspInit+0x5c>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_MspInit+0x5c>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_MspInit+0x60>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_MspInit+0x60>)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000

08003330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_I2C_MspInit+0x90>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d132      	bne.n	80033b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_I2C_MspInit+0x94>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_I2C_MspInit+0x94>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6193      	str	r3, [r2, #24]
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_I2C_MspInit+0x94>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003368:	f44f 7340 	mov.w	r3, #768	; 0x300
 800336c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800336e:	2312      	movs	r3, #18
 8003370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	4812      	ldr	r0, [pc, #72]	; (80033c8 <HAL_I2C_MspInit+0x98>)
 800337e:	f000 fbc1 	bl	8003b04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_I2C_MspInit+0x9c>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <HAL_I2C_MspInit+0x9c>)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_I2C_MspInit+0x94>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_I2C_MspInit+0x94>)
 80033a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_I2C_MspInit+0x94>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033b6:	bf00      	nop
 80033b8:	3728      	adds	r7, #40	; 0x28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40005400 	.word	0x40005400
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010c00 	.word	0x40010c00
 80033cc:	40010000 	.word	0x40010000

080033d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_TIM_Base_MspInit+0x44>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d113      	bne.n	800340a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_TIM_Base_MspInit+0x48>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <HAL_TIM_Base_MspInit+0x48>)
 80033e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ec:	6193      	str	r3, [r2, #24]
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_TIM_Base_MspInit+0x48>)
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2100      	movs	r1, #0
 80033fe:	2019      	movs	r0, #25
 8003400:	f000 fa99 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003404:	2019      	movs	r0, #25
 8003406:	f000 fab2 	bl	800396e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40021000 	.word	0x40021000

0800341c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a12      	ldr	r2, [pc, #72]	; (8003474 <HAL_TIM_PWM_MspInit+0x58>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10c      	bne.n	8003448 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_TIM_PWM_MspInit+0x5c>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_TIM_PWM_MspInit+0x5c>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	61d3      	str	r3, [r2, #28]
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_TIM_PWM_MspInit+0x5c>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003446:	e010      	b.n	800346a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HAL_TIM_PWM_MspInit+0x60>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10b      	bne.n	800346a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_TIM_PWM_MspInit+0x5c>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_TIM_PWM_MspInit+0x5c>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	61d3      	str	r3, [r2, #28]
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_TIM_PWM_MspInit+0x5c>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40000400 	.word	0x40000400
 8003478:	40021000 	.word	0x40021000
 800347c:	40000800 	.word	0x40000800

08003480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a27      	ldr	r2, [pc, #156]	; (8003538 <HAL_TIM_MspPostInit+0xb8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d12a      	bne.n	80034f6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a0:	4b26      	ldr	r3, [pc, #152]	; (800353c <HAL_TIM_MspPostInit+0xbc>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4a25      	ldr	r2, [pc, #148]	; (800353c <HAL_TIM_MspPostInit+0xbc>)
 80034a6:	f043 0308 	orr.w	r3, r3, #8
 80034aa:	6193      	str	r3, [r2, #24]
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_TIM_MspPostInit+0xbc>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034b8:	2330      	movs	r3, #48	; 0x30
 80034ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2302      	movs	r3, #2
 80034c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4619      	mov	r1, r3
 80034ca:	481d      	ldr	r0, [pc, #116]	; (8003540 <HAL_TIM_MspPostInit+0xc0>)
 80034cc:	f000 fb1a 	bl	8003b04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_TIM_MspPostInit+0xc4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIM_MspPostInit+0xc4>)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80034f4:	e01c      	b.n	8003530 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_TIM_MspPostInit+0xc8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d117      	bne.n	8003530 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_TIM_MspPostInit+0xbc>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <HAL_TIM_MspPostInit+0xbc>)
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_TIM_MspPostInit+0xbc>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003518:	23c0      	movs	r3, #192	; 0xc0
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2302      	movs	r3, #2
 8003522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4619      	mov	r1, r3
 800352a:	4805      	ldr	r0, [pc, #20]	; (8003540 <HAL_TIM_MspPostInit+0xc0>)
 800352c:	f000 faea 	bl	8003b04 <HAL_GPIO_Init>
}
 8003530:	bf00      	nop
 8003532:	3728      	adds	r7, #40	; 0x28
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40000400 	.word	0x40000400
 800353c:	40021000 	.word	0x40021000
 8003540:	40010c00 	.word	0x40010c00
 8003544:	40010000 	.word	0x40010000
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_UART_MspInit+0x9c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d139      	bne.n	80035e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_UART_MspInit+0xa0>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_UART_MspInit+0xa0>)
 8003572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003576:	6193      	str	r3, [r2, #24]
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_UART_MspInit+0xa0>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_UART_MspInit+0xa0>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_UART_MspInit+0xa0>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	6193      	str	r3, [r2, #24]
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_UART_MspInit+0xa0>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800359c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035a6:	2303      	movs	r3, #3
 80035a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	4619      	mov	r1, r3
 80035b0:	480f      	ldr	r0, [pc, #60]	; (80035f0 <HAL_UART_MspInit+0xa4>)
 80035b2:	f000 faa7 	bl	8003b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4619      	mov	r1, r3
 80035ca:	4809      	ldr	r0, [pc, #36]	; (80035f0 <HAL_UART_MspInit+0xa4>)
 80035cc:	f000 fa9a 	bl	8003b04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	2025      	movs	r0, #37	; 0x25
 80035d6:	f000 f9ae 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035da:	2025      	movs	r0, #37	; 0x25
 80035dc:	f000 f9c7 	bl	800396e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035e0:	bf00      	nop
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40013800 	.word	0x40013800
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40010800 	.word	0x40010800

080035f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <NMI_Handler+0x4>

080035fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <HardFault_Handler+0x4>

08003600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <MemManage_Handler+0x4>

08003606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800360a:	e7fe      	b.n	800360a <BusFault_Handler+0x4>

0800360c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <UsageFault_Handler+0x4>

08003612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800363a:	f000 f889 	bl	8003750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <TIM1_UP_IRQHandler+0x10>)
 800364a:	f002 f96b 	bl	8005924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000488 	.word	0x20000488

08003658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <USART1_IRQHandler+0x10>)
 800365e:	f002 ff65 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200003e0 	.word	0x200003e0

0800366c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003678:	480c      	ldr	r0, [pc, #48]	; (80036ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800367a:	490d      	ldr	r1, [pc, #52]	; (80036b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800367c:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003680:	e002      	b.n	8003688 <LoopCopyDataInit>

08003682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003686:	3304      	adds	r3, #4

08003688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800368c:	d3f9      	bcc.n	8003682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003690:	4c0a      	ldr	r4, [pc, #40]	; (80036bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003694:	e001      	b.n	800369a <LoopFillZerobss>

08003696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003698:	3204      	adds	r2, #4

0800369a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800369c:	d3fb      	bcc.n	8003696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800369e:	f7ff ffe5 	bl	800366c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036a2:	f003 faf3 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036a6:	f7fd fe03 	bl	80012b0 <main>
  bx lr
 80036aa:	4770      	bx	lr
  ldr r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80036b4:	08006ff0 	.word	0x08006ff0
  ldr r2, =_sbss
 80036b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80036bc:	200004d4 	.word	0x200004d4

080036c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c0:	e7fe      	b.n	80036c0 <ADC1_2_IRQHandler>
	...

080036c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_Init+0x28>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_Init+0x28>)
 80036ce:	f043 0310 	orr.w	r3, r3, #16
 80036d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d4:	2003      	movs	r0, #3
 80036d6:	f000 f923 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036da:	2000      	movs	r0, #0
 80036dc:	f000 f808 	bl	80036f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e0:	f7ff fdf4 	bl	80032cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_InitTick+0x54>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_InitTick+0x58>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003706:	fbb3 f3f1 	udiv	r3, r3, r1
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f93b 	bl	800398a <HAL_SYSTICK_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00e      	b.n	800373c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d80a      	bhi.n	800373a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003724:	2200      	movs	r2, #0
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	f000 f903 	bl	8003936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003730:	4a06      	ldr	r2, [pc, #24]	; (800374c <HAL_InitTick+0x5c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000004 	.word	0x20000004
 8003748:	2000000c 	.word	0x2000000c
 800374c:	20000008 	.word	0x20000008

08003750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_IncTick+0x1c>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_IncTick+0x20>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_IncTick+0x20>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	2000000c 	.word	0x2000000c
 8003770:	200004d0 	.word	0x200004d0

08003774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return uwTick;
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_GetTick+0x10>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	200004d0 	.word	0x200004d0

08003788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a4:	4013      	ands	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ba:	4a04      	ldr	r2, [pc, #16]	; (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	60d3      	str	r3, [r2, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <__NVIC_GetPriorityGrouping+0x18>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f003 0307 	and.w	r3, r3, #7
}
 80037de:	4618      	mov	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db0b      	blt.n	8003816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	4906      	ldr	r1, [pc, #24]	; (8003820 <__NVIC_EnableIRQ+0x34>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2001      	movs	r0, #1
 800380e:	fa00 f202 	lsl.w	r2, r0, r2
 8003812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	; (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff90 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff2d 	bl	8003788 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003948:	f7ff ff42 	bl	80037d0 <__NVIC_GetPriorityGrouping>
 800394c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff90 	bl	8003878 <NVIC_EncodePriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff5f 	bl	8003824 <__NVIC_SetPriority>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff35 	bl	80037ec <__NVIC_EnableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffa2 	bl	80038dc <SysTick_Config>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d008      	beq.n	80039ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e020      	b.n	8003a0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f202 	lsl.w	r2, r1, r2
 80039f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d005      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e051      	b.n	8003ade <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 020e 	bic.w	r2, r2, #14
 8003a48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <HAL_DMA_Abort_IT+0xd0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d029      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0xa0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a20      	ldr	r2, [pc, #128]	; (8003aec <HAL_DMA_Abort_IT+0xd4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x9c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <HAL_DMA_Abort_IT+0xd8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01a      	beq.n	8003aae <HAL_DMA_Abort_IT+0x96>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_DMA_Abort_IT+0xdc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d012      	beq.n	8003aa8 <HAL_DMA_Abort_IT+0x90>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_DMA_Abort_IT+0xe0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0x8a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_DMA_Abort_IT+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d102      	bne.n	8003a9c <HAL_DMA_Abort_IT+0x84>
 8003a96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a9a:	e00e      	b.n	8003aba <HAL_DMA_Abort_IT+0xa2>
 8003a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa0:	e00b      	b.n	8003aba <HAL_DMA_Abort_IT+0xa2>
 8003aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aa6:	e008      	b.n	8003aba <HAL_DMA_Abort_IT+0xa2>
 8003aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aac:	e005      	b.n	8003aba <HAL_DMA_Abort_IT+0xa2>
 8003aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab2:	e002      	b.n	8003aba <HAL_DMA_Abort_IT+0xa2>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	e000      	b.n	8003aba <HAL_DMA_Abort_IT+0xa2>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <HAL_DMA_Abort_IT+0xe8>)
 8003abc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
    } 
  }
  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40020008 	.word	0x40020008
 8003aec:	4002001c 	.word	0x4002001c
 8003af0:	40020030 	.word	0x40020030
 8003af4:	40020044 	.word	0x40020044
 8003af8:	40020058 	.word	0x40020058
 8003afc:	4002006c 	.word	0x4002006c
 8003b00:	40020000 	.word	0x40020000

08003b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b08b      	sub	sp, #44	; 0x2c
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b16:	e127      	b.n	8003d68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f040 8116 	bne.w	8003d62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b12      	cmp	r3, #18
 8003b3c:	d034      	beq.n	8003ba8 <HAL_GPIO_Init+0xa4>
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d80d      	bhi.n	8003b5e <HAL_GPIO_Init+0x5a>
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d02b      	beq.n	8003b9e <HAL_GPIO_Init+0x9a>
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d804      	bhi.n	8003b54 <HAL_GPIO_Init+0x50>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d031      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d01c      	beq.n	8003b8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b52:	e048      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d043      	beq.n	8003be0 <HAL_GPIO_Init+0xdc>
 8003b58:	2b11      	cmp	r3, #17
 8003b5a:	d01b      	beq.n	8003b94 <HAL_GPIO_Init+0x90>
          break;
 8003b5c:	e043      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b5e:	4a89      	ldr	r2, [pc, #548]	; (8003d84 <HAL_GPIO_Init+0x280>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d026      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
 8003b64:	4a87      	ldr	r2, [pc, #540]	; (8003d84 <HAL_GPIO_Init+0x280>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d806      	bhi.n	8003b78 <HAL_GPIO_Init+0x74>
 8003b6a:	4a87      	ldr	r2, [pc, #540]	; (8003d88 <HAL_GPIO_Init+0x284>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d020      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
 8003b70:	4a86      	ldr	r2, [pc, #536]	; (8003d8c <HAL_GPIO_Init+0x288>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
          break;
 8003b76:	e036      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b78:	4a85      	ldr	r2, [pc, #532]	; (8003d90 <HAL_GPIO_Init+0x28c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d019      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
 8003b7e:	4a85      	ldr	r2, [pc, #532]	; (8003d94 <HAL_GPIO_Init+0x290>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d016      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
 8003b84:	4a84      	ldr	r2, [pc, #528]	; (8003d98 <HAL_GPIO_Init+0x294>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0xae>
          break;
 8003b8a:	e02c      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	623b      	str	r3, [r7, #32]
          break;
 8003b92:	e028      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e023      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	623b      	str	r3, [r7, #32]
          break;
 8003ba6:	e01e      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	330c      	adds	r3, #12
 8003bae:	623b      	str	r3, [r7, #32]
          break;
 8003bb0:	e019      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bba:	2304      	movs	r3, #4
 8003bbc:	623b      	str	r3, [r7, #32]
          break;
 8003bbe:	e012      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bc8:	2308      	movs	r3, #8
 8003bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	611a      	str	r2, [r3, #16]
          break;
 8003bd2:	e008      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	615a      	str	r2, [r3, #20]
          break;
 8003bde:	e002      	b.n	8003be6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
          break;
 8003be4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d801      	bhi.n	8003bf0 <HAL_GPIO_Init+0xec>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	e001      	b.n	8003bf4 <HAL_GPIO_Init+0xf0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2bff      	cmp	r3, #255	; 0xff
 8003bfa:	d802      	bhi.n	8003c02 <HAL_GPIO_Init+0xfe>
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x104>
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	3b08      	subs	r3, #8
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	210f      	movs	r1, #15
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	6a39      	ldr	r1, [r7, #32]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	431a      	orrs	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8096 	beq.w	8003d62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c36:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <HAL_GPIO_Init+0x298>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_GPIO_Init+0x298>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6193      	str	r3, [r2, #24]
 8003c42:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_GPIO_Init+0x298>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c4e:	4a54      	ldr	r2, [pc, #336]	; (8003da0 <HAL_GPIO_Init+0x29c>)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	3302      	adds	r3, #2
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	220f      	movs	r2, #15
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4b      	ldr	r2, [pc, #300]	; (8003da4 <HAL_GPIO_Init+0x2a0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_GPIO_Init+0x19e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4a      	ldr	r2, [pc, #296]	; (8003da8 <HAL_GPIO_Init+0x2a4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00d      	beq.n	8003c9e <HAL_GPIO_Init+0x19a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a49      	ldr	r2, [pc, #292]	; (8003dac <HAL_GPIO_Init+0x2a8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <HAL_GPIO_Init+0x196>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a48      	ldr	r2, [pc, #288]	; (8003db0 <HAL_GPIO_Init+0x2ac>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_GPIO_Init+0x192>
 8003c92:	2303      	movs	r3, #3
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x1a0>
 8003c96:	2304      	movs	r3, #4
 8003c98:	e004      	b.n	8003ca4 <HAL_GPIO_Init+0x1a0>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e002      	b.n	8003ca4 <HAL_GPIO_Init+0x1a0>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_GPIO_Init+0x1a0>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	f002 0203 	and.w	r2, r2, #3
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	4093      	lsls	r3, r2
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cb4:	493a      	ldr	r1, [pc, #232]	; (8003da0 <HAL_GPIO_Init+0x29c>)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cce:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4938      	ldr	r1, [pc, #224]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
 8003cda:	e006      	b.n	8003cea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	4933      	ldr	r1, [pc, #204]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cf6:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	492e      	ldr	r1, [pc, #184]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	4929      	ldr	r1, [pc, #164]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d1e:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	4924      	ldr	r1, [pc, #144]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
 8003d2a:	e006      	b.n	8003d3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	491f      	ldr	r1, [pc, #124]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	491a      	ldr	r1, [pc, #104]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
 8003d52:	e006      	b.n	8003d62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	4915      	ldr	r1, [pc, #84]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	3301      	adds	r3, #1
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f47f aed0 	bne.w	8003b18 <HAL_GPIO_Init+0x14>
  }
}
 8003d78:	bf00      	nop
 8003d7a:	372c      	adds	r7, #44	; 0x2c
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	10210000 	.word	0x10210000
 8003d88:	10110000 	.word	0x10110000
 8003d8c:	10120000 	.word	0x10120000
 8003d90:	10310000 	.word	0x10310000
 8003d94:	10320000 	.word	0x10320000
 8003d98:	10220000 	.word	0x10220000
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40010800 	.word	0x40010800
 8003da8:	40010c00 	.word	0x40010c00
 8003dac:	40011000 	.word	0x40011000
 8003db0:	40011400 	.word	0x40011400
 8003db4:	40010400 	.word	0x40010400

08003db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dc8:	787b      	ldrb	r3, [r7, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dd4:	e003      	b.n	8003dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	041a      	lsls	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e11f      	b.n	800403a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fa8e 	bl	8003330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	; 0x24
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f001 fb90 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8003e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a7b      	ldr	r2, [pc, #492]	; (8004044 <HAL_I2C_Init+0x25c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d807      	bhi.n	8003e6c <HAL_I2C_Init+0x84>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a7a      	ldr	r2, [pc, #488]	; (8004048 <HAL_I2C_Init+0x260>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e006      	b.n	8003e7a <HAL_I2C_Init+0x92>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a77      	ldr	r2, [pc, #476]	; (800404c <HAL_I2C_Init+0x264>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bf94      	ite	ls
 8003e74:	2301      	movls	r3, #1
 8003e76:	2300      	movhi	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0db      	b.n	800403a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a72      	ldr	r2, [pc, #456]	; (8004050 <HAL_I2C_Init+0x268>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0c9b      	lsrs	r3, r3, #18
 8003e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a64      	ldr	r2, [pc, #400]	; (8004044 <HAL_I2C_Init+0x25c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d802      	bhi.n	8003ebc <HAL_I2C_Init+0xd4>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	e009      	b.n	8003ed0 <HAL_I2C_Init+0xe8>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	4a63      	ldr	r2, [pc, #396]	; (8004054 <HAL_I2C_Init+0x26c>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	3301      	adds	r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4956      	ldr	r1, [pc, #344]	; (8004044 <HAL_I2C_Init+0x25c>)
 8003eec:	428b      	cmp	r3, r1
 8003eee:	d80d      	bhi.n	8003f0c <HAL_I2C_Init+0x124>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e59      	subs	r1, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	bf38      	it	cc
 8003f08:	2304      	movcc	r3, #4
 8003f0a:	e04f      	b.n	8003fac <HAL_I2C_Init+0x1c4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d111      	bne.n	8003f38 <HAL_I2C_Init+0x150>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e58      	subs	r0, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e012      	b.n	8003f5e <HAL_I2C_Init+0x176>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	0099      	lsls	r1, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Init+0x17e>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e022      	b.n	8003fac <HAL_I2C_Init+0x1c4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10e      	bne.n	8003f8c <HAL_I2C_Init+0x1a4>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1e58      	subs	r0, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	440b      	add	r3, r1
 8003f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8a:	e00f      	b.n	8003fac <HAL_I2C_Init+0x1c4>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	0099      	lsls	r1, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6809      	ldr	r1, [r1, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6911      	ldr	r1, [r2, #16]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	4311      	orrs	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	000186a0 	.word	0x000186a0
 8004048:	001e847f 	.word	0x001e847f
 800404c:	003d08ff 	.word	0x003d08ff
 8004050:	431bde83 	.word	0x431bde83
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	461a      	mov	r2, r3
 8004066:	4603      	mov	r3, r0
 8004068:	817b      	strh	r3, [r7, #10]
 800406a:	460b      	mov	r3, r1
 800406c:	813b      	strh	r3, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004072:	f7ff fb7f 	bl	8003774 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	f040 80d9 	bne.w	8004238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2319      	movs	r3, #25
 800408c:	2201      	movs	r2, #1
 800408e:	496d      	ldr	r1, [pc, #436]	; (8004244 <HAL_I2C_Mem_Write+0x1ec>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fcbb 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	e0cc      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Mem_Write+0x56>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0c5      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d007      	beq.n	80040d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	; 0x21
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a4d      	ldr	r2, [pc, #308]	; (8004248 <HAL_I2C_Mem_Write+0x1f0>)
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004116:	88f8      	ldrh	r0, [r7, #6]
 8004118:	893a      	ldrh	r2, [r7, #8]
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4603      	mov	r3, r0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 faf2 	bl	8004710 <I2C_RequestMemoryWrite>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d052      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e081      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fd3c 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b04      	cmp	r3, #4
 800414c:	d107      	bne.n	800415e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06b      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11b      	bne.n	80041d8 <HAL_I2C_Mem_Write+0x180>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d017      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1aa      	bne.n	8004136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fd28 	bl	8004c3a <I2C_WaitOnBTFFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d107      	bne.n	8004208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e016      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	00100002 	.word	0x00100002
 8004248:	ffff0000 	.word	0xffff0000

0800424c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800426a:	f7ff fa83 	bl	8003774 <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	f040 823d 	bne.w	80046f8 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2319      	movs	r3, #25
 8004284:	2201      	movs	r2, #1
 8004286:	4981      	ldr	r1, [pc, #516]	; (800448c <HAL_I2C_Mem_Read+0x240>)
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fbbf 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
 8004296:	e230      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Mem_Read+0x5a>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e229      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d007      	beq.n	80042cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2222      	movs	r2, #34	; 0x22
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2240      	movs	r2, #64	; 0x40
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a61      	ldr	r2, [pc, #388]	; (8004490 <HAL_I2C_Mem_Read+0x244>)
 800430c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430e:	88f8      	ldrh	r0, [r7, #6]
 8004310:	893a      	ldrh	r2, [r7, #8]
 8004312:	8979      	ldrh	r1, [r7, #10]
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4603      	mov	r3, r0
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fa8c 	bl	800483c <I2C_RequestMemoryRead>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e1e5      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d113      	bne.n	800435e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e1b9      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	2b01      	cmp	r3, #1
 8004364:	d11d      	bne.n	80043a2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800439e:	b662      	cpsie	i
 80043a0:	e197      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d11d      	bne.n	80043e6 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043e2:	b662      	cpsie	i
 80043e4:	e175      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800440c:	e161      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004412:	2b03      	cmp	r3, #3
 8004414:	f200 811a 	bhi.w	800464c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	2b01      	cmp	r3, #1
 800441e:	d123      	bne.n	8004468 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fc49 	bl	8004cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e162      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004466:	e134      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	2b02      	cmp	r3, #2
 800446e:	d150      	bne.n	8004512 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	2200      	movs	r2, #0
 8004478:	4906      	ldr	r1, [pc, #24]	; (8004494 <HAL_I2C_Mem_Read+0x248>)
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fac6 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e137      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
 800448a:	bf00      	nop
 800448c:	00100002 	.word	0x00100002
 8004490:	ffff0000 	.word	0xffff0000
 8004494:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004498:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044dc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004510:	e0df      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2200      	movs	r2, #0
 800451a:	497a      	ldr	r1, [pc, #488]	; (8004704 <HAL_I2C_Mem_Read+0x4b8>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fa75 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0e6      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800453c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004570:	4b65      	ldr	r3, [pc, #404]	; (8004708 <HAL_I2C_Mem_Read+0x4bc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	08db      	lsrs	r3, r3, #3
 8004576:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_I2C_Mem_Read+0x4c0>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	0a1a      	lsrs	r2, r3, #8
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00da      	lsls	r2, r3, #3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	3b01      	subs	r3, #1
 800458e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d117      	bne.n	80045c6 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045b8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e099      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d1da      	bne.n	800458a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004616:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a
 800464a:	e042      	b.n	80046d2 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fb33 	bl	8004cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e04c      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d118      	bne.n	80046d2 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f47f ae99 	bne.w	800440e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	00010004 	.word	0x00010004
 8004708:	20000004 	.word	0x20000004
 800470c:	14f8b589 	.word	0x14f8b589

08004710 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	817b      	strh	r3, [r7, #10]
 8004722:	460b      	mov	r3, r1
 8004724:	813b      	strh	r3, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	2200      	movs	r2, #0
 8004742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f960 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d103      	bne.n	800476a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e05f      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800477c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	492d      	ldr	r1, [pc, #180]	; (8004838 <I2C_RequestMemoryWrite+0x128>)
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f998 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e04c      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	6a39      	ldr	r1, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa02 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d107      	bne.n	80047d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e02b      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047dc:	893b      	ldrh	r3, [r7, #8]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]
 80047e6:	e021      	b.n	800482c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047e8:	893b      	ldrh	r3, [r7, #8]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f9dc 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b04      	cmp	r3, #4
 800480c:	d107      	bne.n	800481e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e005      	b.n	800482e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004822:	893b      	ldrh	r3, [r7, #8]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	00010002 	.word	0x00010002

0800483c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	817b      	strh	r3, [r7, #10]
 800484e:	460b      	mov	r3, r1
 8004850:	813b      	strh	r3, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2200      	movs	r2, #0
 800487e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f8c2 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d103      	bne.n	80048a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0aa      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	4952      	ldr	r1, [pc, #328]	; (8004a08 <I2C_RequestMemoryRead+0x1cc>)
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f8fa 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e097      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f964 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d107      	bne.n	800490e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e076      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d105      	bne.n	8004924 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004918:	893b      	ldrh	r3, [r7, #8]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	611a      	str	r2, [r3, #16]
 8004922:	e021      	b.n	8004968 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004924:	893b      	ldrh	r3, [r7, #8]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	b29b      	uxth	r3, r3
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004934:	6a39      	ldr	r1, [r7, #32]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f93e 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b04      	cmp	r3, #4
 8004948:	d107      	bne.n	800495a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e050      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800495e:	893b      	ldrh	r3, [r7, #8]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	6a39      	ldr	r1, [r7, #32]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f923 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	2b04      	cmp	r3, #4
 800497e:	d107      	bne.n	8004990 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e035      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f82b 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d103      	bne.n	80049d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e013      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049d8:	897b      	ldrh	r3, [r7, #10]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	6a3a      	ldr	r2, [r7, #32]
 80049ec:	4906      	ldr	r1, [pc, #24]	; (8004a08 <I2C_RequestMemoryRead+0x1cc>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f863 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	00010002 	.word	0x00010002

08004a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	e025      	b.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d021      	beq.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fe fea5 	bl	8003774 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e023      	b.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10d      	bne.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	e00c      	b.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d0b6      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac8:	e051      	b.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d123      	bne.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e046      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d021      	beq.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fe fe23 	bl	8003774 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d116      	bne.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e020      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e00b      	b.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d18d      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc4:	e02d      	b.n	8004c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f8ce 	bl	8004d68 <I2C_IsAcknowledgeFailed>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e02d      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d021      	beq.n	8004c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fe fdc9 	bl	8003774 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e007      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b80      	cmp	r3, #128	; 0x80
 8004c2e:	d1ca      	bne.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c46:	e02d      	b.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f88d 	bl	8004d68 <I2C_IsAcknowledgeFailed>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e02d      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d021      	beq.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fe fd88 	bl	8003774 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d116      	bne.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e007      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d1ca      	bne.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc8:	e042      	b.n	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d119      	bne.n	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0210 	mvn.w	r2, #16
 8004ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e029      	b.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7fe fd32 	bl	8003774 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e007      	b.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d1b5      	bne.n	8004cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d11b      	bne.n	8004db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e26c      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8087 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004de4:	4b92      	ldr	r3, [pc, #584]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d00c      	beq.n	8004e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004df0:	4b8f      	ldr	r3, [pc, #572]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d112      	bne.n	8004e22 <HAL_RCC_OscConfig+0x5e>
 8004dfc:	4b8c      	ldr	r3, [pc, #560]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d10b      	bne.n	8004e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0a:	4b89      	ldr	r3, [pc, #548]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x12c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d168      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e246      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x76>
 8004e2c:	4b80      	ldr	r3, [pc, #512]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7f      	ldr	r2, [pc, #508]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e02e      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x98>
 8004e42:	4b7b      	ldr	r3, [pc, #492]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a7a      	ldr	r2, [pc, #488]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b78      	ldr	r3, [pc, #480]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a77      	ldr	r2, [pc, #476]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e01d      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0xbc>
 8004e66:	4b72      	ldr	r3, [pc, #456]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a71      	ldr	r2, [pc, #452]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b6f      	ldr	r3, [pc, #444]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e80:	4b6b      	ldr	r3, [pc, #428]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a6a      	ldr	r2, [pc, #424]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b68      	ldr	r3, [pc, #416]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a67      	ldr	r2, [pc, #412]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fe fc68 	bl	8003774 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fe fc64 	bl	8003774 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e1fa      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xe4>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fc54 	bl	8003774 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fe fc50 	bl	8003774 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1e6      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee2:	4b53      	ldr	r3, [pc, #332]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x10c>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d063      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004efe:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f0a:	4b49      	ldr	r3, [pc, #292]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d11c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x18c>
 8004f16:	4b46      	ldr	r3, [pc, #280]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f22:	4b43      	ldr	r3, [pc, #268]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_RCC_OscConfig+0x176>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e1ba      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4939      	ldr	r1, [pc, #228]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	e03a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d020      	beq.n	8004f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f58:	4b36      	ldr	r3, [pc, #216]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fc09 	bl	8003774 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f66:	f7fe fc05 	bl	8003774 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e19b      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f84:	4b2a      	ldr	r3, [pc, #168]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4927      	ldr	r1, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]
 8004f98:	e015      	b.n	8004fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fe fbe8 	bl	8003774 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fe fbe4 	bl	8003774 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e17a      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d03a      	beq.n	8005048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d019      	beq.n	800500e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fda:	4b17      	ldr	r3, [pc, #92]	; (8005038 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe0:	f7fe fbc8 	bl	8003774 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe8:	f7fe fbc4 	bl	8003774 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e15a      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005006:	2001      	movs	r0, #1
 8005008:	f000 fada 	bl	80055c0 <RCC_Delay>
 800500c:	e01c      	b.n	8005048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_RCC_OscConfig+0x274>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005014:	f7fe fbae 	bl	8003774 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501a:	e00f      	b.n	800503c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501c:	f7fe fbaa 	bl	8003774 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d908      	bls.n	800503c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e140      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	42420000 	.word	0x42420000
 8005038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b9e      	ldr	r3, [pc, #632]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e9      	bne.n	800501c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a6 	beq.w	80051a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505a:	4b97      	ldr	r3, [pc, #604]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	4b94      	ldr	r3, [pc, #592]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	4a93      	ldr	r2, [pc, #588]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005070:	61d3      	str	r3, [r2, #28]
 8005072:	4b91      	ldr	r3, [pc, #580]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b8e      	ldr	r3, [pc, #568]	; (80052bc <HAL_RCC_OscConfig+0x4f8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d118      	bne.n	80050c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508e:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <HAL_RCC_OscConfig+0x4f8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a8a      	ldr	r2, [pc, #552]	; (80052bc <HAL_RCC_OscConfig+0x4f8>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509a:	f7fe fb6b 	bl	8003774 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fe fb67 	bl	8003774 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	; 0x64
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0fd      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	4b81      	ldr	r3, [pc, #516]	; (80052bc <HAL_RCC_OscConfig+0x4f8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x312>
 80050c8:	4b7b      	ldr	r3, [pc, #492]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4a7a      	ldr	r2, [pc, #488]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6213      	str	r3, [r2, #32]
 80050d4:	e02d      	b.n	8005132 <HAL_RCC_OscConfig+0x36e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x334>
 80050de:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4a75      	ldr	r2, [pc, #468]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6213      	str	r3, [r2, #32]
 80050ea:	4b73      	ldr	r3, [pc, #460]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a72      	ldr	r2, [pc, #456]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	6213      	str	r3, [r2, #32]
 80050f6:	e01c      	b.n	8005132 <HAL_RCC_OscConfig+0x36e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b05      	cmp	r3, #5
 80050fe:	d10c      	bne.n	800511a <HAL_RCC_OscConfig+0x356>
 8005100:	4b6d      	ldr	r3, [pc, #436]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	4a6c      	ldr	r2, [pc, #432]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	6213      	str	r3, [r2, #32]
 800510c:	4b6a      	ldr	r3, [pc, #424]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4a69      	ldr	r2, [pc, #420]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	e00b      	b.n	8005132 <HAL_RCC_OscConfig+0x36e>
 800511a:	4b67      	ldr	r3, [pc, #412]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4a66      	ldr	r2, [pc, #408]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	6213      	str	r3, [r2, #32]
 8005126:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800512c:	f023 0304 	bic.w	r3, r3, #4
 8005130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d015      	beq.n	8005166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513a:	f7fe fb1b 	bl	8003774 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005142:	f7fe fb17 	bl	8003774 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e0ab      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005158:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0ee      	beq.n	8005142 <HAL_RCC_OscConfig+0x37e>
 8005164:	e014      	b.n	8005190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005166:	f7fe fb05 	bl	8003774 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fe fb01 	bl	8003774 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e095      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005184:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ee      	bne.n	800516e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d105      	bne.n	80051a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005196:	4b48      	ldr	r3, [pc, #288]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	4a47      	ldr	r2, [pc, #284]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800519c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8081 	beq.w	80052ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ac:	4b42      	ldr	r3, [pc, #264]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d061      	beq.n	800527c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d146      	bne.n	800524e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c0:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <HAL_RCC_OscConfig+0x4fc>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c6:	f7fe fad5 	bl	8003774 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ce:	f7fe fad1 	bl	8003774 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e067      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e0:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f0      	bne.n	80051ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d108      	bne.n	8005208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	492d      	ldr	r1, [pc, #180]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005208:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a19      	ldr	r1, [r3, #32]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	430b      	orrs	r3, r1
 800521a:	4927      	ldr	r1, [pc, #156]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800521c:	4313      	orrs	r3, r2
 800521e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005220:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <HAL_RCC_OscConfig+0x4fc>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fe faa5 	bl	8003774 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522e:	f7fe faa1 	bl	8003774 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e037      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005240:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x46a>
 800524c:	e02f      	b.n	80052ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524e:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <HAL_RCC_OscConfig+0x4fc>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fe fa8e 	bl	8003774 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525c:	f7fe fa8a 	bl	8003774 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e020      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x498>
 800527a:	e018      	b.n	80052ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e013      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCC_OscConfig+0x4f4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	429a      	cmp	r2, r3
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42420060 	.word	0x42420060

080052c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0d0      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b6a      	ldr	r3, [pc, #424]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d910      	bls.n	8005308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b67      	ldr	r3, [pc, #412]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 0207 	bic.w	r2, r3, #7
 80052ee:	4965      	ldr	r1, [pc, #404]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0b8      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d020      	beq.n	8005356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005320:	4b59      	ldr	r3, [pc, #356]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4a58      	ldr	r2, [pc, #352]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800532a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005338:	4b53      	ldr	r3, [pc, #332]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4a52      	ldr	r2, [pc, #328]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 800533e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005344:	4b50      	ldr	r3, [pc, #320]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	494d      	ldr	r1, [pc, #308]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d040      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d115      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e07f      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b41      	ldr	r3, [pc, #260]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e073      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3d      	ldr	r3, [pc, #244]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06b      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4936      	ldr	r1, [pc, #216]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fe f9de 	bl	8003774 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fe f9da 	bl	8003774 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e053      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b27      	ldr	r3, [pc, #156]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d210      	bcs.n	8005414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 0207 	bic.w	r2, r3, #7
 80053fa:	4922      	ldr	r1, [pc, #136]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e032      	b.n	800547a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005420:	4b19      	ldr	r3, [pc, #100]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4916      	ldr	r1, [pc, #88]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	490e      	ldr	r1, [pc, #56]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005452:	f000 f821 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8005456:	4601      	mov	r1, r0
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	5cd3      	ldrb	r3, [r2, r3]
 8005466:	fa21 f303 	lsr.w	r3, r1, r3
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <HAL_RCC_ClockConfig+0x1cc>)
 800546c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <HAL_RCC_ClockConfig+0x1d0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe f93c 	bl	80036f0 <HAL_InitTick>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40022000 	.word	0x40022000
 8005488:	40021000 	.word	0x40021000
 800548c:	08006fd0 	.word	0x08006fd0
 8005490:	20000004 	.word	0x20000004
 8005494:	20000008 	.word	0x20000008

08005498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005498:	b490      	push	{r4, r7}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800549e:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80054a0:	1d3c      	adds	r4, r7, #4
 80054a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <HAL_RCC_GetSysClockFreq+0xb4>)
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	2300      	movs	r3, #0
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x40>
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x46>
 80054d6:	e02d      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d8:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054da:	623b      	str	r3, [r7, #32]
      break;
 80054dc:	e02d      	b.n	800553a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	0c9b      	lsrs	r3, r3, #18
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054ea:	4413      	add	r3, r2
 80054ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054fc:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	0c5b      	lsrs	r3, r3, #17
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800550a:	4413      	add	r3, r2
 800550c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005510:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4a0f      	ldr	r2, [pc, #60]	; (8005554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005516:	fb02 f203 	mul.w	r2, r2, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	e004      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	623b      	str	r3, [r7, #32]
      break;
 8005532:	e002      	b.n	800553a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005536:	623b      	str	r3, [r7, #32]
      break;
 8005538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553a:	6a3b      	ldr	r3, [r7, #32]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bc90      	pop	{r4, r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	08006cfc 	.word	0x08006cfc
 800554c:	08006d0c 	.word	0x08006d0c
 8005550:	40021000 	.word	0x40021000
 8005554:	007a1200 	.word	0x007a1200
 8005558:	003d0900 	.word	0x003d0900

0800555c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005560:	4b02      	ldr	r3, [pc, #8]	; (800556c <HAL_RCC_GetHCLKFreq+0x10>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr
 800556c:	20000004 	.word	0x20000004

08005570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005574:	f7ff fff2 	bl	800555c <HAL_RCC_GetHCLKFreq>
 8005578:	4601      	mov	r1, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4a03      	ldr	r2, [pc, #12]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40021000 	.word	0x40021000
 8005594:	08006fe0 	.word	0x08006fe0

08005598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800559c:	f7ff ffde 	bl	800555c <HAL_RCC_GetHCLKFreq>
 80055a0:	4601      	mov	r1, r0
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	0adb      	lsrs	r3, r3, #11
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4a03      	ldr	r2, [pc, #12]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	08006fe0 	.word	0x08006fe0

080055c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <RCC_Delay+0x34>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <RCC_Delay+0x38>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	0a5b      	lsrs	r3, r3, #9
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055dc:	bf00      	nop
  }
  while (Delay --);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e5a      	subs	r2, r3, #1
 80055e2:	60fa      	str	r2, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f9      	bne.n	80055dc <RCC_Delay+0x1c>
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000004 	.word	0x20000004
 80055f8:	10624dd3 	.word	0x10624dd3

080055fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e041      	b.n	8005692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fd fed4 	bl	80033d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f000 fc14 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e03a      	b.n	800572a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_TIM_Base_Start_IT+0x98>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x58>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x58>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <HAL_TIM_Base_Start_IT+0x9c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x58>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a13      	ldr	r2, [pc, #76]	; (800573c <HAL_TIM_Base_Start_IT+0xa0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d111      	bne.n	8005718 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b06      	cmp	r3, #6
 8005704:	d010      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005716:	e007      	b.n	8005728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800

08005740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e041      	b.n	80057d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fd fe58 	bl	800341c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 fb72 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_TIM_PWM_Start+0x24>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e022      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b04      	cmp	r3, #4
 8005808:	d109      	bne.n	800581e <HAL_TIM_PWM_Start+0x3e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	e015      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start+0x58>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e008      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e05e      	b.n	8005910 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_TIM_PWM_Start+0x82>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005860:	e013      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b04      	cmp	r3, #4
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0x92>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005870:	e00b      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0xa2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005880:	e003      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fd68 	bl	8006368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <HAL_TIM_PWM_Start+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a18      	ldr	r2, [pc, #96]	; (8005918 <HAL_TIM_PWM_Start+0x138>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_TIM_PWM_Start+0xfa>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d009      	beq.n	80058da <HAL_TIM_PWM_Start+0xfa>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a14      	ldr	r2, [pc, #80]	; (800591c <HAL_TIM_PWM_Start+0x13c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_TIM_PWM_Start+0xfa>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a12      	ldr	r2, [pc, #72]	; (8005920 <HAL_TIM_PWM_Start+0x140>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d111      	bne.n	80058fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d010      	beq.n	800590e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fc:	e007      	b.n	800590e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800

08005924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b02      	cmp	r3, #2
 8005938:	d122      	bne.n	8005980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b02      	cmp	r3, #2
 8005946:	d11b      	bne.n	8005980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0202 	mvn.w	r2, #2
 8005950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa62 	bl	8005e30 <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa55 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fa64 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b04      	cmp	r3, #4
 800598c:	d122      	bne.n	80059d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d11b      	bne.n	80059d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0204 	mvn.w	r2, #4
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa38 	bl	8005e30 <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa2b 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa3a 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d122      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d11b      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0208 	mvn.w	r2, #8
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2204      	movs	r2, #4
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa0e 	bl	8005e30 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa01 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa10 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d122      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d11b      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0210 	mvn.w	r2, #16
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2208      	movs	r2, #8
 8005a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9e4 	bl	8005e30 <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9d7 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f9e6 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0201 	mvn.w	r2, #1
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb fbee 	bl	8001284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b80      	cmp	r3, #128	; 0x80
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b80      	cmp	r3, #128	; 0x80
 8005ac2:	d107      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fcd5 	bl	800647e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d10e      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d107      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9aa 	bl	8005e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d10e      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d107      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0220 	mvn.w	r2, #32
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fca0 	bl	800646c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e0ac      	b.n	8005ca8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b0c      	cmp	r3, #12
 8005b5a:	f200 809f 	bhi.w	8005c9c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b99 	.word	0x08005b99
 8005b68:	08005c9d 	.word	0x08005c9d
 8005b6c:	08005c9d 	.word	0x08005c9d
 8005b70:	08005c9d 	.word	0x08005c9d
 8005b74:	08005bd9 	.word	0x08005bd9
 8005b78:	08005c9d 	.word	0x08005c9d
 8005b7c:	08005c9d 	.word	0x08005c9d
 8005b80:	08005c9d 	.word	0x08005c9d
 8005b84:	08005c1b 	.word	0x08005c1b
 8005b88:	08005c9d 	.word	0x08005c9d
 8005b8c:	08005c9d 	.word	0x08005c9d
 8005b90:	08005c9d 	.word	0x08005c9d
 8005b94:	08005c5b 	.word	0x08005c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f9c4 	bl	8005f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0208 	orr.w	r2, r2, #8
 8005bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6999      	ldr	r1, [r3, #24]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	619a      	str	r2, [r3, #24]
      break;
 8005bd6:	e062      	b.n	8005c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fa0a 	bl	8005ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6999      	ldr	r1, [r3, #24]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	021a      	lsls	r2, r3, #8
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	619a      	str	r2, [r3, #24]
      break;
 8005c18:	e041      	b.n	8005c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fa53 	bl	80060cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0208 	orr.w	r2, r2, #8
 8005c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0204 	bic.w	r2, r2, #4
 8005c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69d9      	ldr	r1, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	61da      	str	r2, [r3, #28]
      break;
 8005c58:	e021      	b.n	8005c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fa9d 	bl	80061a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69d9      	ldr	r1, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	61da      	str	r2, [r3, #28]
      break;
 8005c9a:	e000      	b.n	8005c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_ConfigClockSource+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e0a6      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x166>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d067      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0x120>
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d80b      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x6c>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d073      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x140>
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d802      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x62>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d06f      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d10:	e078      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d06c      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x140>
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d06a      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005d1a:	e073      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d1c:	2b70      	cmp	r3, #112	; 0x70
 8005d1e:	d00d      	beq.n	8005d3c <HAL_TIM_ConfigClockSource+0x8c>
 8005d20:	2b70      	cmp	r3, #112	; 0x70
 8005d22:	d804      	bhi.n	8005d2e <HAL_TIM_ConfigClockSource+0x7e>
 8005d24:	2b50      	cmp	r3, #80	; 0x50
 8005d26:	d033      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0xe0>
 8005d28:	2b60      	cmp	r3, #96	; 0x60
 8005d2a:	d041      	beq.n	8005db0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005d2c:	e06a      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d066      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x152>
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d38:	d017      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005d3a:	e063      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6899      	ldr	r1, [r3, #8]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f000 faed 	bl	800632a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]
      break;
 8005d68:	e04c      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6899      	ldr	r1, [r3, #8]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f000 fad6 	bl	800632a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d8c:	609a      	str	r2, [r3, #8]
      break;
 8005d8e:	e039      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f000 fa4d 	bl	800623c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2150      	movs	r1, #80	; 0x50
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 faa4 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005dae:	e029      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6859      	ldr	r1, [r3, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f000 fa6b 	bl	8006298 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2160      	movs	r1, #96	; 0x60
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fa94 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005dce:	e019      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6859      	ldr	r1, [r3, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f000 fa2d 	bl	800623c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2140      	movs	r1, #64	; 0x40
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fa84 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005dee:	e009      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 fa7b 	bl	80062f6 <TIM_ITRx_SetConfig>
        break;
 8005e00:	e000      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
	...

08005e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a29      	ldr	r2, [pc, #164]	; (8005f20 <TIM_Base_SetConfig+0xb8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_Base_SetConfig+0x30>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d007      	beq.n	8005e98 <TIM_Base_SetConfig+0x30>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <TIM_Base_SetConfig+0xbc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0x30>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <TIM_Base_SetConfig+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d108      	bne.n	8005eaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <TIM_Base_SetConfig+0xb8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <TIM_Base_SetConfig+0x62>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d007      	beq.n	8005eca <TIM_Base_SetConfig+0x62>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <TIM_Base_SetConfig+0xbc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_Base_SetConfig+0x62>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <TIM_Base_SetConfig+0xc0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d108      	bne.n	8005edc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <TIM_Base_SetConfig+0xb8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d103      	bne.n	8005f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	615a      	str	r2, [r3, #20]
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800

08005f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 0302 	bic.w	r3, r3, #2
 8005f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <TIM_OC1_SetConfig+0xc8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10c      	bne.n	8005fa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0308 	bic.w	r3, r3, #8
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <TIM_OC1_SetConfig+0xc8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00

08005ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f023 0210 	bic.w	r2, r3, #16
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0320 	bic.w	r3, r3, #32
 8006042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <TIM_OC2_SetConfig+0xd0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10d      	bne.n	8006074 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <TIM_OC2_SetConfig+0xd0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d113      	bne.n	80060a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00

080060cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <TIM_OC3_SetConfig+0xd0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10d      	bne.n	8006146 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <TIM_OC3_SetConfig+0xd0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d113      	bne.n	8006176 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00

080061a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	031b      	lsls	r3, r3, #12
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <TIM_OC4_SetConfig+0x98>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d109      	bne.n	8006214 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	019b      	lsls	r3, r3, #6
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	40012c00 	.word	0x40012c00

0800623c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 030a 	bic.w	r3, r3, #10
 8006278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f023 0210 	bic.w	r2, r3, #16
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	031b      	lsls	r3, r3, #12
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr

080062f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	f043 0307 	orr.w	r3, r3, #7
 8006318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006344:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	021a      	lsls	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	431a      	orrs	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4313      	orrs	r3, r2
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	609a      	str	r2, [r3, #8]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2201      	movs	r2, #1
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	43db      	mvns	r3, r3
 800638a:	401a      	ands	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1a      	ldr	r2, [r3, #32]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	fa01 f303 	lsl.w	r3, r1, r3
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e046      	b.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d009      	beq.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a10      	ldr	r2, [pc, #64]	; (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d10c      	bne.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	4313      	orrs	r3, r2
 800643a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800

0800646c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e03f      	b.n	8006522 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fd f848 	bl	800354c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	; 0x24
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fb4b 	bl	8006b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695a      	ldr	r2, [r3, #20]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_UART_IRQHandler+0x52>
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa51 	bl	8006a1e <UART_Receive_IT>
      return;
 800657c:	e17c      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80b1 	beq.w	80066e8 <HAL_UART_IRQHandler+0x1bc>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_UART_IRQHandler+0x70>
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80a6 	beq.w	80066e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_UART_IRQHandler+0x90>
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_UART_IRQHandler+0xb0>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	f043 0202 	orr.w	r2, r3, #2
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_UART_IRQHandler+0xd0>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	f043 0204 	orr.w	r2, r3, #4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00f      	beq.n	8006626 <HAL_UART_IRQHandler+0xfa>
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <HAL_UART_IRQHandler+0xee>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f043 0208 	orr.w	r2, r3, #8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 811f 	beq.w	800686e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <HAL_UART_IRQHandler+0x11e>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f9ea 	bl	8006a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	bf14      	ite	ne
 8006658:	2301      	movne	r3, #1
 800665a:	2300      	moveq	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <HAL_UART_IRQHandler+0x146>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d031      	beq.n	80066d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f92c 	bl	80068d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d023      	beq.n	80066ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695a      	ldr	r2, [r3, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d013      	beq.n	80066c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	4a77      	ldr	r2, [pc, #476]	; (8006880 <HAL_UART_IRQHandler+0x354>)
 80066a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fd f9b4 	bl	8003a18 <HAL_DMA_Abort_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e00e      	b.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8ee 	bl	80068a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	e00a      	b.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8ea 	bl	80068a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	e006      	b.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f8e6 	bl	80068a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066e2:	e0c4      	b.n	800686e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	bf00      	nop
    return;
 80066e6:	e0c2      	b.n	800686e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f040 80a1 	bne.w	8006834 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 809b 	beq.w	8006834 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8095 	beq.w	8006834 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d04e      	beq.n	80067cc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006738:	8a3b      	ldrh	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8099 	beq.w	8006872 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006744:	8a3a      	ldrh	r2, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	f080 8093 	bcs.w	8006872 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8a3a      	ldrh	r2, [r7, #16]
 8006750:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b20      	cmp	r3, #32
 800675a:	d02b      	beq.n	80067b4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800676a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800678a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0210 	bic.w	r2, r2, #16
 80067a8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fd f8f7 	bl	80039a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067bc:	b29b      	uxth	r3, r3
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f878 	bl	80068ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067ca:	e052      	b.n	8006872 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d048      	beq.n	8006876 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80067e4:	8a7b      	ldrh	r3, [r7, #18]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d045      	beq.n	8006876 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067f8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0210 	bic.w	r2, r2, #16
 8006826:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006828:	8a7b      	ldrh	r3, [r7, #18]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f844 	bl	80068ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006832:	e020      	b.n	8006876 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_UART_IRQHandler+0x324>
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f881 	bl	8006950 <UART_Transmit_IT>
    return;
 800684e:	e013      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <HAL_UART_IRQHandler+0x34c>
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f8c2 	bl	80069ee <UART_EndTransmit_IT>
    return;
 800686a:	bf00      	nop
 800686c:	e004      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
    return;
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
      return;
 8006872:	bf00      	nop
 8006874:	e000      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
      return;
 8006876:	bf00      	nop
  }
}
 8006878:	3728      	adds	r7, #40	; 0x28
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	08006929 	.word	0x08006929

08006884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d107      	bne.n	8006910 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0210 	bic.w	r2, r2, #16
 800690e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ffb0 	bl	80068a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b21      	cmp	r3, #33	; 0x21
 8006962:	d13e      	bne.n	80069e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696c:	d114      	bne.n	8006998 <UART_Transmit_IT+0x48>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d110      	bne.n	8006998 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800698a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	621a      	str	r2, [r3, #32]
 8006996:	e008      	b.n	80069aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	1c59      	adds	r1, r3, #1
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6211      	str	r1, [r2, #32]
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4619      	mov	r1, r3
 80069b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10f      	bne.n	80069de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
  }
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff ff38 	bl	8006884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b086      	sub	sp, #24
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b22      	cmp	r3, #34	; 0x22
 8006a30:	f040 8099 	bne.w	8006b66 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3c:	d117      	bne.n	8006a6e <UART_Receive_IT+0x50>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d113      	bne.n	8006a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	1c9a      	adds	r2, r3, #2
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a6c:	e026      	b.n	8006abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006a74:	2300      	movs	r3, #0
 8006a76:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d007      	beq.n	8006a92 <UART_Receive_IT+0x74>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <UART_Receive_IT+0x82>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e008      	b.n	8006ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d148      	bne.n	8006b62 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0220 	bic.w	r2, r2, #32
 8006ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d123      	bne.n	8006b58 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0210 	bic.w	r2, r2, #16
 8006b24:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d10a      	bne.n	8006b4a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff feb2 	bl	80068ba <HAL_UARTEx_RxEventCallback>
 8006b56:	e002      	b.n	8006b5e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fe9c 	bl	8006896 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e002      	b.n	8006b68 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e000      	b.n	8006b68 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b66:	2302      	movs	r3, #2
  }
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006baa:	f023 030c 	bic.w	r3, r3, #12
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a2c      	ldr	r2, [pc, #176]	; (8006c84 <UART_SetConfig+0x114>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d103      	bne.n	8006be0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bd8:	f7fe fcde 	bl	8005598 <HAL_RCC_GetPCLK2Freq>
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	e002      	b.n	8006be6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fe fcc6 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8006be4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009a      	lsls	r2, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <UART_SetConfig+0x118>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	0119      	lsls	r1, r3, #4
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009a      	lsls	r2, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <UART_SetConfig+0x118>)
 8006c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	2064      	movs	r0, #100	; 0x64
 8006c26:	fb00 f303 	mul.w	r3, r0, r3
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	3332      	adds	r3, #50	; 0x32
 8006c30:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <UART_SetConfig+0x118>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c3c:	4419      	add	r1, r3
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009a      	lsls	r2, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c54:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <UART_SetConfig+0x118>)
 8006c56:	fba3 0302 	umull	r0, r3, r3, r2
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	2064      	movs	r0, #100	; 0x64
 8006c5e:	fb00 f303 	mul.w	r3, r0, r3
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	3332      	adds	r3, #50	; 0x32
 8006c68:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <UART_SetConfig+0x118>)
 8006c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	440a      	add	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40013800 	.word	0x40013800
 8006c88:	51eb851f 	.word	0x51eb851f

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	2500      	movs	r5, #0
 8006c90:	4e0c      	ldr	r6, [pc, #48]	; (8006cc4 <__libc_init_array+0x38>)
 8006c92:	4c0d      	ldr	r4, [pc, #52]	; (8006cc8 <__libc_init_array+0x3c>)
 8006c94:	1ba4      	subs	r4, r4, r6
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	42a5      	cmp	r5, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	f000 f822 	bl	8006ce4 <_init>
 8006ca0:	2500      	movs	r5, #0
 8006ca2:	4e0a      	ldr	r6, [pc, #40]	; (8006ccc <__libc_init_array+0x40>)
 8006ca4:	4c0a      	ldr	r4, [pc, #40]	; (8006cd0 <__libc_init_array+0x44>)
 8006ca6:	1ba4      	subs	r4, r4, r6
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	42a5      	cmp	r5, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cb4:	4798      	blx	r3
 8006cb6:	3501      	adds	r5, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cbe:	4798      	blx	r3
 8006cc0:	3501      	adds	r5, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	08006fe8 	.word	0x08006fe8
 8006cc8:	08006fe8 	.word	0x08006fe8
 8006ccc:	08006fe8 	.word	0x08006fe8
 8006cd0:	08006fec 	.word	0x08006fec

08006cd4 <memset>:
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4402      	add	r2, r0
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d100      	bne.n	8006cde <memset+0xa>
 8006cdc:	4770      	bx	lr
 8006cde:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce2:	e7f9      	b.n	8006cd8 <memset+0x4>

08006ce4 <_init>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr

08006cf0 <_fini>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	bf00      	nop
 8006cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf6:	bc08      	pop	{r3}
 8006cf8:	469e      	mov	lr, r3
 8006cfa:	4770      	bx	lr
