
Self_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080088c0  080088c0  000188c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf8  08008bf8  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08008bf8  08008bf8  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bf8  08008bf8  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08008c00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000120  08008d20  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08008d20  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fb3  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276c  00000000  00000000  000340fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  00036868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  00037bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018da3  00000000  00000000  00038e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0c2  00000000  00000000  00051c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e309  00000000  00000000  0005fcc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edfce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c8  00000000  00000000  000ee04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000120 	.word	0x20000120
 800012c:	00000000 	.word	0x00000000
 8000130:	080088a8 	.word	0x080088a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000124 	.word	0x20000124
 800014c:	080088a8 	.word	0x080088a8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <SBR1_init>:
//static const float theta_NS_p[] = { -0.5000f, -0.3000f, 0.0000f };
//static const float theta_ZE_p[] = { -0.3000f, 0.0000f, 0.3000f };
//static const float theta_PS_p[] = { 0.0000f, 0.3000f, 0.5000f };
//static const float theta_PB_p[] = { 0.3000f, 0.5000f, 1.0000f, 3.0000f };

void SBR1_init( void ){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( SBR1_inputs, theta, -1.0000f, 1.0000f );
 80010b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ba:	4a8d      	ldr	r2, [pc, #564]	; (80012f0 <SBR1_init+0x240>)
 80010bc:	2100      	movs	r1, #0
 80010be:	488d      	ldr	r0, [pc, #564]	; (80012f4 <SBR1_init+0x244>)
 80010c0:	f001 fc90 	bl	80029e4 <qFIS_InputSetup>
    qFIS_InputSetup( SBR1_inputs, thetadot, -1.0000f, 1.0000f );
 80010c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010c8:	4a89      	ldr	r2, [pc, #548]	; (80012f0 <SBR1_init+0x240>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	4889      	ldr	r0, [pc, #548]	; (80012f4 <SBR1_init+0x244>)
 80010ce:	f001 fc89 	bl	80029e4 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( SBR1_outputs, u, -1.0000f, 1.0000f );
 80010d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d6:	4a86      	ldr	r2, [pc, #536]	; (80012f0 <SBR1_init+0x240>)
 80010d8:	2100      	movs	r1, #0
 80010da:	4887      	ldr	r0, [pc, #540]	; (80012f8 <SBR1_init+0x248>)
 80010dc:	f001 fcad 	bl	8002a3a <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, theta, theta_NB, trapmf, NULL, theta_NB_p, 1.0f );
 80010e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	4b85      	ldr	r3, [pc, #532]	; (80012fc <SBR1_init+0x24c>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2302      	movs	r3, #2
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	4882      	ldr	r0, [pc, #520]	; (8001300 <SBR1_init+0x250>)
 80010f6:	f001 fd49 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_NS, trapmf, NULL, theta_NS_p, 1.0f );
 80010fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	4b80      	ldr	r3, [pc, #512]	; (8001304 <SBR1_init+0x254>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2300      	movs	r3, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	2201      	movs	r2, #1
 800110c:	2100      	movs	r1, #0
 800110e:	487c      	ldr	r0, [pc, #496]	; (8001300 <SBR1_init+0x250>)
 8001110:	f001 fd3c 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_ZE, trimf, NULL, theta_ZE_p, 1.0f );
 8001114:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <SBR1_init+0x258>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	2100      	movs	r1, #0
 8001128:	4875      	ldr	r0, [pc, #468]	; (8001300 <SBR1_init+0x250>)
 800112a:	f001 fd2f 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PS, trapmf, NULL, theta_PS_p, 1.0f );
 800112e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	4b75      	ldr	r3, [pc, #468]	; (800130c <SBR1_init+0x25c>)
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2302      	movs	r3, #2
 800113e:	2203      	movs	r2, #3
 8001140:	2100      	movs	r1, #0
 8001142:	486f      	ldr	r0, [pc, #444]	; (8001300 <SBR1_init+0x250>)
 8001144:	f001 fd22 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PB, trapmf, NULL, theta_PB_p, 1.0f );
 8001148:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	4b70      	ldr	r3, [pc, #448]	; (8001310 <SBR1_init+0x260>)
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2302      	movs	r3, #2
 8001158:	2204      	movs	r2, #4
 800115a:	2100      	movs	r1, #0
 800115c:	4868      	ldr	r0, [pc, #416]	; (8001300 <SBR1_init+0x250>)
 800115e:	f001 fd15 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NB, trimf, NULL, thetadot_NB_p, 1.0f );
 8001162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <SBR1_init+0x264>)
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	2205      	movs	r2, #5
 8001174:	2101      	movs	r1, #1
 8001176:	4862      	ldr	r0, [pc, #392]	; (8001300 <SBR1_init+0x250>)
 8001178:	f001 fd08 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NS, trimf, NULL, thetadot_NS_p, 1.0f );
 800117c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	4b65      	ldr	r3, [pc, #404]	; (8001318 <SBR1_init+0x268>)
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2206      	movs	r2, #6
 800118e:	2101      	movs	r1, #1
 8001190:	485b      	ldr	r0, [pc, #364]	; (8001300 <SBR1_init+0x250>)
 8001192:	f001 fcfb 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_ZE, trimf, NULL, thetadot_ZE_p, 1.0f );
 8001196:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	4b5f      	ldr	r3, [pc, #380]	; (800131c <SBR1_init+0x26c>)
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2207      	movs	r2, #7
 80011a8:	2101      	movs	r1, #1
 80011aa:	4855      	ldr	r0, [pc, #340]	; (8001300 <SBR1_init+0x250>)
 80011ac:	f001 fcee 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PS, trimf, NULL, thetadot_PS_p, 1.0f );
 80011b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <SBR1_init+0x270>)
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2208      	movs	r2, #8
 80011c2:	2101      	movs	r1, #1
 80011c4:	484e      	ldr	r0, [pc, #312]	; (8001300 <SBR1_init+0x250>)
 80011c6:	f001 fce1 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PB, trimf, NULL, thetadot_PB_p, 1.0f );
 80011ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	4b54      	ldr	r3, [pc, #336]	; (8001324 <SBR1_init+0x274>)
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	2209      	movs	r2, #9
 80011dc:	2101      	movs	r1, #1
 80011de:	4848      	ldr	r0, [pc, #288]	; (8001300 <SBR1_init+0x250>)
 80011e0:	f001 fcd4 	bl	8002b8c <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 80011e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <SBR1_init+0x278>)
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2300      	movs	r3, #0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2313      	movs	r3, #19
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	484c      	ldr	r0, [pc, #304]	; (800132c <SBR1_init+0x27c>)
 80011fa:	f001 fcc7 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 80011fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <SBR1_init+0x280>)
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2313      	movs	r3, #19
 800120e:	2201      	movs	r2, #1
 8001210:	2100      	movs	r1, #0
 8001212:	4846      	ldr	r0, [pc, #280]	; (800132c <SBR1_init+0x27c>)
 8001214:	f001 fcba 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 8001218:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	4b45      	ldr	r3, [pc, #276]	; (8001334 <SBR1_init+0x284>)
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2313      	movs	r3, #19
 8001228:	2202      	movs	r2, #2
 800122a:	2100      	movs	r1, #0
 800122c:	483f      	ldr	r0, [pc, #252]	; (800132c <SBR1_init+0x27c>)
 800122e:	f001 fcad 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 8001232:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <SBR1_init+0x288>)
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	2300      	movs	r3, #0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2313      	movs	r3, #19
 8001242:	2203      	movs	r2, #3
 8001244:	2100      	movs	r1, #0
 8001246:	4839      	ldr	r0, [pc, #228]	; (800132c <SBR1_init+0x27c>)
 8001248:	f001 fca0 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 800124c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <SBR1_init+0x28c>)
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2313      	movs	r3, #19
 800125c:	2204      	movs	r2, #4
 800125e:	2100      	movs	r1, #0
 8001260:	4832      	ldr	r0, [pc, #200]	; (800132c <SBR1_init+0x27c>)
 8001262:	f001 fc93 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 8001266:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <SBR1_init+0x290>)
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2313      	movs	r3, #19
 8001276:	2205      	movs	r2, #5
 8001278:	2100      	movs	r1, #0
 800127a:	482c      	ldr	r0, [pc, #176]	; (800132c <SBR1_init+0x27c>)
 800127c:	f001 fc86 	bl	8002b8c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 8001280:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <SBR1_init+0x294>)
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2313      	movs	r3, #19
 8001290:	2206      	movs	r2, #6
 8001292:	2100      	movs	r1, #0
 8001294:	4825      	ldr	r0, [pc, #148]	; (800132c <SBR1_init+0x27c>)
 8001296:	f001 fc79 	bl	8002b8c <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &SBR1, Sugeno,
 800129a:	2319      	movs	r3, #25
 800129c:	9308      	str	r3, [sp, #32]
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <SBR1_init+0x298>)
 80012a0:	9307      	str	r3, [sp, #28]
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <SBR1_init+0x29c>)
 80012a4:	9306      	str	r3, [sp, #24]
 80012a6:	238c      	movs	r3, #140	; 0x8c
 80012a8:	9305      	str	r3, [sp, #20]
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <SBR1_init+0x27c>)
 80012ac:	9304      	str	r3, [sp, #16]
 80012ae:	23c8      	movs	r3, #200	; 0xc8
 80012b0:	9303      	str	r3, [sp, #12]
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <SBR1_init+0x250>)
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2334      	movs	r3, #52	; 0x34
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SBR1_init+0x248>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2318      	movs	r3, #24
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <SBR1_init+0x244>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	4822      	ldr	r0, [pc, #136]	; (8001350 <SBR1_init+0x2a0>)
 80012c6:	f001 fab5 	bl	8002834 <qFIS_Setup>
                SBR1_inputs, sizeof(SBR1_inputs),
                SBR1_outputs, sizeof(SBR1_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &SBR1, qFIS_AND, qFIS_PROD );
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	4820      	ldr	r0, [pc, #128]	; (8001350 <SBR1_init+0x2a0>)
 80012d0:	f001 fa3e 	bl	8002750 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Implication, qFIS_PROD );
 80012d4:	2201      	movs	r2, #1
 80012d6:	2100      	movs	r1, #0
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <SBR1_init+0x2a0>)
 80012da:	f001 fa39 	bl	8002750 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Aggregation, qFIS_SUM );
 80012de:	2204      	movs	r2, #4
 80012e0:	2101      	movs	r1, #1
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <SBR1_init+0x2a0>)
 80012e4:	f001 fa34 	bl	8002750 <qFIS_SetParameter>
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	bf800000 	.word	0xbf800000
 80012f4:	2000019c 	.word	0x2000019c
 80012f8:	200001b4 	.word	0x200001b4
 80012fc:	08008a68 	.word	0x08008a68
 8001300:	200001e8 	.word	0x200001e8
 8001304:	08008a78 	.word	0x08008a78
 8001308:	08008a88 	.word	0x08008a88
 800130c:	08008a94 	.word	0x08008a94
 8001310:	08008aa4 	.word	0x08008aa4
 8001314:	08008ab4 	.word	0x08008ab4
 8001318:	08008ac0 	.word	0x08008ac0
 800131c:	08008acc 	.word	0x08008acc
 8001320:	08008ad8 	.word	0x08008ad8
 8001324:	08008ae4 	.word	0x08008ae4
 8001328:	08008af0 	.word	0x08008af0
 800132c:	200002b0 	.word	0x200002b0
 8001330:	08008af4 	.word	0x08008af4
 8001334:	08008af8 	.word	0x08008af8
 8001338:	08008afc 	.word	0x08008afc
 800133c:	08008b00 	.word	0x08008b00
 8001340:	08008b04 	.word	0x08008b04
 8001344:	08008b08 	.word	0x08008b08
 8001348:	2000033c 	.word	0x2000033c
 800134c:	080088d4 	.word	0x080088d4
 8001350:	2000013c 	.word	0x2000013c

08001354 <SBR1_run>:

void SBR1_run( float *inputs, float *outputs ) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( SBR1_inputs, theta, inputs[ theta ] );
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	2100      	movs	r1, #0
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <SBR1_run+0x58>)
 8001368:	f001 fbd4 	bl	8002b14 <qFIS_SetInput>
    qFIS_SetInput( SBR1_inputs, thetadot, inputs[ thetadot ] );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	2101      	movs	r1, #1
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <SBR1_run+0x58>)
 8001378:	f001 fbcc 	bl	8002b14 <qFIS_SetInput>

    qFIS_Fuzzify( &SBR1 );
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <SBR1_run+0x5c>)
 800137e:	f001 fce2 	bl	8002d46 <qFIS_Fuzzify>
    if ( qFIS_Inference( &SBR1 ) > 0 ) {
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <SBR1_run+0x5c>)
 8001384:	f002 f90e 	bl	80035a4 <qFIS_Inference>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd02      	ble.n	8001394 <SBR1_run+0x40>
        qFIS_DeFuzzify( &SBR1 );
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <SBR1_run+0x5c>)
 8001390:	f001 ffc3 	bl	800331a <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( SBR1_outputs, u );
 8001394:	2100      	movs	r1, #0
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <SBR1_run+0x60>)
 8001398:	f001 fbdc 	bl	8002b54 <qFIS_GetOutput>
 800139c:	4602      	mov	r2, r0
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000019c 	.word	0x2000019c
 80013b0:	2000013c 	.word	0x2000013c
 80013b4:	200001b4 	.word	0x200001b4

080013b8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d102      	bne.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		u8_flag_10ms = 1;
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	}
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	200003a0 	.word	0x200003a0

080013e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
//
//		}
//		HAL_UART_Receive_IT(&huart1,&u8_rx_data,1);
	}

}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
	...

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f003 fb6d 	bl	8004adc <HAL_Init>

  /* USER CODE BEGIN Init */
	 SBR1_init();
 8001402:	f7ff fe55 	bl	80010b0 <SBR1_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f855 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f000 f9ff 	bl	800180c <MX_GPIO_Init>
  MX_I2C1_Init();
 800140e:	f000 f88d 	bl	800152c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001412:	f000 f8b9 	bl	8001588 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001416:	f000 f907 	bl	8001628 <MX_TIM3_Init>
  MX_TIM4_Init();
 800141a:	f000 f969 	bl	80016f0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800141e:	f000 f9cb 	bl	80017b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&u8_rx_data,1);
 8001422:	2201      	movs	r2, #1
 8001424:	491c      	ldr	r1, [pc, #112]	; (8001498 <main+0xa0>)
 8001426:	481d      	ldr	r0, [pc, #116]	; (800149c <main+0xa4>)
 8001428:	f006 fa8b 	bl	8007942 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800142c:	481c      	ldr	r0, [pc, #112]	; (80014a0 <main+0xa8>)
 800142e:	f005 fb41 	bl	8006ab4 <HAL_TIM_Base_Start_IT>
  Init_tim_pwm();
 8001432:	f000 fab9 	bl	80019a8 <Init_tim_pwm>

  while (MPU6050_Init(&hi2c1) == 1);
 8001436:	bf00      	nop
 8001438:	481a      	ldr	r0, [pc, #104]	; (80014a4 <main+0xac>)
 800143a:	f000 fbc7 	bl	8001bcc <MPU6050_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d0f9      	beq.n	8001438 <main+0x40>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (u8_flag_10ms)
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <main+0xb0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0fb      	beq.n	8001444 <main+0x4c>
	  {
		  u8_flag_10ms = 0;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <main+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
		  MPU6050_Read_All(&hi2c1,&t_MPU6050);
 8001452:	4916      	ldr	r1, [pc, #88]	; (80014ac <main+0xb4>)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <main+0xac>)
 8001456:	f000 fc13 	bl	8001c80 <MPU6050_Read_All>
		  Controller (t_MPU6050.KalmanAngleY, t_MPU6050.Gy* RAD_TO_DEG, &t_fuzzy);
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <main+0xb4>)
 800145c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <main+0xb4>)
 8001462:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001466:	a30a      	add	r3, pc, #40	; (adr r3, 8001490 <main+0x98>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f82c 	bl	80004c8 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4611      	mov	r1, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <main+0xb8>)
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	460a      	mov	r2, r1
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f000 fb0c 	bl	8001aa0 <Controller>
	  if (u8_flag_10ms)
 8001488:	e7dc      	b.n	8001444 <main+0x4c>
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	1a63c1f8 	.word	0x1a63c1f8
 8001494:	404ca5dc 	.word	0x404ca5dc
 8001498:	200003b0 	.word	0x200003b0
 800149c:	200004f0 	.word	0x200004f0
 80014a0:	20000540 	.word	0x20000540
 80014a4:	200003fc 	.word	0x200003fc
 80014a8:	200003a0 	.word	0x200003a0
 80014ac:	20000498 	.word	0x20000498
 80014b0:	20000000 	.word	0x20000000

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b090      	sub	sp, #64	; 0x40
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2228      	movs	r2, #40	; 0x28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fe78 	bl	80081b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014da:	2301      	movs	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014de:	2310      	movs	r3, #16
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 fe76 	bl	80061dc <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014f6:	f000 f9f5 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	230f      	movs	r3, #15
 80014fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f005 f8e2 	bl	80066dc <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800151e:	f000 f9e1 	bl	80018e4 <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3740      	adds	r7, #64	; 0x40
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C1_Init+0x50>)
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <MX_I2C1_Init+0x54>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_I2C1_Init+0x50>)
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_I2C1_Init+0x58>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_I2C1_Init+0x50>)
 800154a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_I2C1_Init+0x50>)
 800156a:	f003 fe49 	bl	8005200 <HAL_I2C_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001574:	f000 f9b6 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200003fc 	.word	0x200003fc
 8001580:	40005400 	.word	0x40005400
 8001584:	000186a0 	.word	0x000186a0

08001588 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_TIM1_Init+0x98>)
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <MX_TIM1_Init+0x9c>)
 80015a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_TIM1_Init+0x98>)
 80015ac:	f240 321f 	movw	r2, #799	; 0x31f
 80015b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_TIM1_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_TIM1_Init+0x98>)
 80015ba:	2263      	movs	r2, #99	; 0x63
 80015bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_TIM1_Init+0x98>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_TIM1_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_TIM1_Init+0x98>)
 80015d2:	f005 fa1f 	bl	8006a14 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015dc:	f000 f982 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_TIM1_Init+0x98>)
 80015ee:	f005 fd6b 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015f8:	f000 f974 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM1_Init+0x98>)
 800160a:	f006 f8dd 	bl	80077c8 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 f966 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000540 	.word	0x20000540
 8001624:	40012c00 	.word	0x40012c00

08001628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <MX_TIM3_Init+0xc0>)
 800164c:	4a27      	ldr	r2, [pc, #156]	; (80016ec <MX_TIM3_Init+0xc4>)
 800164e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <MX_TIM3_Init+0xc0>)
 8001652:	224f      	movs	r2, #79	; 0x4f
 8001654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <MX_TIM3_Init+0xc0>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_TIM3_Init+0xc0>)
 800165e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_TIM3_Init+0xc0>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_TIM3_Init+0xc0>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001670:	481d      	ldr	r0, [pc, #116]	; (80016e8 <MX_TIM3_Init+0xc0>)
 8001672:	f005 fa71 	bl	8006b58 <HAL_TIM_PWM_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800167c:	f000 f932 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4619      	mov	r1, r3
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <MX_TIM3_Init+0xc0>)
 8001690:	f006 f89a 	bl	80077c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800169a:	f000 f923 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169e:	2360      	movs	r3, #96	; 0x60
 80016a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <MX_TIM3_Init+0xc0>)
 80016b6:	f005 fc49 	bl	8006f4c <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016c0:	f000 f910 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2204      	movs	r2, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM3_Init+0xc0>)
 80016cc:	f005 fc3e 	bl	8006f4c <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016d6:	f000 f905 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM3_Init+0xc0>)
 80016dc:	f003 f8dc 	bl	8004898 <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000450 	.word	0x20000450
 80016ec:	40000400 	.word	0x40000400

080016f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <MX_TIM4_Init+0xc0>)
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <MX_TIM4_Init+0xc4>)
 8001716:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <MX_TIM4_Init+0xc0>)
 800171a:	224f      	movs	r2, #79	; 0x4f
 800171c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <MX_TIM4_Init+0xc0>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_TIM4_Init+0xc0>)
 8001726:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800172a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_TIM4_Init+0xc0>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_TIM4_Init+0xc0>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001738:	481d      	ldr	r0, [pc, #116]	; (80017b0 <MX_TIM4_Init+0xc0>)
 800173a:	f005 fa0d 	bl	8006b58 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001744:	f000 f8ce 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	4816      	ldr	r0, [pc, #88]	; (80017b0 <MX_TIM4_Init+0xc0>)
 8001758:	f006 f836 	bl	80077c8 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001762:	f000 f8bf 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	; 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_TIM4_Init+0xc0>)
 800177e:	f005 fbe5 	bl	8006f4c <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001788:	f000 f8ac 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2204      	movs	r2, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM4_Init+0xc0>)
 8001794:	f005 fbda 	bl	8006f4c <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800179e:	f000 f8a1 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017a2:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM4_Init+0xc0>)
 80017a4:	f003 f878 	bl	8004898 <HAL_TIM_MspPostInit>

}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200003b4 	.word	0x200003b4
 80017b4:	40000800 	.word	0x40000800

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART1_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f006 f85a 	bl	80078a8 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 f873 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200004f0 	.word	0x200004f0
 8001808:	40013800 	.word	0x40013800

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <MX_GPIO_Init+0xcc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a2c      	ldr	r2, [pc, #176]	; (80018d8 <MX_GPIO_Init+0xcc>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <MX_GPIO_Init+0xcc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <MX_GPIO_Init+0xcc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <MX_GPIO_Init+0xcc>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <MX_GPIO_Init+0xcc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_GPIO_Init+0xcc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <MX_GPIO_Init+0xcc>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <MX_GPIO_Init+0xcc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <MX_GPIO_Init+0xcc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <MX_GPIO_Init+0xcc>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_GPIO_Init+0xcc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001886:	4815      	ldr	r0, [pc, #84]	; (80018dc <MX_GPIO_Init+0xd0>)
 8001888:	f003 fca2 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2128      	movs	r1, #40	; 0x28
 8001890:	4813      	ldr	r0, [pc, #76]	; (80018e0 <MX_GPIO_Init+0xd4>)
 8001892:	f003 fc9d 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <MX_GPIO_Init+0xd0>)
 80018b0:	f003 fb34 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018b4:	2328      	movs	r3, #40	; 0x28
 80018b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_GPIO_Init+0xd4>)
 80018cc:	f003 fb26 	bl	8004f1c <HAL_GPIO_Init>

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40010800 	.word	0x40010800

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ea:	e7fe      	b.n	80018ea <Error_Handler+0x6>

080018ec <Limit_val>:
 *      Author: Hien Nguyen
 */

#include "motor.h"

static void Limit_val(float *value){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	if(*value> VAL_MAX)  *value = VAL_MAX;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fbad 	bl	800105c <__aeabi_fcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <Limit_val+0x24>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800190e:	601a      	str	r2, [r3, #0]
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <Limit_val+0x48>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fb82 	bl	8001020 <__aeabi_fcmplt>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <Limit_val+0x38>
}
 8001922:	e002      	b.n	800192a <Limit_val+0x3e>
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a03      	ldr	r2, [pc, #12]	; (8001934 <Limit_val+0x48>)
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	bf800000 	.word	0xbf800000

08001938 <Set_duty>:

static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d111      	bne.n	800196e <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 800194a:	4915      	ldr	r1, [pc, #84]	; (80019a0 <Set_duty+0x68>)
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff f9c9 	bl	8000ce4 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	4913      	ldr	r1, [pc, #76]	; (80019a4 <Set_duty+0x6c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8bc 	bl	8000ad4 <__addsf3>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	4610      	mov	r0, r2
 8001966:	f7ff fb83 	bl	8001070 <__aeabi_f2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d111      	bne.n	8001998 <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 8001974:	490a      	ldr	r1, [pc, #40]	; (80019a0 <Set_duty+0x68>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f7ff f9b4 	bl	8000ce4 <__aeabi_fmul>
 800197c:	4603      	mov	r3, r0
 800197e:	4909      	ldr	r1, [pc, #36]	; (80019a4 <Set_duty+0x6c>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8a7 	bl	8000ad4 <__addsf3>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	681c      	ldr	r4, [r3, #0]
 800198e:	4610      	mov	r0, r2
 8001990:	f7ff fb6e 	bl	8001070 <__aeabi_f2uiz>
 8001994:	4603      	mov	r3, r0
 8001996:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	44ed6000 	.word	0x44ed6000
 80019a4:	42c80000 	.word	0x42c80000

080019a8 <Init_tim_pwm>:

void Init_tim_pwm(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019ac:	2100      	movs	r1, #0
 80019ae:	4808      	ldr	r0, [pc, #32]	; (80019d0 <Init_tim_pwm+0x28>)
 80019b0:	f005 f922 	bl	8006bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019b4:	2104      	movs	r1, #4
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <Init_tim_pwm+0x28>)
 80019b8:	f005 f91e 	bl	8006bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019bc:	2100      	movs	r1, #0
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <Init_tim_pwm+0x2c>)
 80019c0:	f005 f91a 	bl	8006bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019c4:	2104      	movs	r1, #4
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <Init_tim_pwm+0x2c>)
 80019c8:	f005 f916 	bl	8006bf8 <HAL_TIM_PWM_Start>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000450 	.word	0x20000450
 80019d4:	200003b4 	.word	0x200003b4

080019d8 <Stop_motor>:

static void Stop_motor(){
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	Set_duty(0, &htim3, 1);
 80019dc:	2201      	movs	r2, #1
 80019de:	490c      	ldr	r1, [pc, #48]	; (8001a10 <Stop_motor+0x38>)
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f7ff ffa8 	bl	8001938 <Set_duty>
	Set_duty(0, &htim3, 2);
 80019e8:	2202      	movs	r2, #2
 80019ea:	4909      	ldr	r1, [pc, #36]	; (8001a10 <Stop_motor+0x38>)
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f7ff ffa2 	bl	8001938 <Set_duty>
	Set_duty(0, &htim4, 1);
 80019f4:	2201      	movs	r2, #1
 80019f6:	4907      	ldr	r1, [pc, #28]	; (8001a14 <Stop_motor+0x3c>)
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f7ff ff9c 	bl	8001938 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001a00:	2202      	movs	r2, #2
 8001a02:	4904      	ldr	r1, [pc, #16]	; (8001a14 <Stop_motor+0x3c>)
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f7ff ff96 	bl	8001938 <Set_duty>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000450 	.word	0x20000450
 8001a14:	200003b4 	.word	0x200003b4

08001a18 <Forward>:

void Forward (float duty){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	Set_duty(0, &htim3, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	490c      	ldr	r1, [pc, #48]	; (8001a54 <Forward+0x3c>)
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f7ff ff86 	bl	8001938 <Set_duty>
	Set_duty(duty, &htim3, 2);
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4909      	ldr	r1, [pc, #36]	; (8001a54 <Forward+0x3c>)
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff81 	bl	8001938 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <Forward+0x40>)
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f7ff ff7b 	bl	8001938 <Set_duty>
	Set_duty(duty, &htim4, 2);
 8001a42:	2202      	movs	r2, #2
 8001a44:	4904      	ldr	r1, [pc, #16]	; (8001a58 <Forward+0x40>)
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff76 	bl	8001938 <Set_duty>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000450 	.word	0x20000450
 8001a58:	200003b4 	.word	0x200003b4

08001a5c <Reverse>:

void Reverse (float duty){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <Reverse+0x3c>)
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff65 	bl	8001938 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4909      	ldr	r1, [pc, #36]	; (8001a98 <Reverse+0x3c>)
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f7ff ff5f 	bl	8001938 <Set_duty>
	Set_duty(duty, &htim4, 1);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <Reverse+0x40>)
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff5a 	bl	8001938 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001a84:	2202      	movs	r2, #2
 8001a86:	4905      	ldr	r1, [pc, #20]	; (8001a9c <Reverse+0x40>)
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f7ff ff54 	bl	8001938 <Set_duty>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000450 	.word	0x20000450
 8001a9c:	200003b4 	.word	0x200003b4

08001aa0 <Controller>:

void Controller (double new_angle, double vec_angle, Fuzzy_t *fuzzy){
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001aaa:	e9c7 2300 	strd	r2, r3, [r7]
	if((new_angle>ANGLE_THRESHOLD)|(new_angle<(-1)*ANGLE_THRESHOLD)){
 8001aae:	2301      	movs	r3, #1
 8001ab0:	461c      	mov	r4, r3
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <Controller+0x124>)
 8001ab8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001abc:	f7fe ff94 	bl	80009e8 <__aeabi_dcmpgt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <Controller+0x2a>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	461c      	mov	r4, r3
 8001aca:	b2e4      	uxtb	r4, r4
 8001acc:	2301      	movs	r3, #1
 8001ace:	461d      	mov	r5, r3
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <Controller+0x128>)
 8001ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ada:	f7fe ff67 	bl	80009ac <__aeabi_dcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <Controller+0x48>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	461d      	mov	r5, r3
 8001ae8:	b2eb      	uxtb	r3, r5
 8001aea:	4323      	orrs	r3, r4
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <Controller+0x58>
			Stop_motor();
 8001af2:	f7ff ff71 	bl	80019d8 <Stop_motor>
			return;
 8001af6:	e062      	b.n	8001bbe <Controller+0x11e>
		}

	fuzzy->f_inp_fuzzy[0] = (new_angle- OFFSET)/fuzzy->f_K_theta;
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b04:	f7fe fb2a 	bl	800015c <__adddf3>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fc7f 	bl	8000418 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fdfb 	bl	800071c <__aeabi_ddiv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	f7fe ff7b 	bl	8000a28 <__aeabi_d2f>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	601a      	str	r2, [r3, #0]
	Limit_val(&fuzzy->f_inp_fuzzy[0]);
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fed6 	bl	80018ec <Limit_val>
	fuzzy->f_inp_fuzzy[1] = vec_angle/fuzzy->f_K_theta_dot;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc67 	bl	8000418 <__aeabi_f2d>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4623      	mov	r3, r4
 8001b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b56:	f7fe fde1 	bl	800071c <__aeabi_ddiv>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	f7fe ff61 	bl	8000a28 <__aeabi_d2f>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	605a      	str	r2, [r3, #4]
	Limit_val(&fuzzy->f_inp_fuzzy[1]);
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff febb 	bl	80018ec <Limit_val>
	SBR1_run(&fuzzy->f_inp_fuzzy, &fuzzy->f_out_fuzzy);
 8001b76:	6a3a      	ldr	r2, [r7, #32]
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f7ff fbe8 	bl	8001354 <SBR1_run>
	Limit_val(&fuzzy->f_out_fuzzy);
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	3308      	adds	r3, #8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff feaf 	bl	80018ec <Limit_val>

	if (fuzzy->f_out_fuzzy > 0){
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fa60 	bl	800105c <__aeabi_fcmpgt>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <Controller+0x10e>
		Reverse (fuzzy->f_out_fuzzy);
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff58 	bl	8001a5c <Reverse>
		return;
 8001bac:	e007      	b.n	8001bbe <Controller+0x11e>
	} else {
		Forward ((-1)*fuzzy->f_out_fuzzy);
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff2e 	bl	8001a18 <Forward>
		return;
 8001bbc:	bf00      	nop
//		Stop_motor();
//		return;
//	}


}
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	404e0000 	.word	0x404e0000
 8001bc8:	c04e0000 	.word	0xc04e0000

08001bcc <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af04      	add	r7, sp, #16
 8001bd2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001bd4:	2364      	movs	r3, #100	; 0x64
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f107 030f 	add.w	r3, r7, #15
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	2275      	movs	r2, #117	; 0x75
 8001be6:	21d0      	movs	r1, #208	; 0xd0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f003 fd3b 	bl	8005664 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b68      	cmp	r3, #104	; 0x68
 8001bf2:	d13d      	bne.n	8001c70 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001bf8:	2364      	movs	r3, #100	; 0x64
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	f107 030e 	add.w	r3, r7, #14
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2301      	movs	r3, #1
 8001c08:	226b      	movs	r2, #107	; 0x6b
 8001c0a:	21d0      	movs	r1, #208	; 0xd0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f003 fc2f 	bl	8005470 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001c12:	2307      	movs	r3, #7
 8001c14:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001c16:	2364      	movs	r3, #100	; 0x64
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f107 030e 	add.w	r3, r7, #14
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	2219      	movs	r2, #25
 8001c28:	21d0      	movs	r1, #208	; 0xd0
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f003 fc20 	bl	8005470 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001c34:	2364      	movs	r3, #100	; 0x64
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	f107 030e 	add.w	r3, r7, #14
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	221c      	movs	r2, #28
 8001c46:	21d0      	movs	r1, #208	; 0xd0
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f003 fc11 	bl	8005470 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2301      	movs	r3, #1
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	f107 030e 	add.w	r3, r7, #14
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	221b      	movs	r2, #27
 8001c64:	21d0      	movs	r1, #208	; 0xd0
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f003 fc02 	bl	8005470 <HAL_I2C_Mem_Write>
        return 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <MPU6050_Init+0xa6>
    }
    return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	0000      	movs	r0, r0
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c84:	b094      	sub	sp, #80	; 0x50
 8001c86:	af04      	add	r7, sp, #16
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	230e      	movs	r3, #14
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	223b      	movs	r2, #59	; 0x3b
 8001c9e:	21d0      	movs	r1, #208	; 0xd0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f003 fcdf 	bl	8005664 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001ca6:	7a3b      	ldrb	r3, [r7, #8]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	7a7b      	ldrb	r3, [r7, #9]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001cb8:	7abb      	ldrb	r3, [r7, #10]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001cca:	7b3b      	ldrb	r3, [r7, #12]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	7b7b      	ldrb	r3, [r7, #13]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001cea:	7c3b      	ldrb	r3, [r7, #16]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	7c7b      	ldrb	r3, [r7, #17]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001cfc:	7cbb      	ldrb	r3, [r7, #18]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001d0e:	7d3b      	ldrb	r3, [r7, #20]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7d7b      	ldrb	r3, [r7, #21]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fb64 	bl	80003f4 <__aeabi_i2d>
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4bb7      	ldr	r3, [pc, #732]	; (8002010 <MPU6050_Read_All+0x390>)
 8001d32:	f7fe fcf3 	bl	800071c <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb54 	bl	80003f4 <__aeabi_i2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4baf      	ldr	r3, [pc, #700]	; (8002010 <MPU6050_Read_All+0x390>)
 8001d52:	f7fe fce3 	bl	800071c <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	6839      	ldr	r1, [r7, #0]
 8001d5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb44 	bl	80003f4 <__aeabi_i2d>
 8001d6c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001ff8 <MPU6050_Read_All+0x378>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fcd3 	bl	800071c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001d80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ff59 	bl	8000c3c <__aeabi_i2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	49a1      	ldr	r1, [pc, #644]	; (8002014 <MPU6050_Read_All+0x394>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f85c 	bl	8000e4c <__aeabi_fdiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	49a0      	ldr	r1, [pc, #640]	; (8002018 <MPU6050_Read_All+0x398>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fe9b 	bl	8000ad4 <__addsf3>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fb21 	bl	80003f4 <__aeabi_i2d>
 8001db2:	a393      	add	r3, pc, #588	; (adr r3, 8002000 <MPU6050_Read_All+0x380>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fcb0 	bl	800071c <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	6839      	ldr	r1, [r7, #0]
 8001dc2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb11 	bl	80003f4 <__aeabi_i2d>
 8001dd2:	a38b      	add	r3, pc, #556	; (adr r3, 8002000 <MPU6050_Read_All+0x380>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fca0 	bl	800071c <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	6839      	ldr	r1, [r7, #0]
 8001de2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb01 	bl	80003f4 <__aeabi_i2d>
 8001df2:	a383      	add	r3, pc, #524	; (adr r3, 8002000 <MPU6050_Read_All+0x380>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fc90 	bl	800071c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001e06:	f002 fec1 	bl	8004b8c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b83      	ldr	r3, [pc, #524]	; (800201c <MPU6050_Read_All+0x39c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fade 	bl	80003d4 <__aeabi_ui2d>
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b80      	ldr	r3, [pc, #512]	; (8002020 <MPU6050_Read_All+0x3a0>)
 8001e1e:	f7fe fc7d 	bl	800071c <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001e2a:	f002 feaf 	bl	8004b8c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b7a      	ldr	r3, [pc, #488]	; (800201c <MPU6050_Read_All+0x39c>)
 8001e32:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e54:	fb03 f301 	mul.w	r3, r3, r1
 8001e58:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe faca 	bl	80003f4 <__aeabi_i2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f006 fb3e 	bl	80084e8 <sqrt>
 8001e6c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e7c:	f7fe fd8c 	bl	8000998 <__aeabi_dcmpeq>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fab1 	bl	80003f4 <__aeabi_i2d>
 8001e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e96:	f7fe fc41 	bl	800071c <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f006 f991 	bl	80081c8 <atan>
 8001ea6:	a358      	add	r3, pc, #352	; (adr r3, 8002008 <MPU6050_Read_All+0x388>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fb0c 	bl	80004c8 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001eb8:	e005      	b.n	8001ec6 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ecc:	425b      	negs	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fa90 	bl	80003f4 <__aeabi_i2d>
 8001ed4:	4682      	mov	sl, r0
 8001ed6:	468b      	mov	fp, r1
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fa88 	bl	80003f4 <__aeabi_i2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4650      	mov	r0, sl
 8001eea:	4659      	mov	r1, fp
 8001eec:	f006 fafa 	bl	80084e4 <atan2>
 8001ef0:	a345      	add	r3, pc, #276	; (adr r3, 8002008 <MPU6050_Read_All+0x388>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fae7 	bl	80004c8 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <MPU6050_Read_All+0x3a4>)
 8001f08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0c:	f7fe fd4e 	bl	80009ac <__aeabi_dcmplt>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <MPU6050_Read_All+0x2ac>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <MPU6050_Read_All+0x3a8>)
 8001f22:	f7fe fd61 	bl	80009e8 <__aeabi_dcmpgt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d114      	bne.n	8001f56 <MPU6050_Read_All+0x2d6>
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <MPU6050_Read_All+0x3a8>)
 8001f32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f36:	f7fe fd57 	bl	80009e8 <__aeabi_dcmpgt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d015      	beq.n	8001f6c <MPU6050_Read_All+0x2ec>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <MPU6050_Read_All+0x3a4>)
 8001f4c:	f7fe fd2e 	bl	80009ac <__aeabi_dcmplt>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 8001f56:	4935      	ldr	r1, [pc, #212]	; (800202c <MPU6050_Read_All+0x3ac>)
 8001f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f66:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001f6a:	e012      	b.n	8001f92 <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f82:	482a      	ldr	r0, [pc, #168]	; (800202c <MPU6050_Read_All+0x3ac>)
 8001f84:	f000 f856 	bl	8002034 <Kalman_getAngle>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001f98:	4690      	mov	r8, r2
 8001f9a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <MPU6050_Read_All+0x3a8>)
 8001fa4:	4640      	mov	r0, r8
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	f7fe fd1e 	bl	80009e8 <__aeabi_dcmpgt>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001fb8:	4614      	mov	r4, r2
 8001fba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001fca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001fce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001fd2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001fd6:	e9cd 3400 	strd	r3, r4, [sp]
 8001fda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fde:	4814      	ldr	r0, [pc, #80]	; (8002030 <MPU6050_Read_All+0x3b0>)
 8001fe0:	f000 f828 	bl	8002034 <Kalman_getAngle>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
}
 8001fee:	bf00      	nop
 8001ff0:	3740      	adds	r7, #64	; 0x40
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	40cc2900 	.word	0x40cc2900
 8002000:	00000000 	.word	0x00000000
 8002004:	40606000 	.word	0x40606000
 8002008:	1a63c1f8 	.word	0x1a63c1f8
 800200c:	404ca5dc 	.word	0x404ca5dc
 8002010:	40d00000 	.word	0x40d00000
 8002014:	43aa0000 	.word	0x43aa0000
 8002018:	42121eb8 	.word	0x42121eb8
 800201c:	20000588 	.word	0x20000588
 8002020:	408f4000 	.word	0x408f4000
 8002024:	c0568000 	.word	0xc0568000
 8002028:	40568000 	.word	0x40568000
 800202c:	20000060 	.word	0x20000060
 8002030:	20000018 	.word	0x20000018

08002034 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b092      	sub	sp, #72	; 0x48
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f103 0420 	add.w	r4, r3, #32
 8002046:	e9d4 3400 	ldrd	r3, r4, [r4]
 800204a:	461a      	mov	r2, r3
 800204c:	4623      	mov	r3, r4
 800204e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002052:	f7fe f881 	bl	8000158 <__aeabi_dsub>
 8002056:	4603      	mov	r3, r0
 8002058:	460c      	mov	r4, r1
 800205a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002068:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800206c:	f7fe fa2c 	bl	80004c8 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe f870 	bl	800015c <__adddf3>
 800207c:	4603      	mov	r3, r0
 800207e:	460c      	mov	r4, r1
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002092:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002096:	f7fe fa17 	bl	80004c8 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020a8:	f7fe f856 	bl	8000158 <__aeabi_dsub>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80020ba:	f7fe f84d 	bl	8000158 <__aeabi_dsub>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe f846 	bl	800015c <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020dc:	f7fe f9f4 	bl	80004c8 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe f838 	bl	800015c <__adddf3>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002102:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002106:	f7fe f9df 	bl	80004c8 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe f821 	bl	8000158 <__aeabi_dsub>
 8002116:	4603      	mov	r3, r0
 8002118:	460c      	mov	r4, r1
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800212c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002130:	f7fe f9ca 	bl	80004c8 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe f80c 	bl	8000158 <__aeabi_dsub>
 8002140:	4603      	mov	r3, r0
 8002142:	460c      	mov	r4, r1
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002156:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800215a:	f7fe f9b5 	bl	80004c8 <__aeabi_dmul>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fd fff9 	bl	800015c <__adddf3>
 800216a:	4603      	mov	r3, r0
 800216c:	460c      	mov	r4, r1
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f103 0410 	add.w	r4, r3, #16
 8002180:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002184:	461a      	mov	r2, r3
 8002186:	4623      	mov	r3, r4
 8002188:	f7fd ffe8 	bl	800015c <__adddf3>
 800218c:	4603      	mov	r3, r0
 800218e:	460c      	mov	r4, r1
 8002190:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800219a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800219e:	f7fe fabd 	bl	800071c <__aeabi_ddiv>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80021b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021b4:	f7fe fab2 	bl	800071c <__aeabi_ddiv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f103 0418 	add.w	r4, r3, #24
 80021c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4623      	mov	r3, r4
 80021ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021d2:	f7fd ffc1 	bl	8000158 <__aeabi_dsub>
 80021d6:	4603      	mov	r3, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80021e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021ec:	f7fe f96c 	bl	80004c8 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fd ffb0 	bl	800015c <__adddf3>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800220c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002210:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002214:	f7fe f958 	bl	80004c8 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4620      	mov	r0, r4
 800221e:	4629      	mov	r1, r5
 8002220:	f7fd ff9c 	bl	800015c <__adddf3>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002234:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002238:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002242:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002246:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002258:	f7fe f936 	bl	80004c8 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fd ff78 	bl	8000158 <__aeabi_dsub>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002278:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800227c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002280:	f7fe f922 	bl	80004c8 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fd ff64 	bl	8000158 <__aeabi_dsub>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80022a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022a8:	f7fe f90e 	bl	80004c8 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fd ff50 	bl	8000158 <__aeabi_dsub>
 80022b8:	4603      	mov	r3, r0
 80022ba:	460c      	mov	r4, r1
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80022c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022d0:	f7fe f8fa 	bl	80004c8 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fd ff3c 	bl	8000158 <__aeabi_dsub>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f103 0418 	add.w	r4, r3, #24
 80022f0:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 80022f4:	4618      	mov	r0, r3
 80022f6:	4621      	mov	r1, r4
 80022f8:	3748      	adds	r7, #72	; 0x48
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002300 <_qFFMath_GetAbnormal>:
#define cast_reinterpret( dst, src, dst_type )                              \
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <_qFFMath_GetAbnormal+0x34>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <_qFFMath_GetAbnormal+0x22>
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <_qFFMath_GetAbnormal+0x38>)
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <_qFFMath_GetAbnormal+0x3c>)
 8002314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002318:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <_qFFMath_GetAbnormal+0x34>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_qFFMath_GetAbnormal+0x38>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	200000a8 	.word	0x200000a8
 8002338:	200003a4 	.word	0x200003a4
 800233c:	08008b0c 	.word	0x08008b0c

08002340 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
    int retVal;

    cast_reinterpret( u, f, uint32_t );
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002356:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e016      	b.n	8002392 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236a:	d202      	bcs.n	8002372 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 800236c:	2301      	movs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e00f      	b.n	8002392 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002378:	d202      	bcs.n	8002380 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 800237a:	2302      	movs	r3, #2
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e008      	b.n	8002392 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002386:	d102      	bne.n	800238e <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 8002388:	2303      	movs	r3, #3
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e001      	b.n	8002392 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 800238e:	2304      	movs	r3, #4
 8002390:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffca 	bl	8002340 <qFFMath_FPClassify>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7fe fe27 	bl	8001020 <__aeabi_fcmplt>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <qFFMath_Abs+0x20>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023de:	e000      	b.n	80023e2 <qFFMath_Abs+0x22>
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fe11 	bl	8001020 <__aeabi_fcmplt>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8002404:	2001      	movs	r0, #1
 8002406:	f7ff ff7b 	bl	8002300 <_qFFMath_GetAbnormal>
 800240a:	6178      	str	r0, [r7, #20]
 800240c:	e02f      	b.n	800246e <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff95 	bl	8002340 <qFFMath_FPClassify>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e024      	b.n	800246e <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800243e:	613b      	str	r3, [r7, #16]
        cast_reinterpret( z, y, float );
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fcfe 	bl	8000e4c <__aeabi_fdiv>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7fe fb3b 	bl	8000ad4 <__addsf3>
 800245e:	4603      	mov	r3, r0
 8002460:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fc3d 	bl	8000ce4 <__aeabi_fmul>
 800246a:	4603      	mov	r3, r0
 800246c:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800246e:	697b      	ldr	r3, [r7, #20]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    float y;
    x *= -0.318309886f;
 8002480:	491e      	ldr	r1, [pc, #120]	; (80024fc <qFFMath_Sin+0x84>)
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fc2e 	bl	8000ce4 <__aeabi_fmul>
 8002488:	4603      	mov	r3, r0
 800248a:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 800248c:	491c      	ldr	r1, [pc, #112]	; (8002500 <qFFMath_Sin+0x88>)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fb20 	bl	8000ad4 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 8002498:	4919      	ldr	r1, [pc, #100]	; (8002500 <qFFMath_Sin+0x88>)
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7fe fb18 	bl	8000ad0 <__aeabi_fsub>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe fb13 	bl	8000ad0 <__aeabi_fsub>
 80024aa:	4603      	mov	r3, r0
 80024ac:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff86 	bl	80023c0 <qFFMath_Abs>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fb08 	bl	8000ad0 <__aeabi_fsub>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fe fc0d 	bl	8000ce4 <__aeabi_fmul>
 80024ca:	4603      	mov	r3, r0
 80024cc:	607b      	str	r3, [r7, #4]
    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff76 	bl	80023c0 <qFFMath_Abs>
 80024d4:	4603      	mov	r3, r0
 80024d6:	490b      	ldr	r1, [pc, #44]	; (8002504 <qFFMath_Sin+0x8c>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fc03 	bl	8000ce4 <__aeabi_fmul>
 80024de:	4603      	mov	r3, r0
 80024e0:	4909      	ldr	r1, [pc, #36]	; (8002508 <qFFMath_Sin+0x90>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe faf6 	bl	8000ad4 <__addsf3>
 80024e8:	4603      	mov	r3, r0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fbf9 	bl	8000ce4 <__aeabi_fmul>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	bea2f983 	.word	0xbea2f983
 8002500:	4bc00000 	.word	0x4bc00000
 8002504:	40656265 	.word	0x40656265
 8002508:	4046a767 	.word	0x4046a767

0800250c <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + 1.570796327f );
 8002514:	4906      	ldr	r1, [pc, #24]	; (8002530 <qFFMath_Cos+0x24>)
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fadc 	bl	8000ad4 <__addsf3>
 800251c:	4603      	mov	r3, r0
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffaa 	bl	8002478 <qFFMath_Sin>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	3fc90fdb 	.word	0x3fc90fdb

08002534 <qFFMath_Exp2>:
    y = qFFMath_ATan( y/( x + f ) ) + ( ( x < 0.0f ) ? t : 0.0f );
    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 800253c:	492e      	ldr	r1, [pc, #184]	; (80025f8 <qFFMath_Exp2+0xc4>)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe fd78 	bl	8001034 <__aeabi_fcmple>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e04c      	b.n	80025ec <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 8002552:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe fd80 	bl	800105c <__aeabi_fcmpgt>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff fecc 	bl	8002300 <_qFFMath_GetAbnormal>
 8002568:	6178      	str	r0, [r7, #20]
 800256a:	e03f      	b.n	80025ec <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 8002572:	4922      	ldr	r1, [pc, #136]	; (80025fc <qFFMath_Exp2+0xc8>)
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe faad 	bl	8000ad4 <__addsf3>
 800257a:	4603      	mov	r3, r0
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fd77 	bl	8001070 <__aeabi_f2uiz>
 8002582:	4603      	mov	r3, r0
 8002584:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fb53 	bl	8000c34 <__aeabi_ui2f>
 800258e:	4603      	mov	r3, r0
 8002590:	4619      	mov	r1, r3
 8002592:	481a      	ldr	r0, [pc, #104]	; (80025fc <qFFMath_Exp2+0xc8>)
 8002594:	f7fe fa9c 	bl	8000ad0 <__aeabi_fsub>
 8002598:	4603      	mov	r3, r0
 800259a:	4619      	mov	r1, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe fa99 	bl	8000ad4 <__addsf3>
 80025a2:	4603      	mov	r3, r0
 80025a4:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( y, exponent, float );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 80025b0:	4913      	ldr	r1, [pc, #76]	; (8002600 <qFFMath_Exp2+0xcc>)
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fb96 	bl	8000ce4 <__aeabi_fmul>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4912      	ldr	r1, [pc, #72]	; (8002604 <qFFMath_Exp2+0xd0>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fa89 	bl	8000ad4 <__addsf3>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fb8c 	bl	8000ce4 <__aeabi_fmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 80025d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fe fa7d 	bl	8000ad4 <__addsf3>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f7fe fb7e 	bl	8000ce4 <__aeabi_fmul>
 80025e8:	4603      	mov	r3, r0
 80025ea:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80025ec:	697b      	ldr	r3, [r7, #20]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	c2fc0000 	.word	0xc2fc0000
 80025fc:	42fe0000 	.word	0x42fe0000
 8002600:	3eadf5d0 	.word	0x3eadf5d0
 8002604:	3f290518 	.word	0x3f290518

08002608 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fd02 	bl	8001020 <__aeabi_fcmplt>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8002622:	2001      	movs	r0, #1
 8002624:	f7ff fe6c 	bl	8002300 <_qFFMath_GetAbnormal>
 8002628:	6178      	str	r0, [r7, #20]
 800262a:	e049      	b.n	80026c0 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fe86 	bl	8002340 <qFFMath_FPClassify>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fe60 	bl	8002300 <_qFFMath_GetAbnormal>
 8002640:	4603      	mov	r3, r0
 8002642:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e03a      	b.n	80026c0 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]
        y2 = y;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0ddb      	lsrs	r3, r3, #23
 800265a:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fae8 	bl	8000c34 <__aeabi_ui2f>
 8002664:	4603      	mov	r3, r0
 8002666:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800266e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8002672:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( x, y, float );
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <qFFMath_Log2+0xc4>)
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fb31 	bl	8000ce4 <__aeabi_fmul>
 8002682:	4603      	mov	r3, r0
 8002684:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa23 	bl	8000ad4 <__addsf3>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f7fe fb24 	bl	8000ce4 <__aeabi_fmul>
 800269c:	4603      	mov	r3, r0
 800269e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fa14 	bl	8000ad0 <__aeabi_fsub>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <qFFMath_Log2+0xc8>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa0f 	bl	8000ad0 <__aeabi_fsub>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7fe fa0c 	bl	8000ad4 <__addsf3>
 80026bc:	4603      	mov	r3, r0
 80026be:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80026c0:	697b      	ldr	r3, [r7, #20]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	beaaaaab 	.word	0xbeaaaaab
 80026d0:	3f2aaaab 	.word	0x3f2aaaab

080026d4 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( 1.442695041f*x );
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <qFFMath_Exp+0x24>)
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fb00 	bl	8000ce4 <__aeabi_fmul>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff24 	bl	8002534 <qFFMath_Exp2>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	3fb8aa3b 	.word	0x3fb8aa3b

080026fc <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    return 0.693147181f*qFFMath_Log2(x);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff7f 	bl	8002608 <qFFMath_Log2>
 800270a:	4603      	mov	r3, r0
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <qFFMath_Log+0x24>)
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fae8 	bl	8000ce4 <__aeabi_fmul>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	3f317218 	.word	0x3f317218

08002724 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff6a 	bl	8002608 <qFFMath_Log2>
 8002734:	4603      	mov	r3, r0
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fad3 	bl	8000ce4 <__aeabi_fmul>
 800273e:	4603      	mov	r3, r0
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fef7 	bl	8002534 <qFFMath_Exp2>
 8002746:	4603      	mov	r3, r0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
 800275c:	4613      	mov	r3, r2
 800275e:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d04f      	beq.n	800280a <qFIS_SetParameter+0xba>
        switch ( p ) {
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d84e      	bhi.n	800280e <qFIS_SetParameter+0xbe>
 8002770:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <qFIS_SetParameter+0x28>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	0800278d 	.word	0x0800278d
 800277c:	080027a5 	.word	0x080027a5
 8002780:	080027c3 	.word	0x080027c3
 8002784:	080027db 	.word	0x080027db
 8002788:	080027f9 	.word	0x080027f9
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 800278c:	78bb      	ldrb	r3, [r7, #2]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d83f      	bhi.n	8002812 <qFIS_SetParameter+0xc2>
                    f->implicate = method[ x ];
 8002792:	78bb      	ldrb	r3, [r7, #2]
 8002794:	4a26      	ldr	r2, [pc, #152]	; (8002830 <qFIS_SetParameter+0xe0>)
 8002796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
                }
                break;
 80027a2:	e036      	b.n	8002812 <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 80027a4:	78bb      	ldrb	r3, [r7, #2]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d935      	bls.n	8002816 <qFIS_SetParameter+0xc6>
 80027aa:	78bb      	ldrb	r3, [r7, #2]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d832      	bhi.n	8002816 <qFIS_SetParameter+0xc6>
                    f->aggregate = method[ x ];
 80027b0:	78bb      	ldrb	r3, [r7, #2]
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <qFIS_SetParameter+0xe0>)
 80027b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
                }
                break;
 80027c0:	e029      	b.n	8002816 <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 80027c2:	78bb      	ldrb	r3, [r7, #2]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d828      	bhi.n	800281a <qFIS_SetParameter+0xca>
                    f->andOp = method[ x ];
 80027c8:	78bb      	ldrb	r3, [r7, #2]
 80027ca:	4a19      	ldr	r2, [pc, #100]	; (8002830 <qFIS_SetParameter+0xe0>)
 80027cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 80027d4:	2301      	movs	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
                }
                break;
 80027d8:	e01f      	b.n	800281a <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d91e      	bls.n	800281e <qFIS_SetParameter+0xce>
 80027e0:	78bb      	ldrb	r3, [r7, #2]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d81b      	bhi.n	800281e <qFIS_SetParameter+0xce>
                    f->orOp = method[ x ];
 80027e6:	78bb      	ldrb	r3, [r7, #2]
 80027e8:	4a11      	ldr	r2, [pc, #68]	; (8002830 <qFIS_SetParameter+0xe0>)
 80027ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
                }
                break;
 80027f6:	e012      	b.n	800281e <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 80027f8:	78bb      	ldrb	r3, [r7, #2]
 80027fa:	2b13      	cmp	r3, #19
 80027fc:	d911      	bls.n	8002822 <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 80027fe:	78ba      	ldrb	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002808:	e00b      	b.n	8002822 <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 800280a:	bf00      	nop
 800280c:	e00a      	b.n	8002824 <qFIS_SetParameter+0xd4>
                break;
 800280e:	bf00      	nop
 8002810:	e008      	b.n	8002824 <qFIS_SetParameter+0xd4>
                break;
 8002812:	bf00      	nop
 8002814:	e006      	b.n	8002824 <qFIS_SetParameter+0xd4>
                break;
 8002816:	bf00      	nop
 8002818:	e004      	b.n	8002824 <qFIS_SetParameter+0xd4>
                break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <qFIS_SetParameter+0xd4>
                break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <qFIS_SetParameter+0xd4>
                break;
 8002822:	bf00      	nop

    return retVal;
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	08008b14 	.word	0x08008b14

08002834 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	460b      	mov	r3, r1
 8002842:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80bb 	beq.w	80029c6 <qFIS_Setup+0x192>
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	2b02      	cmp	r3, #2
 8002854:	f200 80b7 	bhi.w	80029c6 <qFIS_Setup+0x192>
 8002858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80b3 	beq.w	80029c6 <qFIS_Setup+0x192>
 8002860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80af 	beq.w	80029c6 <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4a59      	ldr	r2, [pc, #356]	; (80029d0 <qFIS_Setup+0x19c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	4a56      	ldr	r2, [pc, #344]	; (80029d4 <qFIS_Setup+0x1a0>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	091a      	lsrs	r2, r3, #4
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <qFIS_Setup+0x1a4>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	091a      	lsrs	r2, r3, #4
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8002892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002894:	4a50      	ldr	r2, [pc, #320]	; (80029d8 <qFIS_Setup+0x1a4>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	091a      	lsrs	r2, r3, #4
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b0:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b6:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	7afa      	ldrb	r2, [r7, #11]
 80028ce:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 80028d2:	2264      	movs	r2, #100	; 0x64
 80028d4:	2104      	movs	r1, #4
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff ff3a 	bl	8002750 <qFIS_SetParameter>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 80028e4:	2200      	movs	r2, #0
 80028e6:	2102      	movs	r1, #2
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff ff31 	bl	8002750 <qFIS_SetParameter>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4413      	add	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 80028f6:	2202      	movs	r2, #2
 80028f8:	2103      	movs	r1, #3
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff28 	bl	8002750 <qFIS_SetParameter>
 8002900:	4602      	mov	r2, r0
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	4413      	add	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff ff1f 	bl	8002750 <qFIS_SetParameter>
 8002912:	4602      	mov	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 800291a:	2202      	movs	r2, #2
 800291c:	2101      	movs	r1, #1
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff ff16 	bl	8002750 <qFIS_SetParameter>
 8002924:	4602      	mov	r2, r0
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
        retVal = ( 5 == retVal ) ? 1 : 0;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b05      	cmp	r3, #5
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <qFIS_Setup+0x110>
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <qFIS_Setup+0x1a8>)
 8002942:	e000      	b.n	8002946 <qFIS_Setup+0x112>
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e032      	b.n	80029bc <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2134      	movs	r1, #52	; 0x34
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	6858      	ldr	r0, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2134      	movs	r1, #52	; 0x34
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f8aa 	bl	8000ad0 <__aeabi_fsub>
 800297c:	4603      	mov	r3, r0
 800297e:	461d      	mov	r5, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f955 	bl	8000c34 <__aeabi_ui2f>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2134      	movs	r1, #52	; 0x34
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	18d4      	adds	r4, r2, r3
 8002998:	4601      	mov	r1, r0
 800299a:	4628      	mov	r0, r5
 800299c:	f7fe fa56 	bl	8000e4c <__aeabi_fdiv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	60e3      	str	r3, [r4, #12]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2134      	movs	r1, #52	; 0x34
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3301      	adds	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d3c7      	bcc.n	8002956 <qFIS_Setup+0x122>
        }
    }

    return retVal;
 80029c6:	697b      	ldr	r3, [r7, #20]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	4ec4ec4f 	.word	0x4ec4ec4f
 80029d8:	cccccccd 	.word	0xcccccccd
 80029dc:	08003251 	.word	0x08003251
 80029e0:	080032e5 	.word	0x080032e5

080029e4 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <qFIS_InputSetup+0x4a>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db15      	blt.n	8002a2e <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002a2e:	697b      	ldr	r3, [r7, #20]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d05a      	beq.n	8002b08 <qFIS_OutputSetup+0xce>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db57      	blt.n	8002b08 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2234      	movs	r2, #52	; 0x34
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
        v[ t ].data[ 1 ] = 0.0f;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2234      	movs	r2, #52	; 0x34
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4413      	add	r3, r2
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	61da      	str	r2, [r3, #28]
        v[ t ].data[ 2 ] = 0.0f;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2234      	movs	r2, #52	; 0x34
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
        v[ t ].data[ 3 ] = 0.0f;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2234      	movs	r2, #52	; 0x34
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].x = 0.0f;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2234      	movs	r2, #52	; 0x34
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
        v[ t ].y = 0.0f;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2234      	movs	r2, #52	; 0x34
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
        v[ t ].b.min = min;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2234      	movs	r2, #52	; 0x34
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2234      	movs	r2, #52	; 0x34
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2234      	movs	r2, #52	; 0x34
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	2200      	movs	r2, #0
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].yag = NULL;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2234      	movs	r2, #52	; 0x34
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
        retVal = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002b08:	697b      	ldr	r3, [r7, #20]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00e      	beq.n	8002b48 <qFIS_SetInput+0x34>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0b      	blt.n	8002b48 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002b48:	697b      	ldr	r3, [r7, #20]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <qFIS_GetOutput+0x2c>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db07      	blt.n	8002b80 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2234      	movs	r2, #52	; 0x34
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002b80:	68fb      	ldr	r3, [r7, #12]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d055      	beq.n	8002c50 <qFIS_SetMF+0xc4>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db52      	blt.n	8002c50 <qFIS_SetMF+0xc4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db4f      	blt.n	8002c50 <qFIS_SetMF+0xc4>
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	2b1a      	cmp	r3, #26
 8002bb4:	d84c      	bhi.n	8002c50 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e00c      	b.n	8002bec <qFIS_SetMF+0x60>
        }
        else {
            m[ mf ].shape = fShape[ s ];
 8002bd2:	78f9      	ldrb	r1, [r7, #3]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <qFIS_SetMF+0xd0>)
 8002be6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002bea:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c12:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	189c      	adds	r4, r3, r2
 8002c3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c44:	f001 fcd3 	bl	80045ee <qFIS_Bound>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002c50:	697b      	ldr	r3, [r7, #20]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08008b28 	.word	0x08008b28

08002c60 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e026      	b.n	8002cbc <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	68dd      	ldr	r5, [r3, #12]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	681c      	ldr	r4, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	18c8      	adds	r0, r1, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	47a0      	blx	r4
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f7fe f81b 	bl	8000ce4 <__aeabi_fmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3d3      	bcc.n	8002c6e <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bdb0      	pop	{r4, r5, r7, pc}

08002cce <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e02b      	b.n	8002d34 <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6819      	ldr	r1, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002cfe:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002d10:	685e      	ldr	r6, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	18cc      	adds	r4, r1, r3
 8002d22:	4632      	mov	r2, r6
 8002d24:	4629      	mov	r1, r5
 8002d26:	f001 fc62 	bl	80045ee <qFIS_Bound>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3ce      	bcc.n	8002cdc <qFIS_TruncateInputs+0xe>
    }
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d46 <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ffb8 	bl	8002cce <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff7e 	bl	8002c60 <qFIS_EvalInputMFs>
        retVal = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	807b      	strh	r3, [r7, #2]
    uint8_t neg = (uint8_t)( index < 0 );
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	0bdb      	lsrs	r3, r3, #15
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <qFIS_ParseFuzzValue+0x22>
        index = -index;
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	425b      	negs	r3, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8002d94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3b14      	subs	r3, #20
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fc1c 	bl	80045ee <qFIS_Bound>
 8002db6:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <qFIS_ParseFuzzValue+0x5a>
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002dc4:	f7fd fe84 	bl	8000ad0 <__aeabi_fsub>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	e000      	b.n	8002dce <qFIS_ParseFuzzValue+0x5c>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60bb      	str	r3, [r7, #8]

    return y;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002dea:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <qFIS_GetFuzzOperator+0x40>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <qFIS_GetFuzzOperator+0x1c>
 8002df0:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <qFIS_GetFuzzOperator+0x44>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <qFIS_GetFuzzOperator+0x24>
 8002df6:	e007      	b.n	8002e08 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	60fb      	str	r3, [r7, #12]
            break;
 8002dfe:	e006      	b.n	8002e0e <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	60fb      	str	r3, [r7, #12]
            break;
 8002e06:	e002      	b.n	8002e0e <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <qFIS_GetFuzzOperator+0x48>)
 8002e0a:	60fb      	str	r3, [r7, #12]
            break;
 8002e0c:	bf00      	nop
    }

    return oper;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	ffff8002 	.word	0xffff8002
 8002e20:	ffff8003 	.word	0xffff8003
 8002e24:	080045c3 	.word	0x080045c3

08002e28 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3302      	adds	r3, #2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffbb 	bl	8002ddc <qFIS_GetFuzzOperator>
 8002e66:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff7b 	bl	8002d72 <qFIS_ParseFuzzValue>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4620      	mov	r0, r4
 8002e84:	4798      	blx	r3
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8002e8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db05      	blt.n	8002ea0 <qFIS_InferenceAntecedent+0x78>
 8002e94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d902      	bls.n	8002ea6 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	e022      	b.n	8002eec <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8002ea6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <qFIS_InferenceAntecedent+0xd0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <qFIS_InferenceAntecedent+0x92>
 8002eb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <qFIS_InferenceAntecedent+0xd4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10a      	bne.n	8002ed0 <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8a7a      	ldrh	r2, [r7, #18]
 8002ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <qFIS_InferenceAntecedent+0xd8>)
 8002ec6:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	3302      	adds	r3, #2
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	e00d      	b.n	8002eec <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 8002ed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <qFIS_InferenceAntecedent+0xdc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d106      	bne.n	8002ee8 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <qFIS_InferenceAntecedent+0xe0>)
 8002ede:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	e001      	b.n	8002eec <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 8002eec:	683b      	ldr	r3, [r7, #0]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	ffff8002 	.word	0xffff8002
 8002efc:	ffff8003 	.word	0xffff8003
 8002f00:	08002e29 	.word	0x08002e29
 8002f04:	ffff8004 	.word	0xffff8004
 8002f08:	08002f0d 	.word	0x08002f0d

08002f0c <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d908      	bls.n	8002f30 <qFIS_InferenceReachEnd+0x24>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3302      	adds	r3, #2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	e001      	b.n	8002f34 <qFIS_InferenceReachEnd+0x28>
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8002f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <qFIS_InferenceReachEnd+0xc4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d03f      	beq.n	8002fc6 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <qFIS_InferenceReachEnd+0xc8>)
 8002f4a:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f66:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01e      	beq.n	8002fae <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fb31 	bl	80045ee <qFIS_Bound>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	18d4      	adds	r4, r2, r3
 8002fa6:	f7fd fe9d 	bl	8000ce4 <__aeabi_fmul>
 8002faa:	4603      	mov	r3, r0
 8002fac:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	603b      	str	r3, [r7, #0]
    }

    return i;
 8002fc6:	683b      	ldr	r3, [r7, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	ffff8002 	.word	0xffff8002
 8002fd4:	08002e29 	.word	0x08002e29

08002fd8 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 8002fe2:	bf00      	nop
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1c59      	adds	r1, r3, #1
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff6:	4a07      	ldr	r2, [pc, #28]	; (8003014 <qFIS_AggregationFindConsequent+0x3c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d1f3      	bne.n	8002fe4 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a06      	ldr	r2, [pc, #24]	; (8003018 <qFIS_AggregationFindConsequent+0x40>)
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	3b01      	subs	r3, #1
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	ffff8004 	.word	0xffff8004
 8003018:	0800301d 	.word	0x0800301d

0800301c <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 8003026:	2300      	movs	r3, #0
 8003028:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b01      	cmp	r3, #1
 800304e:	d908      	bls.n	8003062 <qFIS_InferenceConsequent+0x46>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3302      	adds	r3, #2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003060:	e001      	b.n	8003066 <qFIS_InferenceConsequent+0x4a>
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 8003068:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da05      	bge.n	800307c <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 8003070:	8bfb      	ldrh	r3, [r7, #30]
 8003072:	425b      	negs	r3, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 8003078:	2301      	movs	r3, #1
 800307a:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 800307c:	8bfb      	ldrh	r3, [r7, #30]
 800307e:	3b01      	subs	r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd ffe0 	bl	800105c <__aeabi_fcmpgt>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d07b      	beq.n	800319a <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80030aa:	2134      	movs	r1, #52	; 0x34
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68d9      	ldr	r1, [r3, #12]
 80030b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d133      	bne.n	800313a <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	68dc      	ldr	r4, [r3, #12]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	6851      	ldr	r1, [r2, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	6978      	ldr	r0, [r7, #20]
 80030e2:	4798      	blx	r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	4619      	mov	r1, r3
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7fd fdfb 	bl	8000ce4 <__aeabi_fmul>
 80030ee:	4603      	mov	r3, r0
 80030f0:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 80030f2:	7f7b      	ldrb	r3, [r7, #29]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <qFIS_InferenceConsequent+0xea>
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030fe:	f7fd fce7 	bl	8000ad0 <__aeabi_fsub>
 8003102:	4603      	mov	r3, r0
 8003104:	e000      	b.n	8003108 <qFIS_InferenceConsequent+0xec>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69dc      	ldr	r4, [r3, #28]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	695d      	ldr	r5, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	440a      	add	r2, r1
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4610      	mov	r0, r2
 8003128:	4798      	blx	r3
 800312a:	4603      	mov	r3, r0
 800312c:	4619      	mov	r1, r3
 800312e:	4628      	mov	r0, r5
 8003130:	47a0      	blx	r4
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	615a      	str	r2, [r3, #20]
 8003138:	e02f      	b.n	800319a <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6810      	ldr	r0, [r2, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	6851      	ldr	r1, [r2, #4]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800314a:	4798      	blx	r3
 800314c:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	699c      	ldr	r4, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68f9      	ldr	r1, [r7, #12]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fdbe 	bl	8000ce4 <__aeabi_fmul>
 8003168:	4603      	mov	r3, r0
 800316a:	4619      	mov	r1, r3
 800316c:	4620      	mov	r0, r4
 800316e:	f7fd fcb1 	bl	8000ad4 <__addsf3>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	69d8      	ldr	r0, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fca1 	bl	8000ad4 <__addsf3>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	61da      	str	r2, [r3, #28]
        }
    }

    i += 2u;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	3302      	adds	r3, #2
 800319e:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 80031a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80031a4:	4a09      	ldr	r2, [pc, #36]	; (80031cc <qFIS_InferenceConsequent+0x1b0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00a      	beq.n	80031c0 <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <qFIS_InferenceConsequent+0x1b4>)
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3b01      	subs	r3, #1
 80031be:	603b      	str	r3, [r7, #0]
    }

    return i;
 80031c0:	683b      	ldr	r3, [r7, #0]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	ffff8002 	.word	0xffff8002
 80031d0:	08002fd9 	.word	0x08002fd9

080031d4 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02d      	beq.n	800323e <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80031ee:	d126      	bne.n	800323e <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 80031f0:	2301      	movs	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a14      	ldr	r2, [pc, #80]	; (8003248 <qFIS_Aggregate+0x74>)
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003200:	e00b      	b.n	800321a <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
 800320c:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3301      	adds	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <qFIS_Aggregate+0x78>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <qFIS_Aggregate+0x6a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	429a      	cmp	r2, r3
 8003238:	d3e3      	bcc.n	8003202 <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 800323a:	e000      	b.n	800323e <qFIS_Aggregate+0x6a>
                    break;
 800323c:	bf00      	nop
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	08002fd9 	.word	0x08002fd9
 800324c:	ffff8001 	.word	0xffff8001

08003250 <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d004      	beq.n	8003272 <qFIS_DeFuzz_Centroid+0x22>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d02b      	beq.n	80032c4 <qFIS_DeFuzz_Centroid+0x74>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <qFIS_DeFuzz_Centroid+0x62>
            break;
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
            break;
        default:
            break;
 8003270:	e033      	b.n	80032da <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] += o->x*o->y;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699c      	ldr	r4, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7fd fd2f 	bl	8000ce4 <__aeabi_fmul>
 8003286:	4603      	mov	r3, r0
 8003288:	4619      	mov	r1, r3
 800328a:	4620      	mov	r0, r4
 800328c:	f7fd fc22 	bl	8000ad4 <__addsf3>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += o->y;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7fd fc16 	bl	8000ad4 <__addsf3>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	61da      	str	r2, [r3, #28]
            break;
 80032b0:	e013      	b.n	80032da <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
            break;
 80032c2:	e00a      	b.n	80032da <qFIS_DeFuzz_Centroid+0x8a>
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7fd fdbc 	bl	8000e4c <__aeabi_fdiv>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60fb      	str	r3, [r7, #12]
            break;
 80032d8:	bf00      	nop
    }

    return d;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}

080032e4 <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d109      	bne.n	8003310 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f7fd fda0 	bl	8000e4c <__aeabi_fdiv>
 800330c:	4603      	mov	r3, r0
 800330e:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8003310:	68fb      	ldr	r3, [r7, #12]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <qFIS_DeFuzzify>:

    return d;
}
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 800331a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8136 	beq.w	800359a <qFIS_DeFuzzify+0x280>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e00e      	b.n	8003352 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6851      	ldr	r1, [r2, #4]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	2034      	movs	r0, #52	; 0x34
 8003340:	fb00 f202 	mul.w	r2, r0, r2
 8003344:	440a      	add	r2, r1
 8003346:	2100      	movs	r1, #0
 8003348:	4610      	mov	r0, r2
 800334a:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3301      	adds	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3eb      	bcc.n	8003334 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 809b 	bne.w	800349e <qFIS_DeFuzzify+0x184>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	e090      	b.n	8003490 <qFIS_DeFuzzify+0x176>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e039      	b.n	80033e8 <qFIS_DeFuzzify+0xce>
                    f->output[ i ].y = 0.0f;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2134      	movs	r1, #52	; 0x34
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	615a      	str	r2, [r3, #20]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2134      	movs	r1, #52	; 0x34
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2134      	movs	r1, #52	; 0x34
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 80033a6:	68dd      	ldr	r5, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2134      	movs	r1, #52	; 0x34
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	18d4      	adds	r4, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4629      	mov	r1, r5
 80033ba:	f000 f951 	bl	8003660 <qFIS_GetNextX>
 80033be:	4603      	mov	r3, r0
 80033c0:	6123      	str	r3, [r4, #16]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2134      	movs	r1, #52	; 0x34
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2034      	movs	r0, #52	; 0x34
 80033d8:	fb00 f303 	mul.w	r3, r0, r3
 80033dc:	440b      	add	r3, r1
 80033de:	6912      	ldr	r2, [r2, #16]
 80033e0:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3301      	adds	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3c0      	bcc.n	8003374 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff feee 	bl	80031d4 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	e040      	b.n	8003480 <qFIS_DeFuzzify+0x166>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6851      	ldr	r1, [r2, #4]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	2034      	movs	r0, #52	; 0x34
 800340a:	fb00 f202 	mul.w	r2, r0, r2
 800340e:	440a      	add	r2, r1
 8003410:	2101      	movs	r1, #1
 8003412:	4610      	mov	r0, r2
 8003414:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2134      	movs	r1, #52	; 0x34
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d027      	beq.n	800347a <qFIS_DeFuzzify+0x160>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2134      	movs	r1, #52	; 0x34
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2034      	movs	r0, #52	; 0x34
 8003440:	fb00 f303 	mul.w	r3, r0, r3
 8003444:	440b      	add	r3, r1
 8003446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	6912      	ldr	r2, [r2, #16]
 8003450:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2134      	movs	r1, #52	; 0x34
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	441a      	add	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2034      	movs	r0, #52	; 0x34
 8003468:	fb00 f303 	mul.w	r3, r0, r3
 800346c:	440b      	add	r3, r1
 800346e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	6952      	ldr	r2, [r2, #20]
 8003478:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	429a      	cmp	r2, r3
 8003488:	d3b9      	bcc.n	80033fe <qFIS_DeFuzzify+0xe4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3301      	adds	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	f4ff af69 	bcc.w	800336e <qFIS_DeFuzzify+0x54>
 800349c:	e038      	b.n	8003510 <qFIS_DeFuzzify+0x1f6>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e016      	b.n	80034d2 <qFIS_DeFuzzify+0x1b8>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2134      	movs	r1, #52	; 0x34
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2134      	movs	r1, #52	; 0x34
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3e3      	bcc.n	80034a4 <qFIS_DeFuzzify+0x18a>
            }
            qFIS_Aggregate( f );
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fe79 	bl	80031d4 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e00e      	b.n	8003506 <qFIS_DeFuzzify+0x1ec>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6851      	ldr	r1, [r2, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	2034      	movs	r0, #52	; 0x34
 80034f4:	fb00 f202 	mul.w	r2, r0, r2
 80034f8:	440a      	add	r2, r1
 80034fa:	2101      	movs	r1, #1
 80034fc:	4610      	mov	r0, r2
 80034fe:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3301      	adds	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d3eb      	bcc.n	80034e8 <qFIS_DeFuzzify+0x1ce>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e03c      	b.n	8003590 <qFIS_DeFuzzify+0x276>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6851      	ldr	r1, [r2, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	2034      	movs	r0, #52	; 0x34
 8003522:	fb00 f202 	mul.w	r2, r0, r2
 8003526:	188d      	adds	r5, r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6851      	ldr	r1, [r2, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	2034      	movs	r0, #52	; 0x34
 8003530:	fb00 f202 	mul.w	r2, r0, r2
 8003534:	188c      	adds	r4, r1, r2
 8003536:	2102      	movs	r1, #2
 8003538:	4628      	mov	r0, r5
 800353a:	4798      	blx	r3
 800353c:	4603      	mov	r3, r0
 800353e:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2134      	movs	r1, #52	; 0x34
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2134      	movs	r1, #52	; 0x34
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 800355e:	681d      	ldr	r5, [r3, #0]
                                                 f->output[ i ].b.max );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2134      	movs	r1, #52	; 0x34
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 800356e:	685e      	ldr	r6, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2134      	movs	r1, #52	; 0x34
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	18d4      	adds	r4, r2, r3
 800357e:	4632      	mov	r2, r6
 8003580:	4629      	mov	r1, r5
 8003582:	f001 f834 	bl	80045ee <qFIS_Bound>
 8003586:	4603      	mov	r3, r0
 8003588:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	429a      	cmp	r2, r3
 8003598:	d3bd      	bcc.n	8003516 <qFIS_DeFuzzify+0x1fc>
        }
    }

    return retVal;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035a4 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04a      	beq.n	800364c <qFIS_Inference+0xa8>
        size_t i = 0u;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80035c6:	d12f      	bne.n	8003628 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a23      	ldr	r2, [pc, #140]	; (8003658 <qFIS_Inference+0xb4>)
 80035cc:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 80035e6:	2301      	movs	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80035ea:	e00b      	b.n	8003604 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
 80035f6:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d013      	beq.n	8003626 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3301      	adds	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <qFIS_Inference+0xb8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <qFIS_Inference+0x84>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	429a      	cmp	r2, r3
 8003622:	d3e3      	bcc.n	80035ec <qFIS_Inference+0x48>
 8003624:	e000      	b.n	8003628 <qFIS_Inference+0x84>
                    break;
 8003626:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <qFIS_Inference+0xb8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d107      	bne.n	800364c <qFIS_Inference+0xa8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	429a      	cmp	r2, r3
 8003646:	d101      	bne.n	800364c <qFIS_Inference+0xa8>
            retVal = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	08002e29 	.word	0x08002e29
 800365c:	ffff8001 	.word	0xffff8001

08003660 <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd fae1 	bl	8000c34 <__aeabi_ui2f>
 8003672:	4603      	mov	r3, r0
 8003674:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fa2b 	bl	8000ad4 <__addsf3>
 800367e:	4603      	mov	r3, r0
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fb2e 	bl	8000ce4 <__aeabi_fmul>
 8003688:	4603      	mov	r3, r0
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fa21 	bl	8000ad4 <__addsf3>
 8003692:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 80036c0:	6a39      	ldr	r1, [r7, #32]
 80036c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036c4:	f7fd fa04 	bl	8000ad0 <__aeabi_fsub>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461c      	mov	r4, r3
 80036cc:	6a39      	ldr	r1, [r7, #32]
 80036ce:	69f8      	ldr	r0, [r7, #28]
 80036d0:	f7fd f9fe 	bl	8000ad0 <__aeabi_fsub>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4619      	mov	r1, r3
 80036d8:	4620      	mov	r0, r4
 80036da:	f7fd fbb7 	bl	8000e4c <__aeabi_fdiv>
 80036de:	4603      	mov	r3, r0
 80036e0:	461c      	mov	r4, r3
 80036e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e4:	69b8      	ldr	r0, [r7, #24]
 80036e6:	f7fd f9f3 	bl	8000ad0 <__aeabi_fsub>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461d      	mov	r5, r3
 80036ee:	69f9      	ldr	r1, [r7, #28]
 80036f0:	69b8      	ldr	r0, [r7, #24]
 80036f2:	f7fd f9ed 	bl	8000ad0 <__aeabi_fsub>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4619      	mov	r1, r3
 80036fa:	4628      	mov	r0, r5
 80036fc:	f7fd fba6 	bl	8000e4c <__aeabi_fdiv>
 8003700:	4603      	mov	r3, r0
 8003702:	4619      	mov	r1, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f000 feef 	bl	80044e8 <qFIS_Min>
 800370a:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f000 ff04 	bl	800451e <qFIS_Max>
 8003716:	4603      	mov	r3, r0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bdb0      	pop	{r4, r5, r7, pc}

08003720 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b08b      	sub	sp, #44	; 0x2c
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 800374a:	6a39      	ldr	r1, [r7, #32]
 800374c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800374e:	f7fd f9bf 	bl	8000ad0 <__aeabi_fsub>
 8003752:	4603      	mov	r3, r0
 8003754:	461c      	mov	r4, r3
 8003756:	6a39      	ldr	r1, [r7, #32]
 8003758:	69f8      	ldr	r0, [r7, #28]
 800375a:	f7fd f9b9 	bl	8000ad0 <__aeabi_fsub>
 800375e:	4603      	mov	r3, r0
 8003760:	4619      	mov	r1, r3
 8003762:	4620      	mov	r0, r4
 8003764:	f7fd fb72 	bl	8000e4c <__aeabi_fdiv>
 8003768:	4603      	mov	r3, r0
 800376a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800376e:	4618      	mov	r0, r3
 8003770:	f000 feba 	bl	80044e8 <qFIS_Min>
 8003774:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f7fd f9a9 	bl	8000ad0 <__aeabi_fsub>
 800377e:	4603      	mov	r3, r0
 8003780:	461c      	mov	r4, r3
 8003782:	69b9      	ldr	r1, [r7, #24]
 8003784:	6978      	ldr	r0, [r7, #20]
 8003786:	f7fd f9a3 	bl	8000ad0 <__aeabi_fsub>
 800378a:	4603      	mov	r3, r0
 800378c:	4619      	mov	r1, r3
 800378e:	4620      	mov	r0, r4
 8003790:	f7fd fb5c 	bl	8000e4c <__aeabi_fdiv>
 8003794:	4603      	mov	r3, r0
 8003796:	4619      	mov	r1, r3
 8003798:	6938      	ldr	r0, [r7, #16]
 800379a:	f000 fea5 	bl	80044e8 <qFIS_Min>
 800379e:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	6938      	ldr	r0, [r7, #16]
 80037a6:	f000 feba 	bl	800451e <qFIS_Max>
 80037aa:	4603      	mov	r3, r0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	372c      	adds	r7, #44	; 0x2c
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	69f8      	ldr	r0, [r7, #28]
 80037dc:	f7fd f978 	bl	8000ad0 <__aeabi_fsub>
 80037e0:	4603      	mov	r3, r0
 80037e2:	69b9      	ldr	r1, [r7, #24]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fb31 	bl	8000e4c <__aeabi_fdiv>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe fde7 	bl	80023c0 <qFFMath_Abs>
 80037f2:	4604      	mov	r4, r0
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd f96b 	bl	8000ad4 <__addsf3>
 80037fe:	4603      	mov	r3, r0
 8003800:	4619      	mov	r1, r3
 8003802:	4620      	mov	r0, r4
 8003804:	f7fe ff8e 	bl	8002724 <qFFMath_Pow>
 8003808:	4603      	mov	r3, r0
 800380a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd f960 	bl	8000ad4 <__addsf3>
 8003814:	4603      	mov	r3, r0
 8003816:	4619      	mov	r1, r3
 8003818:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800381c:	f7fd fb16 	bl	8000e4c <__aeabi_fdiv>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}

0800382a <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b088      	sub	sp, #32
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	69f8      	ldr	r0, [r7, #28]
 800384c:	f7fd f940 	bl	8000ad0 <__aeabi_fsub>
 8003850:	4603      	mov	r3, r0
 8003852:	69b9      	ldr	r1, [r7, #24]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd faf9 	bl	8000e4c <__aeabi_fdiv>
 800385a:	4603      	mov	r3, r0
 800385c:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 800385e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8003862:	6938      	ldr	r0, [r7, #16]
 8003864:	f7fd fa3e 	bl	8000ce4 <__aeabi_fmul>
 8003868:	4603      	mov	r3, r0
 800386a:	6939      	ldr	r1, [r7, #16]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd fa39 	bl	8000ce4 <__aeabi_fmul>
 8003872:	4603      	mov	r3, r0
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe ff2d 	bl	80026d4 <qFFMath_Exp>
 800387a:	4603      	mov	r3, r0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 80038a2:	6a39      	ldr	r1, [r7, #32]
 80038a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a6:	f7fd fbc5 	bl	8001034 <__aeabi_fcmple>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <qFIS_Gauss2MF+0x3a>
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff ffb8 	bl	800382a <qFIS_GaussMF>
 80038ba:	4603      	mov	r3, r0
 80038bc:	e001      	b.n	80038c2 <qFIS_Gauss2MF+0x3e>
 80038be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038c2:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 80038c4:	69f9      	ldr	r1, [r7, #28]
 80038c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c8:	f7fd fbb4 	bl	8001034 <__aeabi_fcmple>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <qFIS_Gauss2MF+0x60>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3308      	adds	r3, #8
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ffa5 	bl	800382a <qFIS_GaussMF>
 80038e0:	4603      	mov	r3, r0
 80038e2:	e001      	b.n	80038e8 <qFIS_Gauss2MF+0x64>
 80038e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038e8:	617b      	str	r3, [r7, #20]

    return f1*f2;
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	69b8      	ldr	r0, [r7, #24]
 80038ee:	f7fd f9f9 	bl	8000ce4 <__aeabi_fmul>
 80038f2:	4603      	mov	r3, r0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003920:	6979      	ldr	r1, [r7, #20]
 8003922:	69f8      	ldr	r0, [r7, #28]
 8003924:	f7fd f8d4 	bl	8000ad0 <__aeabi_fsub>
 8003928:	4603      	mov	r3, r0
 800392a:	4619      	mov	r1, r3
 800392c:	4620      	mov	r0, r4
 800392e:	f7fd f9d9 	bl	8000ce4 <__aeabi_fmul>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fecd 	bl	80026d4 <qFFMath_Exp>
 800393a:	4603      	mov	r3, r0
 800393c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd f8c7 	bl	8000ad4 <__addsf3>
 8003946:	4603      	mov	r3, r0
 8003948:	4619      	mov	r1, r3
 800394a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800394e:	f7fd fa7d 	bl	8000e4c <__aeabi_fdiv>
 8003952:	4603      	mov	r3, r0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3724      	adds	r7, #36	; 0x24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd90      	pop	{r4, r7, pc}

0800395c <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 8003986:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800398a:	6a38      	ldr	r0, [r7, #32]
 800398c:	f000 fe99 	bl	80046c2 <qFMathEx_Equal>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	6978      	ldr	r0, [r7, #20]
 800399c:	f7fd fb54 	bl	8001048 <__aeabi_fcmpge>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <qFIS_TSigMF+0x50>
            y = max;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e033      	b.n	8003a14 <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e030      	b.n	8003a14 <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	6a38      	ldr	r0, [r7, #32]
 80039b8:	f000 fe83 	bl	80046c2 <qFMathEx_Equal>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7fd fb3e 	bl	8001048 <__aeabi_fcmpge>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <qFIS_TSigMF+0x7c>
            y = min;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e01d      	b.n	8003a14 <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	e01a      	b.n	8003a14 <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80039e4:	f7fd fa32 	bl	8000e4c <__aeabi_fdiv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f86e 	bl	8000ad0 <__aeabi_fsub>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fe80 	bl	80026fc <qFFMath_Log>
 80039fc:	4603      	mov	r3, r0
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd fa23 	bl	8000e4c <__aeabi_fdiv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6938      	ldr	r0, [r7, #16]
 8003a0c:	f7fd f860 	bl	8000ad0 <__aeabi_fsub>
 8003a10:	4603      	mov	r3, r0
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003a1e:	b590      	push	{r4, r7, lr}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff ff64 	bl	80038fc <qFIS_SigMF>
 8003a34:	4604      	mov	r4, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff ff5c 	bl	80038fc <qFIS_SigMF>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4619      	mov	r1, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7fd f841 	bl	8000ad0 <__aeabi_fsub>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fcb5 	bl	80023c0 <qFFMath_Abs>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}

08003a60 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ff43 	bl	80038fc <qFIS_SigMF>
 8003a76:	4604      	mov	r4, r0
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff ff3b 	bl	80038fc <qFIS_SigMF>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fd f92a 	bl	8000ce4 <__aeabi_fmul>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fc94 	bl	80023c0 <qFFMath_Abs>
 8003a98:	4603      	mov	r3, r0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}

08003aa2 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003aa2:	b590      	push	{r4, r7, lr}
 8003aa4:	b08b      	sub	sp, #44	; 0x2c
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	6a38      	ldr	r0, [r7, #32]
 8003ac4:	f7fd fab6 	bl	8001034 <__aeabi_fcmple>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <qFIS_SMF+0x34>
        y =  0.0f;
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	e081      	b.n	8003bda <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	6a38      	ldr	r0, [r7, #32]
 8003ada:	f7fd fab5 	bl	8001048 <__aeabi_fcmpge>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <qFIS_SMF+0x4a>
        y = 1.0f;
 8003ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	e076      	b.n	8003bda <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003aec:	69f9      	ldr	r1, [r7, #28]
 8003aee:	6a38      	ldr	r0, [r7, #32]
 8003af0:	f7fd faaa 	bl	8001048 <__aeabi_fcmpge>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02f      	beq.n	8003b5a <qFIS_SMF+0xb8>
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	69f8      	ldr	r0, [r7, #28]
 8003afe:	f7fc ffe9 	bl	8000ad4 <__addsf3>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f8eb 	bl	8000ce4 <__aeabi_fmul>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4619      	mov	r1, r3
 8003b12:	6a38      	ldr	r0, [r7, #32]
 8003b14:	f7fd fa8e 	bl	8001034 <__aeabi_fcmple>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01d      	beq.n	8003b5a <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 8003b1e:	69f9      	ldr	r1, [r7, #28]
 8003b20:	6a38      	ldr	r0, [r7, #32]
 8003b22:	f7fc ffd5 	bl	8000ad0 <__aeabi_fsub>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461c      	mov	r4, r3
 8003b2a:	69f9      	ldr	r1, [r7, #28]
 8003b2c:	69b8      	ldr	r0, [r7, #24]
 8003b2e:	f7fc ffcf 	bl	8000ad0 <__aeabi_fsub>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4619      	mov	r1, r3
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7fd f988 	bl	8000e4c <__aeabi_fdiv>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fc ffc5 	bl	8000ad4 <__addsf3>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7fd f8c8 	bl	8000ce4 <__aeabi_fmul>
 8003b54:	4603      	mov	r3, r0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e03f      	b.n	8003bda <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	6a38      	ldr	r0, [r7, #32]
 8003b5e:	f7fd fa69 	bl	8001034 <__aeabi_fcmple>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d035      	beq.n	8003bd4 <qFIS_SMF+0x132>
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	69f8      	ldr	r0, [r7, #28]
 8003b6c:	f7fc ffb2 	bl	8000ad4 <__addsf3>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd f8b4 	bl	8000ce4 <__aeabi_fmul>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6a38      	ldr	r0, [r7, #32]
 8003b82:	f7fd fa61 	bl	8001048 <__aeabi_fcmpge>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d023      	beq.n	8003bd4 <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	6a38      	ldr	r0, [r7, #32]
 8003b90:	f7fc ff9e 	bl	8000ad0 <__aeabi_fsub>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461c      	mov	r4, r3
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	69b8      	ldr	r0, [r7, #24]
 8003b9c:	f7fc ff98 	bl	8000ad0 <__aeabi_fsub>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7fd f951 	bl	8000e4c <__aeabi_fdiv>
 8003baa:	4603      	mov	r3, r0
 8003bac:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc ff8e 	bl	8000ad4 <__addsf3>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd f891 	bl	8000ce4 <__aeabi_fmul>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003bca:	f7fc ff81 	bl	8000ad0 <__aeabi_fsub>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	e002      	b.n	8003bda <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	372c      	adds	r7, #44	; 0x2c
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}

08003be4 <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b091      	sub	sp, #68	; 0x44
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c06:	f7fc ff63 	bl	8000ad0 <__aeabi_fsub>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003c0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c14:	f7fd f866 	bl	8000ce4 <__aeabi_fmul>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1e:	f7fd f861 	bl	8000ce4 <__aeabi_fmul>
 8003c22:	4603      	mov	r3, r0
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c2a:	f7fd f85b 	bl	8000ce4 <__aeabi_fmul>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fbda 	bl	80023ea <qFFMath_Sqrt>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c3c:	f7fc ff4a 	bl	8000ad4 <__addsf3>
 8003c40:	4603      	mov	r3, r0
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff26 	bl	8003aa2 <qFIS_SMF>
 8003c56:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8003c58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c5e:	f7fc ff37 	bl	8000ad0 <__aeabi_fsub>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd f83a 	bl	8000ce4 <__aeabi_fmul>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fbb9 	bl	80023ea <qFFMath_Sqrt>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c7e:	f7fc ff29 	bl	8000ad4 <__addsf3>
 8003c82:	4603      	mov	r3, r0
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff05 	bl	8003aa2 <qFIS_SMF>
 8003c98:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8003c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c9e:	f7fc ff17 	bl	8000ad0 <__aeabi_fsub>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fb8b 	bl	80023c0 <qFFMath_Abs>
 8003caa:	4604      	mov	r4, r0
 8003cac:	6a39      	ldr	r1, [r7, #32]
 8003cae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cb0:	f7fc ff0e 	bl	8000ad0 <__aeabi_fsub>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fb82 	bl	80023c0 <qFFMath_Abs>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7fd f9ad 	bl	8001020 <__aeabi_fcmplt>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <qFIS_TSMF+0xec>
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	e000      	b.n	8003cd2 <qFIS_TSMF+0xee>
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3744      	adds	r7, #68	; 0x44
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd90      	pop	{r4, r7, pc}

08003cda <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003cda:	b590      	push	{r4, r7, lr}
 8003cdc:	b08b      	sub	sp, #44	; 0x2c
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003cf8:	69f9      	ldr	r1, [r7, #28]
 8003cfa:	6a38      	ldr	r0, [r7, #32]
 8003cfc:	f7fd f99a 	bl	8001034 <__aeabi_fcmple>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <qFIS_ZMF+0x34>
        y = 1.0f;
 8003d06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	e081      	b.n	8003e12 <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 8003d0e:	69b9      	ldr	r1, [r7, #24]
 8003d10:	6a38      	ldr	r0, [r7, #32]
 8003d12:	f7fd f999 	bl	8001048 <__aeabi_fcmpge>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <qFIS_ZMF+0x4a>
        y = 0.0f;
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	e076      	b.n	8003e12 <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003d24:	69f9      	ldr	r1, [r7, #28]
 8003d26:	6a38      	ldr	r0, [r7, #32]
 8003d28:	f7fd f98e 	bl	8001048 <__aeabi_fcmpge>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d035      	beq.n	8003d9e <qFIS_ZMF+0xc4>
 8003d32:	69b9      	ldr	r1, [r7, #24]
 8003d34:	69f8      	ldr	r0, [r7, #28]
 8003d36:	f7fc fecd 	bl	8000ad4 <__addsf3>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc ffcf 	bl	8000ce4 <__aeabi_fmul>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6a38      	ldr	r0, [r7, #32]
 8003d4c:	f7fd f972 	bl	8001034 <__aeabi_fcmple>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 8003d56:	69f9      	ldr	r1, [r7, #28]
 8003d58:	6a38      	ldr	r0, [r7, #32]
 8003d5a:	f7fc feb9 	bl	8000ad0 <__aeabi_fsub>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461c      	mov	r4, r3
 8003d62:	69f9      	ldr	r1, [r7, #28]
 8003d64:	69b8      	ldr	r0, [r7, #24]
 8003d66:	f7fc feb3 	bl	8000ad0 <__aeabi_fsub>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f7fd f86c 	bl	8000e4c <__aeabi_fdiv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fea9 	bl	8000ad4 <__addsf3>
 8003d82:	4603      	mov	r3, r0
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc ffac 	bl	8000ce4 <__aeabi_fmul>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d94:	f7fc fe9c 	bl	8000ad0 <__aeabi_fsub>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	e039      	b.n	8003e12 <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003d9e:	69b9      	ldr	r1, [r7, #24]
 8003da0:	6a38      	ldr	r0, [r7, #32]
 8003da2:	f7fd f947 	bl	8001034 <__aeabi_fcmple>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02f      	beq.n	8003e0c <qFIS_ZMF+0x132>
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	69f8      	ldr	r0, [r7, #28]
 8003db0:	f7fc fe90 	bl	8000ad4 <__addsf3>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc ff92 	bl	8000ce4 <__aeabi_fmul>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6a38      	ldr	r0, [r7, #32]
 8003dc6:	f7fd f93f 	bl	8001048 <__aeabi_fcmpge>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01d      	beq.n	8003e0c <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	6a38      	ldr	r0, [r7, #32]
 8003dd4:	f7fc fe7c 	bl	8000ad0 <__aeabi_fsub>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461c      	mov	r4, r3
 8003ddc:	69f9      	ldr	r1, [r7, #28]
 8003dde:	69b8      	ldr	r0, [r7, #24]
 8003de0:	f7fc fe76 	bl	8000ad0 <__aeabi_fsub>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4619      	mov	r1, r3
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7fd f82f 	bl	8000e4c <__aeabi_fdiv>
 8003dee:	4603      	mov	r3, r0
 8003df0:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fe6c 	bl	8000ad4 <__addsf3>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6978      	ldr	r0, [r7, #20]
 8003e02:	f7fc ff6f 	bl	8000ce4 <__aeabi_fmul>
 8003e06:	4603      	mov	r3, r0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	e002      	b.n	8003e12 <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	372c      	adds	r7, #44	; 0x2c
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd90      	pop	{r4, r7, pc}

08003e1c <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8003e3a:	6939      	ldr	r1, [r7, #16]
 8003e3c:	6978      	ldr	r0, [r7, #20]
 8003e3e:	f7fd f8ef 	bl	8001020 <__aeabi_fcmplt>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d027      	beq.n	8003e98 <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	69b8      	ldr	r0, [r7, #24]
 8003e4c:	f7fd f8e8 	bl	8001020 <__aeabi_fcmplt>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <qFIS_LinSMF+0x42>
            y = 0.0f;
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e034      	b.n	8003ec8 <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 8003e5e:	6939      	ldr	r1, [r7, #16]
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f7fd f8fb 	bl	800105c <__aeabi_fcmpgt>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <qFIS_LinSMF+0x58>
            y = 1.0f;
 8003e6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	e029      	b.n	8003ec8 <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 8003e74:	6979      	ldr	r1, [r7, #20]
 8003e76:	69b8      	ldr	r0, [r7, #24]
 8003e78:	f7fc fe2a 	bl	8000ad0 <__aeabi_fsub>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461c      	mov	r4, r3
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	6938      	ldr	r0, [r7, #16]
 8003e84:	f7fc fe24 	bl	8000ad0 <__aeabi_fsub>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7fc ffdd 	bl	8000e4c <__aeabi_fdiv>
 8003e92:	4603      	mov	r3, r0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	e017      	b.n	8003ec8 <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8003e98:	6939      	ldr	r1, [r7, #16]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f000 fc11 	bl	80046c2 <qFMathEx_Equal>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	69b8      	ldr	r0, [r7, #24]
 8003eaa:	f7fd f8b9 	bl	8001020 <__aeabi_fcmplt>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <qFIS_LinSMF+0x9e>
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e001      	b.n	8003ebe <qFIS_LinSMF+0xa2>
 8003eba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e002      	b.n	8003ec8 <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd90      	pop	{r4, r7, pc}

08003ed2 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003ed2:	b590      	push	{r4, r7, lr}
 8003ed4:	b089      	sub	sp, #36	; 0x24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8003ef0:	6939      	ldr	r1, [r7, #16]
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f7fd f894 	bl	8001020 <__aeabi_fcmplt>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d027      	beq.n	8003f4e <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 8003efe:	6979      	ldr	r1, [r7, #20]
 8003f00:	69b8      	ldr	r0, [r7, #24]
 8003f02:	f7fd f88d 	bl	8001020 <__aeabi_fcmplt>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <qFIS_LinZMF+0x42>
            y = 1.0f;
 8003f0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e034      	b.n	8003f7e <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 8003f14:	6939      	ldr	r1, [r7, #16]
 8003f16:	69b8      	ldr	r0, [r7, #24]
 8003f18:	f7fd f8a0 	bl	800105c <__aeabi_fcmpgt>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <qFIS_LinZMF+0x58>
            y = 0.0f;
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e029      	b.n	8003f7e <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 8003f2a:	69b9      	ldr	r1, [r7, #24]
 8003f2c:	6978      	ldr	r0, [r7, #20]
 8003f2e:	f7fc fdcf 	bl	8000ad0 <__aeabi_fsub>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461c      	mov	r4, r3
 8003f36:	6939      	ldr	r1, [r7, #16]
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f7fc fdc9 	bl	8000ad0 <__aeabi_fsub>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4619      	mov	r1, r3
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7fc ff82 	bl	8000e4c <__aeabi_fdiv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e017      	b.n	8003f7e <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8003f4e:	6939      	ldr	r1, [r7, #16]
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f000 fbb6 	bl	80046c2 <qFMathEx_Equal>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	69b8      	ldr	r0, [r7, #24]
 8003f60:	f7fd f85e 	bl	8001020 <__aeabi_fcmplt>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <qFIS_LinZMF+0x9e>
 8003f6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f6e:	e001      	b.n	8003f74 <qFIS_LinZMF+0xa2>
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e002      	b.n	8003f7e <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3724      	adds	r7, #36	; 0x24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}

08003f88 <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b091      	sub	sp, #68	; 0x44
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fa8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003faa:	f7fc fd91 	bl	8000ad0 <__aeabi_fsub>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003fb2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb8:	f7fc fe94 	bl	8000ce4 <__aeabi_fmul>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fc2:	f7fc fe8f 	bl	8000ce4 <__aeabi_fmul>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 8003fca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003fce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fd0:	f7fc fd7e 	bl	8000ad0 <__aeabi_fsub>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fe81 	bl	8000ce4 <__aeabi_fmul>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe fa00 	bl	80023ea <qFFMath_Sqrt>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4619      	mov	r1, r3
 8003fee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ff0:	f7fc fd70 	bl	8000ad4 <__addsf3>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fd4c 	bl	8003aa2 <qFIS_SMF>
 800400a:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 800400c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004010:	f7fc fe68 	bl	8000ce4 <__aeabi_fmul>
 8004014:	4603      	mov	r3, r0
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe f9e7 	bl	80023ea <qFFMath_Sqrt>
 800401c:	4603      	mov	r3, r0
 800401e:	4619      	mov	r1, r3
 8004020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004022:	f7fc fd57 	bl	8000ad4 <__addsf3>
 8004026:	4603      	mov	r3, r0
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fd33 	bl	8003aa2 <qFIS_SMF>
 800403c:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 800403e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004040:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004042:	f7fc fd45 	bl	8000ad0 <__aeabi_fsub>
 8004046:	4603      	mov	r3, r0
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe f9b9 	bl	80023c0 <qFFMath_Abs>
 800404e:	4604      	mov	r4, r0
 8004050:	6a39      	ldr	r1, [r7, #32]
 8004052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004054:	f7fc fd3c 	bl	8000ad0 <__aeabi_fsub>
 8004058:	4603      	mov	r3, r0
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe f9b0 	bl	80023c0 <qFFMath_Abs>
 8004060:	4603      	mov	r3, r0
 8004062:	4619      	mov	r1, r3
 8004064:	4620      	mov	r0, r4
 8004066:	f7fc ffdb 	bl	8001020 <__aeabi_fcmplt>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <qFIS_TZMF+0xec>
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	e000      	b.n	8004076 <qFIS_TZMF+0xee>
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004076:	4618      	mov	r0, r3
 8004078:	3744      	adds	r7, #68	; 0x44
 800407a:	46bd      	mov	sp, r7
 800407c:	bd90      	pop	{r4, r7, pc}

0800407e <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 800407e:	b590      	push	{r4, r7, lr}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fd07 	bl	8003aa2 <qFIS_SMF>
 8004094:	4604      	mov	r4, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3308      	adds	r3, #8
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4619      	mov	r1, r3
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff fe1b 	bl	8003cda <qFIS_ZMF>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4619      	mov	r1, r3
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7fc fe1b 	bl	8000ce4 <__aeabi_fmul>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe f985 	bl	80023c0 <qFFMath_Abs>
 80040b6:	4603      	mov	r3, r0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd90      	pop	{r4, r7, pc}

080040c0 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4619      	mov	r1, r3
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f000 faf2 	bl	80046c2 <qFMathEx_Equal>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <qFIS_SingletonMF+0x2a>
 80040e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040e8:	e001      	b.n	80040ee <qFIS_SingletonMF+0x2e>
 80040ea:	f04f 0300 	mov.w	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 80040f6:	b590      	push	{r4, r7, lr}
 80040f8:	b089      	sub	sp, #36	; 0x24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8004114:	6939      	ldr	r1, [r7, #16]
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7fc ff8c 	bl	8001034 <__aeabi_fcmple>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d023      	beq.n	800416a <qFIS_ConcaveMF+0x74>
 8004122:	6939      	ldr	r1, [r7, #16]
 8004124:	69b8      	ldr	r0, [r7, #24]
 8004126:	f7fc ff7b 	bl	8001020 <__aeabi_fcmplt>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	6938      	ldr	r0, [r7, #16]
 8004134:	f7fc fccc 	bl	8000ad0 <__aeabi_fsub>
 8004138:	4603      	mov	r3, r0
 800413a:	461c      	mov	r4, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4619      	mov	r1, r3
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fcc7 	bl	8000ad4 <__addsf3>
 8004146:	4603      	mov	r3, r0
 8004148:	6979      	ldr	r1, [r7, #20]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fcc0 	bl	8000ad0 <__aeabi_fsub>
 8004150:	4603      	mov	r3, r0
 8004152:	69b9      	ldr	r1, [r7, #24]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc fcbb 	bl	8000ad0 <__aeabi_fsub>
 800415a:	4603      	mov	r3, r0
 800415c:	4619      	mov	r1, r3
 800415e:	4620      	mov	r0, r4
 8004160:	f7fc fe74 	bl	8000e4c <__aeabi_fdiv>
 8004164:	4603      	mov	r3, r0
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e02d      	b.n	80041c6 <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 800416a:	6939      	ldr	r1, [r7, #16]
 800416c:	6978      	ldr	r0, [r7, #20]
 800416e:	f7fc ff75 	bl	800105c <__aeabi_fcmpgt>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <qFIS_ConcaveMF+0xca>
 8004178:	6939      	ldr	r1, [r7, #16]
 800417a:	69b8      	ldr	r0, [r7, #24]
 800417c:	f7fc ff6e 	bl	800105c <__aeabi_fcmpgt>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01c      	beq.n	80041c0 <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 8004186:	6939      	ldr	r1, [r7, #16]
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f7fc fca1 	bl	8000ad0 <__aeabi_fsub>
 800418e:	4603      	mov	r3, r0
 8004190:	461c      	mov	r4, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4619      	mov	r1, r3
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fc9c 	bl	8000ad4 <__addsf3>
 800419c:	4603      	mov	r3, r0
 800419e:	4619      	mov	r1, r3
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f7fc fc95 	bl	8000ad0 <__aeabi_fsub>
 80041a6:	4603      	mov	r3, r0
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc fc92 	bl	8000ad4 <__addsf3>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4619      	mov	r1, r3
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7fc fe49 	bl	8000e4c <__aeabi_fdiv>
 80041ba:	4603      	mov	r3, r0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e002      	b.n	80041c6 <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 80041c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041c4:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80041c6:	69fb      	ldr	r3, [r7, #28]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3724      	adds	r7, #36	; 0x24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd90      	pop	{r4, r7, pc}

080041d0 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 80041e8:	6939      	ldr	r1, [r7, #16]
 80041ea:	6978      	ldr	r0, [r7, #20]
 80041ec:	f7fc fc70 	bl	8000ad0 <__aeabi_fsub>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461c      	mov	r4, r3
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ff7c 	bl	80040f6 <qFIS_ConcaveMF>
 80041fe:	4603      	mov	r3, r0
 8004200:	4619      	mov	r1, r3
 8004202:	4620      	mov	r0, r4
 8004204:	f7fc fe22 	bl	8000e4c <__aeabi_fdiv>
 8004208:	4603      	mov	r3, r0
 800420a:	461c      	mov	r4, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4619      	mov	r1, r3
 8004210:	4618      	mov	r0, r3
 8004212:	f7fc fc5f 	bl	8000ad4 <__addsf3>
 8004216:	4603      	mov	r3, r0
 8004218:	4619      	mov	r1, r3
 800421a:	4620      	mov	r0, r4
 800421c:	f7fc fc5a 	bl	8000ad4 <__addsf3>
 8004220:	4603      	mov	r3, r0
 8004222:	6979      	ldr	r1, [r7, #20]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc fc53 	bl	8000ad0 <__aeabi_fsub>
 800422a:	4603      	mov	r3, r0
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	69f8      	ldr	r0, [r7, #28]
 8004256:	f7fc fc3b 	bl	8000ad0 <__aeabi_fsub>
 800425a:	4603      	mov	r3, r0
 800425c:	490b      	ldr	r1, [pc, #44]	; (800428c <qFIS_SpikeMF+0x58>)
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc fd40 	bl	8000ce4 <__aeabi_fmul>
 8004264:	4603      	mov	r3, r0
 8004266:	69b9      	ldr	r1, [r7, #24]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc fdef 	bl	8000e4c <__aeabi_fdiv>
 800426e:	4603      	mov	r3, r0
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe f8a5 	bl	80023c0 <qFFMath_Abs>
 8004276:	4603      	mov	r3, r0
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fa29 	bl	80026d4 <qFFMath_Exp>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	41200000 	.word	0x41200000

08004290 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 80042ae:	69b9      	ldr	r1, [r7, #24]
 80042b0:	6978      	ldr	r0, [r7, #20]
 80042b2:	f7fc fc0d 	bl	8000ad0 <__aeabi_fsub>
 80042b6:	4603      	mov	r3, r0
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc fd12 	bl	8000ce4 <__aeabi_fmul>
 80042c0:	4603      	mov	r3, r0
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc fc05 	bl	8000ad4 <__addsf3>
 80042ca:	4603      	mov	r3, r0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	69b8      	ldr	r0, [r7, #24]
 80042f6:	f7fc fbeb 	bl	8000ad0 <__aeabi_fsub>
 80042fa:	4603      	mov	r3, r0
 80042fc:	69f9      	ldr	r1, [r7, #28]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc fcf0 	bl	8000ce4 <__aeabi_fmul>
 8004304:	4603      	mov	r3, r0
 8004306:	4619      	mov	r1, r3
 8004308:	69b8      	ldr	r0, [r7, #24]
 800430a:	f7fc fbe1 	bl	8000ad0 <__aeabi_fsub>
 800430e:	4603      	mov	r3, r0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	69f8      	ldr	r0, [r7, #28]
 800433a:	f7fc fe85 	bl	8001048 <__aeabi_fcmpge>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <qFIS_RectangleMF+0x40>
 8004344:	6979      	ldr	r1, [r7, #20]
 8004346:	69f8      	ldr	r0, [r7, #28]
 8004348:	f7fc fe74 	bl	8001034 <__aeabi_fcmple>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <qFIS_RectangleMF+0x40>
 8004352:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004356:	e001      	b.n	800435c <qFIS_RectangleMF+0x44>
 8004358:	f04f 0300 	mov.w	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004368:	b08a      	sub	sp, #40	; 0x28
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <qFIS_CosineMF+0xec>)
 800437a:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 8004388:	6a38      	ldr	r0, [r7, #32]
 800438a:	f7fc f845 	bl	8000418 <__aeabi_f2d>
 800438e:	4604      	mov	r4, r0
 8004390:	460d      	mov	r5, r1
 8004392:	69b8      	ldr	r0, [r7, #24]
 8004394:	f7fc f840 	bl	8000418 <__aeabi_f2d>
 8004398:	4680      	mov	r8, r0
 800439a:	4689      	mov	r9, r1
 800439c:	6978      	ldr	r0, [r7, #20]
 800439e:	f7fc f83b 	bl	8000418 <__aeabi_f2d>
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <qFIS_CosineMF+0xf0>)
 80043a8:	f7fc f88e 	bl	80004c8 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4640      	mov	r0, r8
 80043b2:	4649      	mov	r1, r9
 80043b4:	f7fb fed0 	bl	8000158 <__aeabi_dsub>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4620      	mov	r0, r4
 80043be:	4629      	mov	r1, r5
 80043c0:	f7fc faf4 	bl	80009ac <__aeabi_dcmplt>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d111      	bne.n	80043ee <qFIS_CosineMF+0x8a>
 80043ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f7fc fc88 	bl	8000ce4 <__aeabi_fmul>
 80043d4:	4603      	mov	r3, r0
 80043d6:	69b9      	ldr	r1, [r7, #24]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc fb7b 	bl	8000ad4 <__addsf3>
 80043de:	4603      	mov	r3, r0
 80043e0:	4619      	mov	r1, r3
 80043e2:	6a38      	ldr	r0, [r7, #32]
 80043e4:	f7fc fe3a 	bl	800105c <__aeabi_fcmpgt>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <qFIS_CosineMF+0x92>
        y = 0.0f;
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	e026      	b.n	8004444 <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80043fc:	f7fc fd26 	bl	8000e4c <__aeabi_fdiv>
 8004400:	4603      	mov	r3, r0
 8004402:	69f9      	ldr	r1, [r7, #28]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc fc6d 	bl	8000ce4 <__aeabi_fmul>
 800440a:	4603      	mov	r3, r0
 800440c:	461c      	mov	r4, r3
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	6a38      	ldr	r0, [r7, #32]
 8004412:	f7fc fb5d 	bl	8000ad0 <__aeabi_fsub>
 8004416:	4603      	mov	r3, r0
 8004418:	4619      	mov	r1, r3
 800441a:	4620      	mov	r0, r4
 800441c:	f7fc fc62 	bl	8000ce4 <__aeabi_fmul>
 8004420:	4603      	mov	r3, r0
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe f872 	bl	800250c <qFFMath_Cos>
 8004428:	4603      	mov	r3, r0
 800442a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc fb50 	bl	8000ad4 <__addsf3>
 8004434:	4603      	mov	r3, r0
 8004436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800443a:	4618      	mov	r0, r3
 800443c:	f7fc fc52 	bl	8000ce4 <__aeabi_fmul>
 8004440:	4603      	mov	r3, r0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004446:	4618      	mov	r0, r3
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004450:	40490fdb 	.word	0x40490fdb
 8004454:	3fe00000 	.word	0x3fe00000

08004458 <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e01a      	b.n	80044c0 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4613      	mov	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	461a      	mov	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	6898      	ldr	r0, [r3, #8]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	4413      	add	r3, r2
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7fc fc1c 	bl	8000ce4 <__aeabi_fmul>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4619      	mov	r1, r3
 80044b0:	6978      	ldr	r0, [r7, #20]
 80044b2:	f7fc fb0f 	bl	8000ad4 <__addsf3>
 80044b6:	4603      	mov	r3, r0
 80044b8:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3301      	adds	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3e0      	bcc.n	800448a <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	4413      	add	r3, r2
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4619      	mov	r1, r3
 80044d4:	6978      	ldr	r0, [r7, #20]
 80044d6:	f7fc fafd 	bl	8000ad4 <__addsf3>
 80044da:	4603      	mov	r3, r0
 80044dc:	617b      	str	r3, [r7, #20]

    return px;
 80044de:	697b      	ldr	r3, [r7, #20]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc fd93 	bl	8001020 <__aeabi_fcmplt>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <qFIS_Min+0x1c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	e000      	b.n	8004506 <qFIS_Min+0x1e>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f86d 	bl	80045ee <qFIS_Bound>
 8004514:	4603      	mov	r3, r0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fd96 	bl	800105c <__aeabi_fcmpgt>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <qFIS_Max+0x1c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	e000      	b.n	800453c <qFIS_Max+0x1e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f852 	bl	80045ee <qFIS_Bound>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc fbbf 	bl	8000ce4 <__aeabi_fmul>
 8004566:	4603      	mov	r3, r0
 8004568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f83c 	bl	80045ee <qFIS_Bound>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fc faa1 	bl	8000ad4 <__addsf3>
 8004592:	4603      	mov	r3, r0
 8004594:	461c      	mov	r4, r3
 8004596:	6839      	ldr	r1, [r7, #0]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc fba3 	bl	8000ce4 <__aeabi_fmul>
 800459e:	4603      	mov	r3, r0
 80045a0:	4619      	mov	r1, r3
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7fc fa94 	bl	8000ad0 <__aeabi_fsub>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f81b 	bl	80045ee <qFIS_Bound>
 80045b8:	4603      	mov	r3, r0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}

080045c2 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fa80 	bl	8000ad4 <__addsf3>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045da:	f04f 0100 	mov.w	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f805 	bl	80045ee <qFIS_Bound>
 80045e4:	4603      	mov	r3, r0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f805 	bl	8004612 <qFMathEx_InRangeCoerce>

    return y;
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd feb9 	bl	800239e <qFFMath_IsNaN>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e01b      	b.n	8004672 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f7fc fd0b 	bl	800105c <__aeabi_fcmpgt>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00e      	b.n	8004672 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc fce0 	bl	8001020 <__aeabi_fcmplt>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e001      	b.n	8004672 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 800467c:	b5b0      	push	{r4, r5, r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7fc fa20 	bl	8000ad0 <__aeabi_fsub>
 8004690:	4603      	mov	r3, r0
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fe94 	bl	80023c0 <qFFMath_Abs>
 8004698:	4605      	mov	r5, r0
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fe90 	bl	80023c0 <qFFMath_Abs>
 80046a0:	4602      	mov	r2, r0
 80046a2:	2301      	movs	r3, #1
 80046a4:	461c      	mov	r4, r3
 80046a6:	4611      	mov	r1, r2
 80046a8:	4628      	mov	r0, r5
 80046aa:	f7fc fcc3 	bl	8001034 <__aeabi_fcmple>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <qFMathEx_AlmostEqual+0x3c>
 80046b4:	2300      	movs	r3, #0
 80046b6:	461c      	mov	r4, r3
 80046b8:	b2e3      	uxtb	r3, r4
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bdb0      	pop	{r4, r5, r7, pc}

080046c2 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 80046cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ffd2 	bl	800467c <qFMathEx_AlmostEqual>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_MspInit+0x5c>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	4a14      	ldr	r2, [pc, #80]	; (8004740 <HAL_MspInit+0x5c>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6193      	str	r3, [r2, #24]
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_MspInit+0x5c>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_MspInit+0x5c>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_MspInit+0x5c>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470c:	61d3      	str	r3, [r2, #28]
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_MspInit+0x5c>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_MspInit+0x60>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	4a04      	ldr	r2, [pc, #16]	; (8004744 <HAL_MspInit+0x60>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40021000 	.word	0x40021000
 8004744:	40010000 	.word	0x40010000

08004748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d132      	bne.n	80047ce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_I2C_MspInit+0x94>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_I2C_MspInit+0x94>)
 800476e:	f043 0308 	orr.w	r3, r3, #8
 8004772:	6193      	str	r3, [r2, #24]
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_I2C_MspInit+0x94>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004780:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004786:	2312      	movs	r3, #18
 8004788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800478a:	2303      	movs	r3, #3
 800478c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4619      	mov	r1, r3
 8004794:	4812      	ldr	r0, [pc, #72]	; (80047e0 <HAL_I2C_MspInit+0x98>)
 8004796:	f000 fbc1 	bl	8004f1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_I2C_MspInit+0x9c>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <HAL_I2C_MspInit+0x9c>)
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_I2C_MspInit+0x94>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4a08      	ldr	r2, [pc, #32]	; (80047dc <HAL_I2C_MspInit+0x94>)
 80047bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047c0:	61d3      	str	r3, [r2, #28]
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_I2C_MspInit+0x94>)
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80047ce:	bf00      	nop
 80047d0:	3728      	adds	r7, #40	; 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40005400 	.word	0x40005400
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40010c00 	.word	0x40010c00
 80047e4:	40010000 	.word	0x40010000

080047e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <HAL_TIM_Base_MspInit+0x44>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d113      	bne.n	8004822 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_TIM_Base_MspInit+0x48>)
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <HAL_TIM_Base_MspInit+0x48>)
 8004800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004804:	6193      	str	r3, [r2, #24]
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_TIM_Base_MspInit+0x48>)
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	2019      	movs	r0, #25
 8004818:	f000 fa99 	bl	8004d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800481c:	2019      	movs	r0, #25
 800481e:	f000 fab2 	bl	8004d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a12      	ldr	r2, [pc, #72]	; (800488c <HAL_TIM_PWM_MspInit+0x58>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10c      	bne.n	8004860 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <HAL_TIM_PWM_MspInit+0x5c>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <HAL_TIM_PWM_MspInit+0x5c>)
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	61d3      	str	r3, [r2, #28]
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_TIM_PWM_MspInit+0x5c>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800485e:	e010      	b.n	8004882 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <HAL_TIM_PWM_MspInit+0x60>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10b      	bne.n	8004882 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_TIM_PWM_MspInit+0x5c>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <HAL_TIM_PWM_MspInit+0x5c>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	61d3      	str	r3, [r2, #28]
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_TIM_PWM_MspInit+0x5c>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	40000400 	.word	0x40000400
 8004890:	40021000 	.word	0x40021000
 8004894:	40000800 	.word	0x40000800

08004898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a0:	f107 0314 	add.w	r3, r7, #20
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a27      	ldr	r2, [pc, #156]	; (8004950 <HAL_TIM_MspPostInit+0xb8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d12a      	bne.n	800490e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_TIM_MspPostInit+0xbc>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4a25      	ldr	r2, [pc, #148]	; (8004954 <HAL_TIM_MspPostInit+0xbc>)
 80048be:	f043 0308 	orr.w	r3, r3, #8
 80048c2:	6193      	str	r3, [r2, #24]
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <HAL_TIM_MspPostInit+0xbc>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80048d0:	2330      	movs	r3, #48	; 0x30
 80048d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d4:	2302      	movs	r3, #2
 80048d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d8:	2302      	movs	r3, #2
 80048da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	4619      	mov	r1, r3
 80048e2:	481d      	ldr	r0, [pc, #116]	; (8004958 <HAL_TIM_MspPostInit+0xc0>)
 80048e4:	f000 fb1a 	bl	8004f1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80048e8:	4b1c      	ldr	r3, [pc, #112]	; (800495c <HAL_TIM_MspPostInit+0xc4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <HAL_TIM_MspPostInit+0xc4>)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800490c:	e01c      	b.n	8004948 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <HAL_TIM_MspPostInit+0xc8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d117      	bne.n	8004948 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <HAL_TIM_MspPostInit+0xbc>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <HAL_TIM_MspPostInit+0xbc>)
 800491e:	f043 0308 	orr.w	r3, r3, #8
 8004922:	6193      	str	r3, [r2, #24]
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_TIM_MspPostInit+0xbc>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004930:	23c0      	movs	r3, #192	; 0xc0
 8004932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004938:	2302      	movs	r3, #2
 800493a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4619      	mov	r1, r3
 8004942:	4805      	ldr	r0, [pc, #20]	; (8004958 <HAL_TIM_MspPostInit+0xc0>)
 8004944:	f000 faea 	bl	8004f1c <HAL_GPIO_Init>
}
 8004948:	bf00      	nop
 800494a:	3728      	adds	r7, #40	; 0x28
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40000400 	.word	0x40000400
 8004954:	40021000 	.word	0x40021000
 8004958:	40010c00 	.word	0x40010c00
 800495c:	40010000 	.word	0x40010000
 8004960:	40000800 	.word	0x40000800

08004964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800496c:	f107 0310 	add.w	r3, r7, #16
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <HAL_UART_MspInit+0x9c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d139      	bne.n	80049f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <HAL_UART_MspInit+0xa0>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <HAL_UART_MspInit+0xa0>)
 800498a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800498e:	6193      	str	r3, [r2, #24]
 8004990:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <HAL_UART_MspInit+0xa0>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_UART_MspInit+0xa0>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_UART_MspInit+0xa0>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	6193      	str	r3, [r2, #24]
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <HAL_UART_MspInit+0xa0>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ba:	2302      	movs	r3, #2
 80049bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049be:	2303      	movs	r3, #3
 80049c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c2:	f107 0310 	add.w	r3, r7, #16
 80049c6:	4619      	mov	r1, r3
 80049c8:	480f      	ldr	r0, [pc, #60]	; (8004a08 <HAL_UART_MspInit+0xa4>)
 80049ca:	f000 faa7 	bl	8004f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	4619      	mov	r1, r3
 80049e2:	4809      	ldr	r0, [pc, #36]	; (8004a08 <HAL_UART_MspInit+0xa4>)
 80049e4:	f000 fa9a 	bl	8004f1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	2100      	movs	r1, #0
 80049ec:	2025      	movs	r0, #37	; 0x25
 80049ee:	f000 f9ae 	bl	8004d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049f2:	2025      	movs	r0, #37	; 0x25
 80049f4:	f000 f9c7 	bl	8004d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049f8:	bf00      	nop
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40013800 	.word	0x40013800
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40010800 	.word	0x40010800

08004a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a10:	e7fe      	b.n	8004a10 <NMI_Handler+0x4>

08004a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a16:	e7fe      	b.n	8004a16 <HardFault_Handler+0x4>

08004a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a1c:	e7fe      	b.n	8004a1c <MemManage_Handler+0x4>

08004a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a22:	e7fe      	b.n	8004a22 <BusFault_Handler+0x4>

08004a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a28:	e7fe      	b.n	8004a28 <UsageFault_Handler+0x4>

08004a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr

08004a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a52:	f000 f889 	bl	8004b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <TIM1_UP_IRQHandler+0x10>)
 8004a62:	f002 f96b 	bl	8006d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000540 	.word	0x20000540

08004a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <USART1_IRQHandler+0x10>)
 8004a76:	f002 ff95 	bl	80079a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200004f0 	.word	0x200004f0

08004a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a92:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a94:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a98:	e002      	b.n	8004aa0 <LoopCopyDataInit>

08004a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a9e:	3304      	adds	r3, #4

08004aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa4:	d3f9      	bcc.n	8004a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004aa8:	4c0a      	ldr	r4, [pc, #40]	; (8004ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aac:	e001      	b.n	8004ab2 <LoopFillZerobss>

08004aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ab0:	3204      	adds	r2, #4

08004ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab4:	d3fb      	bcc.n	8004aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ab6:	f7ff ffe5 	bl	8004a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aba:	f003 fb59 	bl	8008170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004abe:	f7fc fc9b 	bl	80013f8 <main>
  bx lr
 8004ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8004ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac8:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8004acc:	08008c00 	.word	0x08008c00
  ldr r2, =_sbss
 8004ad0:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8004ad4:	20000590 	.word	0x20000590

08004ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ad8:	e7fe      	b.n	8004ad8 <ADC1_2_IRQHandler>
	...

08004adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_Init+0x28>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_Init+0x28>)
 8004ae6:	f043 0310 	orr.w	r3, r3, #16
 8004aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aec:	2003      	movs	r0, #3
 8004aee:	f000 f923 	bl	8004d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f000 f808 	bl	8004b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004af8:	f7ff fdf4 	bl	80046e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40022000 	.word	0x40022000

08004b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_InitTick+0x54>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <HAL_InitTick+0x58>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f93b 	bl	8004da2 <HAL_SYSTICK_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e00e      	b.n	8004b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d80a      	bhi.n	8004b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	f000 f903 	bl	8004d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b48:	4a06      	ldr	r2, [pc, #24]	; (8004b64 <HAL_InitTick+0x5c>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200000ac 	.word	0x200000ac
 8004b60:	200000b4 	.word	0x200000b4
 8004b64:	200000b0 	.word	0x200000b0

08004b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_IncTick+0x1c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_IncTick+0x20>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4413      	add	r3, r2
 8004b78:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <HAL_IncTick+0x20>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	200000b4 	.word	0x200000b4
 8004b88:	2000058c 	.word	0x2000058c

08004b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b90:	4b02      	ldr	r3, [pc, #8]	; (8004b9c <HAL_GetTick+0x10>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	2000058c 	.word	0x2000058c

08004ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bd2:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60d3      	str	r3, [r2, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <__NVIC_GetPriorityGrouping+0x18>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0307 	and.w	r3, r3, #7
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	db0b      	blt.n	8004c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	f003 021f 	and.w	r2, r3, #31
 8004c1c:	4906      	ldr	r1, [pc, #24]	; (8004c38 <__NVIC_EnableIRQ+0x34>)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2001      	movs	r0, #1
 8004c26:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	e000e100 	.word	0xe000e100

08004c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db0a      	blt.n	8004c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	490c      	ldr	r1, [pc, #48]	; (8004c88 <__NVIC_SetPriority+0x4c>)
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c64:	e00a      	b.n	8004c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	4908      	ldr	r1, [pc, #32]	; (8004c8c <__NVIC_SetPriority+0x50>)
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	3b04      	subs	r3, #4
 8004c74:	0112      	lsls	r2, r2, #4
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	440b      	add	r3, r1
 8004c7a:	761a      	strb	r2, [r3, #24]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	e000e100 	.word	0xe000e100
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b089      	sub	sp, #36	; 0x24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f1c3 0307 	rsb	r3, r3, #7
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	bf28      	it	cs
 8004cae:	2304      	movcs	r3, #4
 8004cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d902      	bls.n	8004cc0 <NVIC_EncodePriority+0x30>
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3b03      	subs	r3, #3
 8004cbe:	e000      	b.n	8004cc2 <NVIC_EncodePriority+0x32>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	43d9      	mvns	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce8:	4313      	orrs	r3, r2
         );
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3724      	adds	r7, #36	; 0x24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d04:	d301      	bcc.n	8004d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00f      	b.n	8004d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <SysTick_Config+0x40>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d12:	210f      	movs	r1, #15
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	f7ff ff90 	bl	8004c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <SysTick_Config+0x40>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d22:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <SysTick_Config+0x40>)
 8004d24:	2207      	movs	r2, #7
 8004d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	e000e010 	.word	0xe000e010

08004d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff2d 	bl	8004ba0 <__NVIC_SetPriorityGrouping>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	4603      	mov	r3, r0
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d60:	f7ff ff42 	bl	8004be8 <__NVIC_GetPriorityGrouping>
 8004d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7ff ff90 	bl	8004c90 <NVIC_EncodePriority>
 8004d70:	4602      	mov	r2, r0
 8004d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff5f 	bl	8004c3c <__NVIC_SetPriority>
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff35 	bl	8004c04 <__NVIC_EnableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ffa2 	bl	8004cf4 <SysTick_Config>
 8004db0:	4603      	mov	r3, r0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d008      	beq.n	8004de2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e020      	b.n	8004e24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 020e 	bic.w	r2, r2, #14
 8004df0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d005      	beq.n	8004e52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	e051      	b.n	8004ef6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 020e 	bic.w	r2, r2, #14
 8004e60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <HAL_DMA_Abort_IT+0xd0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d029      	beq.n	8004ed0 <HAL_DMA_Abort_IT+0xa0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <HAL_DMA_Abort_IT+0xd4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_Abort_IT+0x9c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_DMA_Abort_IT+0xd8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01a      	beq.n	8004ec6 <HAL_DMA_Abort_IT+0x96>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <HAL_DMA_Abort_IT+0xdc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d012      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0x90>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <HAL_DMA_Abort_IT+0xe0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00a      	beq.n	8004eba <HAL_DMA_Abort_IT+0x8a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <HAL_DMA_Abort_IT+0xe4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d102      	bne.n	8004eb4 <HAL_DMA_Abort_IT+0x84>
 8004eae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eb2:	e00e      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xa2>
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb8:	e00b      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xa2>
 8004eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ebe:	e008      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xa2>
 8004ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ec4:	e005      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xa2>
 8004ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eca:	e002      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xa2>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	e000      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xa2>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4a11      	ldr	r2, [pc, #68]	; (8004f18 <HAL_DMA_Abort_IT+0xe8>)
 8004ed4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
    } 
  }
  return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40020008 	.word	0x40020008
 8004f04:	4002001c 	.word	0x4002001c
 8004f08:	40020030 	.word	0x40020030
 8004f0c:	40020044 	.word	0x40020044
 8004f10:	40020058 	.word	0x40020058
 8004f14:	4002006c 	.word	0x4002006c
 8004f18:	40020000 	.word	0x40020000

08004f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b08b      	sub	sp, #44	; 0x2c
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f26:	2300      	movs	r3, #0
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f2e:	e127      	b.n	8005180 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f30:	2201      	movs	r2, #1
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	f040 8116 	bne.w	800517a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b12      	cmp	r3, #18
 8004f54:	d034      	beq.n	8004fc0 <HAL_GPIO_Init+0xa4>
 8004f56:	2b12      	cmp	r3, #18
 8004f58:	d80d      	bhi.n	8004f76 <HAL_GPIO_Init+0x5a>
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d02b      	beq.n	8004fb6 <HAL_GPIO_Init+0x9a>
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d804      	bhi.n	8004f6c <HAL_GPIO_Init+0x50>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d031      	beq.n	8004fca <HAL_GPIO_Init+0xae>
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d01c      	beq.n	8004fa4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f6a:	e048      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d043      	beq.n	8004ff8 <HAL_GPIO_Init+0xdc>
 8004f70:	2b11      	cmp	r3, #17
 8004f72:	d01b      	beq.n	8004fac <HAL_GPIO_Init+0x90>
          break;
 8004f74:	e043      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004f76:	4a89      	ldr	r2, [pc, #548]	; (800519c <HAL_GPIO_Init+0x280>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d026      	beq.n	8004fca <HAL_GPIO_Init+0xae>
 8004f7c:	4a87      	ldr	r2, [pc, #540]	; (800519c <HAL_GPIO_Init+0x280>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d806      	bhi.n	8004f90 <HAL_GPIO_Init+0x74>
 8004f82:	4a87      	ldr	r2, [pc, #540]	; (80051a0 <HAL_GPIO_Init+0x284>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d020      	beq.n	8004fca <HAL_GPIO_Init+0xae>
 8004f88:	4a86      	ldr	r2, [pc, #536]	; (80051a4 <HAL_GPIO_Init+0x288>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01d      	beq.n	8004fca <HAL_GPIO_Init+0xae>
          break;
 8004f8e:	e036      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004f90:	4a85      	ldr	r2, [pc, #532]	; (80051a8 <HAL_GPIO_Init+0x28c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d019      	beq.n	8004fca <HAL_GPIO_Init+0xae>
 8004f96:	4a85      	ldr	r2, [pc, #532]	; (80051ac <HAL_GPIO_Init+0x290>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d016      	beq.n	8004fca <HAL_GPIO_Init+0xae>
 8004f9c:	4a84      	ldr	r2, [pc, #528]	; (80051b0 <HAL_GPIO_Init+0x294>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_GPIO_Init+0xae>
          break;
 8004fa2:	e02c      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	623b      	str	r3, [r7, #32]
          break;
 8004faa:	e028      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	623b      	str	r3, [r7, #32]
          break;
 8004fb4:	e023      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	623b      	str	r3, [r7, #32]
          break;
 8004fbe:	e01e      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	623b      	str	r3, [r7, #32]
          break;
 8004fc8:	e019      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	623b      	str	r3, [r7, #32]
          break;
 8004fd6:	e012      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	611a      	str	r2, [r3, #16]
          break;
 8004fea:	e008      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fec:	2308      	movs	r3, #8
 8004fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	615a      	str	r2, [r3, #20]
          break;
 8004ff6:	e002      	b.n	8004ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	623b      	str	r3, [r7, #32]
          break;
 8004ffc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2bff      	cmp	r3, #255	; 0xff
 8005002:	d801      	bhi.n	8005008 <HAL_GPIO_Init+0xec>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	e001      	b.n	800500c <HAL_GPIO_Init+0xf0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2bff      	cmp	r3, #255	; 0xff
 8005012:	d802      	bhi.n	800501a <HAL_GPIO_Init+0xfe>
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	e002      	b.n	8005020 <HAL_GPIO_Init+0x104>
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	3b08      	subs	r3, #8
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	210f      	movs	r1, #15
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	fa01 f303 	lsl.w	r3, r1, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	401a      	ands	r2, r3
 8005032:	6a39      	ldr	r1, [r7, #32]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	431a      	orrs	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8096 	beq.w	800517a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800504e:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <HAL_GPIO_Init+0x298>)
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4a58      	ldr	r2, [pc, #352]	; (80051b4 <HAL_GPIO_Init+0x298>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	6193      	str	r3, [r2, #24]
 800505a:	4b56      	ldr	r3, [pc, #344]	; (80051b4 <HAL_GPIO_Init+0x298>)
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005066:	4a54      	ldr	r2, [pc, #336]	; (80051b8 <HAL_GPIO_Init+0x29c>)
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	3302      	adds	r3, #2
 800506e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005072:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	220f      	movs	r2, #15
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4013      	ands	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_GPIO_Init+0x2a0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_GPIO_Init+0x19e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_GPIO_Init+0x2a4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00d      	beq.n	80050b6 <HAL_GPIO_Init+0x19a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a49      	ldr	r2, [pc, #292]	; (80051c4 <HAL_GPIO_Init+0x2a8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <HAL_GPIO_Init+0x196>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a48      	ldr	r2, [pc, #288]	; (80051c8 <HAL_GPIO_Init+0x2ac>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d101      	bne.n	80050ae <HAL_GPIO_Init+0x192>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e006      	b.n	80050bc <HAL_GPIO_Init+0x1a0>
 80050ae:	2304      	movs	r3, #4
 80050b0:	e004      	b.n	80050bc <HAL_GPIO_Init+0x1a0>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e002      	b.n	80050bc <HAL_GPIO_Init+0x1a0>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_GPIO_Init+0x1a0>
 80050ba:	2300      	movs	r3, #0
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	f002 0203 	and.w	r2, r2, #3
 80050c2:	0092      	lsls	r2, r2, #2
 80050c4:	4093      	lsls	r3, r2
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050cc:	493a      	ldr	r1, [pc, #232]	; (80051b8 <HAL_GPIO_Init+0x29c>)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	3302      	adds	r3, #2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4938      	ldr	r1, [pc, #224]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
 80050f2:	e006      	b.n	8005102 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050f4:	4b35      	ldr	r3, [pc, #212]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	4933      	ldr	r1, [pc, #204]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 80050fe:	4013      	ands	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	492e      	ldr	r1, [pc, #184]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	604b      	str	r3, [r1, #4]
 800511a:	e006      	b.n	800512a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800511c:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	43db      	mvns	r3, r3
 8005124:	4929      	ldr	r1, [pc, #164]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005126:	4013      	ands	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	4924      	ldr	r1, [pc, #144]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
 8005142:	e006      	b.n	8005152 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	43db      	mvns	r3, r3
 800514c:	491f      	ldr	r1, [pc, #124]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 800514e:	4013      	ands	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	491a      	ldr	r1, [pc, #104]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	60cb      	str	r3, [r1, #12]
 800516a:	e006      	b.n	800517a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800516c:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	43db      	mvns	r3, r3
 8005174:	4915      	ldr	r1, [pc, #84]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 8005176:	4013      	ands	r3, r2
 8005178:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	f47f aed0 	bne.w	8004f30 <HAL_GPIO_Init+0x14>
  }
}
 8005190:	bf00      	nop
 8005192:	372c      	adds	r7, #44	; 0x2c
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	10210000 	.word	0x10210000
 80051a0:	10110000 	.word	0x10110000
 80051a4:	10120000 	.word	0x10120000
 80051a8:	10310000 	.word	0x10310000
 80051ac:	10320000 	.word	0x10320000
 80051b0:	10220000 	.word	0x10220000
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40010800 	.word	0x40010800
 80051c0:	40010c00 	.word	0x40010c00
 80051c4:	40011000 	.word	0x40011000
 80051c8:	40011400 	.word	0x40011400
 80051cc:	40010400 	.word	0x40010400

080051d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051e0:	787b      	ldrb	r3, [r7, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051ec:	e003      	b.n	80051f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	041a      	lsls	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	611a      	str	r2, [r3, #16]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e11f      	b.n	8005452 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fa8e 	bl	8004748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005264:	f001 fb90 	bl	8006988 <HAL_RCC_GetPCLK1Freq>
 8005268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4a7b      	ldr	r2, [pc, #492]	; (800545c <HAL_I2C_Init+0x25c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d807      	bhi.n	8005284 <HAL_I2C_Init+0x84>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a7a      	ldr	r2, [pc, #488]	; (8005460 <HAL_I2C_Init+0x260>)
 8005278:	4293      	cmp	r3, r2
 800527a:	bf94      	ite	ls
 800527c:	2301      	movls	r3, #1
 800527e:	2300      	movhi	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e006      	b.n	8005292 <HAL_I2C_Init+0x92>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a77      	ldr	r2, [pc, #476]	; (8005464 <HAL_I2C_Init+0x264>)
 8005288:	4293      	cmp	r3, r2
 800528a:	bf94      	ite	ls
 800528c:	2301      	movls	r3, #1
 800528e:	2300      	movhi	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e0db      	b.n	8005452 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a72      	ldr	r2, [pc, #456]	; (8005468 <HAL_I2C_Init+0x268>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0c9b      	lsrs	r3, r3, #18
 80052a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a64      	ldr	r2, [pc, #400]	; (800545c <HAL_I2C_Init+0x25c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d802      	bhi.n	80052d4 <HAL_I2C_Init+0xd4>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3301      	adds	r3, #1
 80052d2:	e009      	b.n	80052e8 <HAL_I2C_Init+0xe8>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	4a63      	ldr	r2, [pc, #396]	; (800546c <HAL_I2C_Init+0x26c>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	3301      	adds	r3, #1
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4956      	ldr	r1, [pc, #344]	; (800545c <HAL_I2C_Init+0x25c>)
 8005304:	428b      	cmp	r3, r1
 8005306:	d80d      	bhi.n	8005324 <HAL_I2C_Init+0x124>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1e59      	subs	r1, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	fbb1 f3f3 	udiv	r3, r1, r3
 8005316:	3301      	adds	r3, #1
 8005318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531c:	2b04      	cmp	r3, #4
 800531e:	bf38      	it	cc
 8005320:	2304      	movcc	r3, #4
 8005322:	e04f      	b.n	80053c4 <HAL_I2C_Init+0x1c4>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d111      	bne.n	8005350 <HAL_I2C_Init+0x150>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1e58      	subs	r0, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	440b      	add	r3, r1
 800533a:	fbb0 f3f3 	udiv	r3, r0, r3
 800533e:	3301      	adds	r3, #1
 8005340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e012      	b.n	8005376 <HAL_I2C_Init+0x176>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e58      	subs	r0, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	0099      	lsls	r1, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	fbb0 f3f3 	udiv	r3, r0, r3
 8005366:	3301      	adds	r3, #1
 8005368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Init+0x17e>
 800537a:	2301      	movs	r3, #1
 800537c:	e022      	b.n	80053c4 <HAL_I2C_Init+0x1c4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10e      	bne.n	80053a4 <HAL_I2C_Init+0x1a4>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1e58      	subs	r0, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	440b      	add	r3, r1
 8005394:	fbb0 f3f3 	udiv	r3, r0, r3
 8005398:	3301      	adds	r3, #1
 800539a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a2:	e00f      	b.n	80053c4 <HAL_I2C_Init+0x1c4>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1e58      	subs	r0, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	0099      	lsls	r1, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ba:	3301      	adds	r3, #1
 80053bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	6809      	ldr	r1, [r1, #0]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6911      	ldr	r1, [r2, #16]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68d2      	ldr	r2, [r2, #12]
 80053fe:	4311      	orrs	r1, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	430b      	orrs	r3, r1
 8005406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	000186a0 	.word	0x000186a0
 8005460:	001e847f 	.word	0x001e847f
 8005464:	003d08ff 	.word	0x003d08ff
 8005468:	431bde83 	.word	0x431bde83
 800546c:	10624dd3 	.word	0x10624dd3

08005470 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4603      	mov	r3, r0
 8005480:	817b      	strh	r3, [r7, #10]
 8005482:	460b      	mov	r3, r1
 8005484:	813b      	strh	r3, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800548a:	f7ff fb7f 	bl	8004b8c <HAL_GetTick>
 800548e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b20      	cmp	r3, #32
 800549a:	f040 80d9 	bne.w	8005650 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	2319      	movs	r3, #25
 80054a4:	2201      	movs	r2, #1
 80054a6:	496d      	ldr	r1, [pc, #436]	; (800565c <HAL_I2C_Mem_Write+0x1ec>)
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fcbb 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0cc      	b.n	8005652 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_I2C_Mem_Write+0x56>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e0c5      	b.n	8005652 <HAL_I2C_Mem_Write+0x1e2>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d007      	beq.n	80054ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2221      	movs	r2, #33	; 0x21
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2240      	movs	r2, #64	; 0x40
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800551c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4a4d      	ldr	r2, [pc, #308]	; (8005660 <HAL_I2C_Mem_Write+0x1f0>)
 800552c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800552e:	88f8      	ldrh	r0, [r7, #6]
 8005530:	893a      	ldrh	r2, [r7, #8]
 8005532:	8979      	ldrh	r1, [r7, #10]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	4603      	mov	r3, r0
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 faf2 	bl	8005b28 <I2C_RequestMemoryWrite>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d052      	beq.n	80055f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e081      	b.n	8005652 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fd3c 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2b04      	cmp	r3, #4
 8005564:	d107      	bne.n	8005576 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e06b      	b.n	8005652 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d11b      	bne.n	80055f0 <HAL_I2C_Mem_Write+0x180>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1aa      	bne.n	800554e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fd28 	bl	8006052 <I2C_WaitOnBTFFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	2b04      	cmp	r3, #4
 800560e:	d107      	bne.n	8005620 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e016      	b.n	8005652 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e000      	b.n	8005652 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
  }
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	00100002 	.word	0x00100002
 8005660:	ffff0000 	.word	0xffff0000

08005664 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	; 0x30
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	460b      	mov	r3, r1
 8005678:	813b      	strh	r3, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005682:	f7ff fa83 	bl	8004b8c <HAL_GetTick>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b20      	cmp	r3, #32
 8005692:	f040 823d 	bne.w	8005b10 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2319      	movs	r3, #25
 800569c:	2201      	movs	r2, #1
 800569e:	4981      	ldr	r1, [pc, #516]	; (80058a4 <HAL_I2C_Mem_Read+0x240>)
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fbbf 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
 80056ae:	e230      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_I2C_Mem_Read+0x5a>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e229      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d007      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2222      	movs	r2, #34	; 0x22
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a61      	ldr	r2, [pc, #388]	; (80058a8 <HAL_I2C_Mem_Read+0x244>)
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005726:	88f8      	ldrh	r0, [r7, #6]
 8005728:	893a      	ldrh	r2, [r7, #8]
 800572a:	8979      	ldrh	r1, [r7, #10]
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	4603      	mov	r3, r0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa8c 	bl	8005c54 <I2C_RequestMemoryRead>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e1e5      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d113      	bne.n	8005776 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e1b9      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	2b01      	cmp	r3, #1
 800577c:	d11d      	bne.n	80057ba <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005790:	2300      	movs	r3, #0
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80057b6:	b662      	cpsie	i
 80057b8:	e197      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d11d      	bne.n	80057fe <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80057d2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80057fa:	b662      	cpsie	i
 80057fc:	e175      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800580c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580e:	2300      	movs	r3, #0
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005824:	e161      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	2b03      	cmp	r3, #3
 800582c:	f200 811a 	bhi.w	8005a64 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005834:	2b01      	cmp	r3, #1
 8005836:	d123      	bne.n	8005880 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fc49 	bl	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e162      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800587e:	e134      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	2b02      	cmp	r3, #2
 8005886:	d150      	bne.n	800592a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	2200      	movs	r2, #0
 8005890:	4906      	ldr	r1, [pc, #24]	; (80058ac <HAL_I2C_Mem_Read+0x248>)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fac6 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e137      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
 80058a2:	bf00      	nop
 80058a4:	00100002 	.word	0x00100002
 80058a8:	ffff0000 	.word	0xffff0000
 80058ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80058b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058f4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005928:	e0df      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	2200      	movs	r2, #0
 8005932:	497a      	ldr	r1, [pc, #488]	; (8005b1c <HAL_I2C_Mem_Read+0x4b8>)
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fa75 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0e6      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005954:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005988:	4b65      	ldr	r3, [pc, #404]	; (8005b20 <HAL_I2C_Mem_Read+0x4bc>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	08db      	lsrs	r3, r3, #3
 800598e:	4a65      	ldr	r2, [pc, #404]	; (8005b24 <HAL_I2C_Mem_Read+0x4c0>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	0a1a      	lsrs	r2, r3, #8
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	00da      	lsls	r2, r3, #3
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d117      	bne.n	80059de <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80059d0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e099      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d1da      	bne.n	80059a2 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a2e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691a      	ldr	r2, [r3, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a62:	e042      	b.n	8005aea <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fb33 	bl	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e04c      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d118      	bne.n	8005aea <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f47f ae99 	bne.w	8005826 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	00010004 	.word	0x00010004
 8005b20:	200000ac 	.word	0x200000ac
 8005b24:	14f8b589 	.word	0x14f8b589

08005b28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	817b      	strh	r3, [r7, #10]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	813b      	strh	r3, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f960 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b78:	d103      	bne.n	8005b82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e05f      	b.n	8005c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b86:	897b      	ldrh	r3, [r7, #10]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	492d      	ldr	r1, [pc, #180]	; (8005c50 <I2C_RequestMemoryWrite+0x128>)
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f998 	bl	8005ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e04c      	b.n	8005c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	6a39      	ldr	r1, [r7, #32]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fa02 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d107      	bne.n	8005bea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e02b      	b.n	8005c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf4:	893b      	ldrh	r3, [r7, #8]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	611a      	str	r2, [r3, #16]
 8005bfe:	e021      	b.n	8005c44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	6a39      	ldr	r1, [r7, #32]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f9dc 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d107      	bne.n	8005c36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e005      	b.n	8005c46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c3a:	893b      	ldrh	r3, [r7, #8]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	00010002 	.word	0x00010002

08005c54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	817b      	strh	r3, [r7, #10]
 8005c66:	460b      	mov	r3, r1
 8005c68:	813b      	strh	r3, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f8c2 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00d      	beq.n	8005cc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb4:	d103      	bne.n	8005cbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0aa      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	6a3a      	ldr	r2, [r7, #32]
 8005cd6:	4952      	ldr	r1, [pc, #328]	; (8005e20 <I2C_RequestMemoryRead+0x1cc>)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f8fa 	bl	8005ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e097      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d00:	6a39      	ldr	r1, [r7, #32]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f964 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00d      	beq.n	8005d2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d107      	bne.n	8005d26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e076      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d105      	bne.n	8005d3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d30:	893b      	ldrh	r3, [r7, #8]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]
 8005d3a:	e021      	b.n	8005d80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d3c:	893b      	ldrh	r3, [r7, #8]
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	6a39      	ldr	r1, [r7, #32]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f93e 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d107      	bne.n	8005d72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e050      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d76:	893b      	ldrh	r3, [r7, #8]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	6a39      	ldr	r1, [r7, #32]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f923 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d107      	bne.n	8005da8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e035      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f82b 	bl	8005e24 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00d      	beq.n	8005df0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de2:	d103      	bne.n	8005dec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e013      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005df0:	897b      	ldrh	r3, [r7, #10]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	6a3a      	ldr	r2, [r7, #32]
 8005e04:	4906      	ldr	r1, [pc, #24]	; (8005e20 <I2C_RequestMemoryRead+0x1cc>)
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f863 	bl	8005ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	00010002 	.word	0x00010002

08005e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e34:	e025      	b.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d021      	beq.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7fe fea5 	bl	8004b8c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d116      	bne.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f043 0220 	orr.w	r2, r3, #32
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e023      	b.n	8005eca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d10d      	bne.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	43da      	mvns	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	e00c      	b.n	8005ec2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	43da      	mvns	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bf0c      	ite	eq
 8005eba:	2301      	moveq	r3, #1
 8005ebc:	2300      	movne	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d0b6      	beq.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee0:	e051      	b.n	8005f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef0:	d123      	bne.n	8005f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f043 0204 	orr.w	r2, r3, #4
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e046      	b.n	8005fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d021      	beq.n	8005f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fe fe23 	bl	8004b8c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d116      	bne.n	8005f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e020      	b.n	8005fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10c      	bne.n	8005faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	43da      	mvns	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e00b      	b.n	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	43da      	mvns	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d18d      	bne.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fdc:	e02d      	b.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f8ce 	bl	8006180 <I2C_IsAcknowledgeFailed>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e02d      	b.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d021      	beq.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fe fdc9 	bl	8004b8c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d116      	bne.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e007      	b.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d1ca      	bne.n	8005fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800605e:	e02d      	b.n	80060bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f88d 	bl	8006180 <I2C_IsAcknowledgeFailed>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e02d      	b.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d021      	beq.n	80060bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006078:	f7fe fd88 	bl	8004b8c <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d116      	bne.n	80060bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	f043 0220 	orr.w	r2, r3, #32
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e007      	b.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d1ca      	bne.n	8006060 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e0:	e042      	b.n	8006168 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d119      	bne.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0210 	mvn.w	r2, #16
 80060f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e029      	b.n	8006178 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006124:	f7fe fd32 	bl	8004b8c <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d116      	bne.n	8006168 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e007      	b.n	8006178 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d1b5      	bne.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006196:	d11b      	bne.n	80061d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f043 0204 	orr.w	r2, r3, #4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e26c      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 8087 	beq.w	800630a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061fc:	4b92      	ldr	r3, [pc, #584]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 030c 	and.w	r3, r3, #12
 8006204:	2b04      	cmp	r3, #4
 8006206:	d00c      	beq.n	8006222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006208:	4b8f      	ldr	r3, [pc, #572]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 030c 	and.w	r3, r3, #12
 8006210:	2b08      	cmp	r3, #8
 8006212:	d112      	bne.n	800623a <HAL_RCC_OscConfig+0x5e>
 8006214:	4b8c      	ldr	r3, [pc, #560]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006220:	d10b      	bne.n	800623a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006222:	4b89      	ldr	r3, [pc, #548]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d06c      	beq.n	8006308 <HAL_RCC_OscConfig+0x12c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d168      	bne.n	8006308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e246      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006242:	d106      	bne.n	8006252 <HAL_RCC_OscConfig+0x76>
 8006244:	4b80      	ldr	r3, [pc, #512]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a7f      	ldr	r2, [pc, #508]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800624a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e02e      	b.n	80062b0 <HAL_RCC_OscConfig+0xd4>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x98>
 800625a:	4b7b      	ldr	r3, [pc, #492]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a7a      	ldr	r2, [pc, #488]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4b78      	ldr	r3, [pc, #480]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a77      	ldr	r2, [pc, #476]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800626c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e01d      	b.n	80062b0 <HAL_RCC_OscConfig+0xd4>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800627c:	d10c      	bne.n	8006298 <HAL_RCC_OscConfig+0xbc>
 800627e:	4b72      	ldr	r3, [pc, #456]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a71      	ldr	r2, [pc, #452]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b6f      	ldr	r3, [pc, #444]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6e      	ldr	r2, [pc, #440]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00b      	b.n	80062b0 <HAL_RCC_OscConfig+0xd4>
 8006298:	4b6b      	ldr	r3, [pc, #428]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6a      	ldr	r2, [pc, #424]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800629e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b68      	ldr	r3, [pc, #416]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a67      	ldr	r2, [pc, #412]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fe fc68 	bl	8004b8c <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fe fc64 	bl	8004b8c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e1fa      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b5d      	ldr	r3, [pc, #372]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0xe4>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fe fc54 	bl	8004b8c <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e8:	f7fe fc50 	bl	8004b8c <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	; 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e1e6      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	4b53      	ldr	r3, [pc, #332]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x10c>
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006316:	4b4c      	ldr	r3, [pc, #304]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006322:	4b49      	ldr	r3, [pc, #292]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11c      	bne.n	8006368 <HAL_RCC_OscConfig+0x18c>
 800632e:	4b46      	ldr	r3, [pc, #280]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	4b43      	ldr	r3, [pc, #268]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_RCC_OscConfig+0x176>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1ba      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b3d      	ldr	r3, [pc, #244]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4939      	ldr	r1, [pc, #228]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	e03a      	b.n	80063de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <HAL_RCC_OscConfig+0x270>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006376:	f7fe fc09 	bl	8004b8c <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637e:	f7fe fc05 	bl	8004b8c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e19b      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	4b2d      	ldr	r3, [pc, #180]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4927      	ldr	r1, [pc, #156]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e015      	b.n	80063de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <HAL_RCC_OscConfig+0x270>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b8:	f7fe fbe8 	bl	8004b8c <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fe fbe4 	bl	8004b8c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e17a      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d03a      	beq.n	8006460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d019      	beq.n	8006426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <HAL_RCC_OscConfig+0x274>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f8:	f7fe fbc8 	bl	8004b8c <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006400:	f7fe fbc4 	bl	8004b8c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e15a      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <HAL_RCC_OscConfig+0x26c>)
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800641e:	2001      	movs	r0, #1
 8006420:	f000 fada 	bl	80069d8 <RCC_Delay>
 8006424:	e01c      	b.n	8006460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <HAL_RCC_OscConfig+0x274>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642c:	f7fe fbae 	bl	8004b8c <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006432:	e00f      	b.n	8006454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006434:	f7fe fbaa 	bl	8004b8c <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d908      	bls.n	8006454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e140      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
 8006446:	bf00      	nop
 8006448:	40021000 	.word	0x40021000
 800644c:	42420000 	.word	0x42420000
 8006450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006454:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e9      	bne.n	8006434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80a6 	beq.w	80065ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006472:	4b97      	ldr	r3, [pc, #604]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10d      	bne.n	800649a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	4b94      	ldr	r3, [pc, #592]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4a93      	ldr	r2, [pc, #588]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006488:	61d3      	str	r3, [r2, #28]
 800648a:	4b91      	ldr	r3, [pc, #580]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649a:	4b8e      	ldr	r3, [pc, #568]	; (80066d4 <HAL_RCC_OscConfig+0x4f8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d118      	bne.n	80064d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a6:	4b8b      	ldr	r3, [pc, #556]	; (80066d4 <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a8a      	ldr	r2, [pc, #552]	; (80066d4 <HAL_RCC_OscConfig+0x4f8>)
 80064ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b2:	f7fe fb6b 	bl	8004b8c <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ba:	f7fe fb67 	bl	8004b8c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b64      	cmp	r3, #100	; 0x64
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0fd      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064cc:	4b81      	ldr	r3, [pc, #516]	; (80066d4 <HAL_RCC_OscConfig+0x4f8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x312>
 80064e0:	4b7b      	ldr	r3, [pc, #492]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	4a7a      	ldr	r2, [pc, #488]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6213      	str	r3, [r2, #32]
 80064ec:	e02d      	b.n	800654a <HAL_RCC_OscConfig+0x36e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x334>
 80064f6:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4a75      	ldr	r2, [pc, #468]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	6213      	str	r3, [r2, #32]
 8006502:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	4a72      	ldr	r2, [pc, #456]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	6213      	str	r3, [r2, #32]
 800650e:	e01c      	b.n	800654a <HAL_RCC_OscConfig+0x36e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b05      	cmp	r3, #5
 8006516:	d10c      	bne.n	8006532 <HAL_RCC_OscConfig+0x356>
 8006518:	4b6d      	ldr	r3, [pc, #436]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	4a6c      	ldr	r2, [pc, #432]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6213      	str	r3, [r2, #32]
 8006524:	4b6a      	ldr	r3, [pc, #424]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	4a69      	ldr	r2, [pc, #420]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	6213      	str	r3, [r2, #32]
 8006530:	e00b      	b.n	800654a <HAL_RCC_OscConfig+0x36e>
 8006532:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	4a66      	ldr	r2, [pc, #408]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6213      	str	r3, [r2, #32]
 800653e:	4b64      	ldr	r3, [pc, #400]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	4a63      	ldr	r2, [pc, #396]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006544:	f023 0304 	bic.w	r3, r3, #4
 8006548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d015      	beq.n	800657e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006552:	f7fe fb1b 	bl	8004b8c <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006558:	e00a      	b.n	8006570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655a:	f7fe fb17 	bl	8004b8c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e0ab      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006570:	4b57      	ldr	r3, [pc, #348]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ee      	beq.n	800655a <HAL_RCC_OscConfig+0x37e>
 800657c:	e014      	b.n	80065a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657e:	f7fe fb05 	bl	8004b8c <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006584:	e00a      	b.n	800659c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006586:	f7fe fb01 	bl	8004b8c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	4293      	cmp	r3, r2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e095      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800659c:	4b4c      	ldr	r3, [pc, #304]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ee      	bne.n	8006586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d105      	bne.n	80065ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ae:	4b48      	ldr	r3, [pc, #288]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4a47      	ldr	r2, [pc, #284]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80065b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8081 	beq.w	80066c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065c4:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d061      	beq.n	8006694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d146      	bne.n	8006666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d8:	4b3f      	ldr	r3, [pc, #252]	; (80066d8 <HAL_RCC_OscConfig+0x4fc>)
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065de:	f7fe fad5 	bl	8004b8c <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e6:	f7fe fad1 	bl	8004b8c <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e067      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f8:	4b35      	ldr	r3, [pc, #212]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660c:	d108      	bne.n	8006620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	492d      	ldr	r1, [pc, #180]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800661c:	4313      	orrs	r3, r2
 800661e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a19      	ldr	r1, [r3, #32]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	430b      	orrs	r3, r1
 8006632:	4927      	ldr	r1, [pc, #156]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006638:	4b27      	ldr	r3, [pc, #156]	; (80066d8 <HAL_RCC_OscConfig+0x4fc>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663e:	f7fe faa5 	bl	8004b8c <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006646:	f7fe faa1 	bl	8004b8c <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e037      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCC_OscConfig+0x46a>
 8006664:	e02f      	b.n	80066c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <HAL_RCC_OscConfig+0x4fc>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fe fa8e 	bl	8004b8c <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006674:	f7fe fa8a 	bl	8004b8c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e020      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0x498>
 8006692:	e018      	b.n	80066c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e013      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <HAL_RCC_OscConfig+0x4f4>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	40007000 	.word	0x40007000
 80066d8:	42420060 	.word	0x42420060

080066dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0d0      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066f0:	4b6a      	ldr	r3, [pc, #424]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d910      	bls.n	8006720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fe:	4b67      	ldr	r3, [pc, #412]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 0207 	bic.w	r2, r3, #7
 8006706:	4965      	ldr	r1, [pc, #404]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670e:	4b63      	ldr	r3, [pc, #396]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0b8      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006738:	4b59      	ldr	r3, [pc, #356]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4a58      	ldr	r2, [pc, #352]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800673e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006750:	4b53      	ldr	r3, [pc, #332]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4a52      	ldr	r2, [pc, #328]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800675a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675c:	4b50      	ldr	r3, [pc, #320]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	494d      	ldr	r1, [pc, #308]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800676a:	4313      	orrs	r3, r2
 800676c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d040      	beq.n	80067fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006782:	4b47      	ldr	r3, [pc, #284]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d115      	bne.n	80067ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e07f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d107      	bne.n	80067aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679a:	4b41      	ldr	r3, [pc, #260]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e073      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067aa:	4b3d      	ldr	r3, [pc, #244]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e06b      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ba:	4b39      	ldr	r3, [pc, #228]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f023 0203 	bic.w	r2, r3, #3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4936      	ldr	r1, [pc, #216]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067cc:	f7fe f9de 	bl	8004b8c <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d2:	e00a      	b.n	80067ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d4:	f7fe f9da 	bl	8004b8c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e053      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ea:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 020c 	and.w	r2, r3, #12
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d1eb      	bne.n	80067d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067fc:	4b27      	ldr	r3, [pc, #156]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d210      	bcs.n	800682c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680a:	4b24      	ldr	r3, [pc, #144]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 0207 	bic.w	r2, r3, #7
 8006812:	4922      	ldr	r1, [pc, #136]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	4313      	orrs	r3, r2
 8006818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681a:	4b20      	ldr	r3, [pc, #128]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e032      	b.n	8006892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006838:	4b19      	ldr	r3, [pc, #100]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4916      	ldr	r1, [pc, #88]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006846:	4313      	orrs	r3, r2
 8006848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006856:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	490e      	ldr	r1, [pc, #56]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006866:	4313      	orrs	r3, r2
 8006868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800686a:	f000 f821 	bl	80068b0 <HAL_RCC_GetSysClockFreq>
 800686e:	4601      	mov	r1, r0
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <HAL_RCC_ClockConfig+0x1c8>)
 800687c:	5cd3      	ldrb	r3, [r2, r3]
 800687e:	fa21 f303 	lsr.w	r3, r1, r3
 8006882:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_RCC_ClockConfig+0x1d0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe f93c 	bl	8004b08 <HAL_InitTick>

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40022000 	.word	0x40022000
 80068a0:	40021000 	.word	0x40021000
 80068a4:	08008b94 	.word	0x08008b94
 80068a8:	200000ac 	.word	0x200000ac
 80068ac:	200000b0 	.word	0x200000b0

080068b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b0:	b490      	push	{r4, r7}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068b6:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068b8:	1d3c      	adds	r4, r7, #4
 80068ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	2300      	movs	r3, #0
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068da:	4b23      	ldr	r3, [pc, #140]	; (8006968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x40>
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x46>
 80068ee:	e02d      	b.n	800694c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068f0:	4b1e      	ldr	r3, [pc, #120]	; (800696c <HAL_RCC_GetSysClockFreq+0xbc>)
 80068f2:	623b      	str	r3, [r7, #32]
      break;
 80068f4:	e02d      	b.n	8006952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	0c9b      	lsrs	r3, r3, #18
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006902:	4413      	add	r3, r2
 8006904:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006908:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d013      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006914:	4b14      	ldr	r3, [pc, #80]	; (8006968 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	0c5b      	lsrs	r3, r3, #17
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006922:	4413      	add	r3, r2
 8006924:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006928:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	4a0f      	ldr	r2, [pc, #60]	; (800696c <HAL_RCC_GetSysClockFreq+0xbc>)
 800692e:	fb02 f203 	mul.w	r2, r2, r3
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
 800693a:	e004      	b.n	8006946 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4a0c      	ldr	r2, [pc, #48]	; (8006970 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006940:	fb02 f303 	mul.w	r3, r2, r3
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	623b      	str	r3, [r7, #32]
      break;
 800694a:	e002      	b.n	8006952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <HAL_RCC_GetSysClockFreq+0xbc>)
 800694e:	623b      	str	r3, [r7, #32]
      break;
 8006950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006952:	6a3b      	ldr	r3, [r7, #32]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3728      	adds	r7, #40	; 0x28
 8006958:	46bd      	mov	sp, r7
 800695a:	bc90      	pop	{r4, r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	080088c0 	.word	0x080088c0
 8006964:	080088d0 	.word	0x080088d0
 8006968:	40021000 	.word	0x40021000
 800696c:	007a1200 	.word	0x007a1200
 8006970:	003d0900 	.word	0x003d0900

08006974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006978:	4b02      	ldr	r3, [pc, #8]	; (8006984 <HAL_RCC_GetHCLKFreq+0x10>)
 800697a:	681b      	ldr	r3, [r3, #0]
}
 800697c:	4618      	mov	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	200000ac 	.word	0x200000ac

08006988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800698c:	f7ff fff2 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 8006990:	4601      	mov	r1, r0
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	4a03      	ldr	r2, [pc, #12]	; (80069ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800699e:	5cd3      	ldrb	r3, [r2, r3]
 80069a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40021000 	.word	0x40021000
 80069ac:	08008ba4 	.word	0x08008ba4

080069b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069b4:	f7ff ffde 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 80069b8:	4601      	mov	r1, r0
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	0adb      	lsrs	r3, r3, #11
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	4a03      	ldr	r2, [pc, #12]	; (80069d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069c6:	5cd3      	ldrb	r3, [r2, r3]
 80069c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40021000 	.word	0x40021000
 80069d4:	08008ba4 	.word	0x08008ba4

080069d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <RCC_Delay+0x34>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <RCC_Delay+0x38>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	0a5b      	lsrs	r3, r3, #9
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069f4:	bf00      	nop
  }
  while (Delay --);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1e5a      	subs	r2, r3, #1
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1f9      	bne.n	80069f4 <RCC_Delay+0x1c>
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	200000ac 	.word	0x200000ac
 8006a10:	10624dd3 	.word	0x10624dd3

08006a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e041      	b.n	8006aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fd fed4 	bl	80047e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	f000 fc14 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d001      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e03a      	b.n	8006b42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a18      	ldr	r2, [pc, #96]	; (8006b4c <HAL_TIM_Base_Start_IT+0x98>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x58>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x58>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x58>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d111      	bne.n	8006b30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b06      	cmp	r3, #6
 8006b1c:	d010      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2e:	e007      	b.n	8006b40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	40012c00 	.word	0x40012c00
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800

08006b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e041      	b.n	8006bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fd fe58 	bl	8004834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f000 fb72 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <HAL_TIM_PWM_Start+0x24>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	e022      	b.n	8006c62 <HAL_TIM_PWM_Start+0x6a>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d109      	bne.n	8006c36 <HAL_TIM_PWM_Start+0x3e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	bf14      	ite	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	2300      	moveq	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	e015      	b.n	8006c62 <HAL_TIM_PWM_Start+0x6a>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d109      	bne.n	8006c50 <HAL_TIM_PWM_Start+0x58>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	e008      	b.n	8006c62 <HAL_TIM_PWM_Start+0x6a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	bf14      	ite	ne
 8006c5c:	2301      	movne	r3, #1
 8006c5e:	2300      	moveq	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e05e      	b.n	8006d28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_Start+0x82>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c78:	e013      	b.n	8006ca2 <HAL_TIM_PWM_Start+0xaa>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d104      	bne.n	8006c8a <HAL_TIM_PWM_Start+0x92>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c88:	e00b      	b.n	8006ca2 <HAL_TIM_PWM_Start+0xaa>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_PWM_Start+0xa2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c98:	e003      	b.n	8006ca2 <HAL_TIM_PWM_Start+0xaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fd68 	bl	8007780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <HAL_TIM_PWM_Start+0x138>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <HAL_TIM_PWM_Start+0x138>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0xfa>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d009      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0xfa>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <HAL_TIM_PWM_Start+0x13c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0xfa>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a12      	ldr	r2, [pc, #72]	; (8006d38 <HAL_TIM_PWM_Start+0x140>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d111      	bne.n	8006d16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b06      	cmp	r3, #6
 8006d02:	d010      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d14:	e007      	b.n	8006d26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800

08006d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d122      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0202 	mvn.w	r2, #2
 8006d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa62 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006d84:	e005      	b.n	8006d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa55 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fa64 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d122      	bne.n	8006dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d11b      	bne.n	8006dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0204 	mvn.w	r2, #4
 8006dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa38 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa2b 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fa3a 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d122      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d11b      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0208 	mvn.w	r2, #8
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2204      	movs	r2, #4
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa0e 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa01 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fa10 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0210 	mvn.w	r2, #16
 8006e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9e4 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f9d7 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f9e6 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d10e      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d107      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0201 	mvn.w	r2, #1
 8006eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fa fa7c 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d10e      	bne.n	8006eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d107      	bne.n	8006eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fcd5 	bl	8007896 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d10e      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d107      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9aa 	bl	800726c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d10e      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d107      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0220 	mvn.w	r2, #32
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fca0 	bl	8007884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0ac      	b.n	80070c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b0c      	cmp	r3, #12
 8006f72:	f200 809f 	bhi.w	80070b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fb1 	.word	0x08006fb1
 8006f80:	080070b5 	.word	0x080070b5
 8006f84:	080070b5 	.word	0x080070b5
 8006f88:	080070b5 	.word	0x080070b5
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	080070b5 	.word	0x080070b5
 8006f94:	080070b5 	.word	0x080070b5
 8006f98:	080070b5 	.word	0x080070b5
 8006f9c:	08007033 	.word	0x08007033
 8006fa0:	080070b5 	.word	0x080070b5
 8006fa4:	080070b5 	.word	0x080070b5
 8006fa8:	080070b5 	.word	0x080070b5
 8006fac:	08007073 	.word	0x08007073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f9c4 	bl	8007344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	619a      	str	r2, [r3, #24]
      break;
 8006fee:	e062      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fa0a 	bl	8007410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800700a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800701a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6999      	ldr	r1, [r3, #24]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	619a      	str	r2, [r3, #24]
      break;
 8007030:	e041      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fa53 	bl	80074e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0208 	orr.w	r2, r2, #8
 800704c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0204 	bic.w	r2, r2, #4
 800705c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	61da      	str	r2, [r3, #28]
      break;
 8007070:	e021      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fa9d 	bl	80075b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69d9      	ldr	r1, [r3, #28]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	021a      	lsls	r2, r3, #8
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	61da      	str	r2, [r3, #28]
      break;
 80070b2:	e000      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80070b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_TIM_ConfigClockSource+0x18>
 80070dc:	2302      	movs	r3, #2
 80070de:	e0a6      	b.n	800722e <HAL_TIM_ConfigClockSource+0x166>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007106:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d067      	beq.n	80071e8 <HAL_TIM_ConfigClockSource+0x120>
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d80b      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x6c>
 800711c:	2b10      	cmp	r3, #16
 800711e:	d073      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x140>
 8007120:	2b10      	cmp	r3, #16
 8007122:	d802      	bhi.n	800712a <HAL_TIM_ConfigClockSource+0x62>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d06f      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007128:	e078      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800712a:	2b20      	cmp	r3, #32
 800712c:	d06c      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x140>
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	d06a      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007132:	e073      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d00d      	beq.n	8007154 <HAL_TIM_ConfigClockSource+0x8c>
 8007138:	2b70      	cmp	r3, #112	; 0x70
 800713a:	d804      	bhi.n	8007146 <HAL_TIM_ConfigClockSource+0x7e>
 800713c:	2b50      	cmp	r3, #80	; 0x50
 800713e:	d033      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0xe0>
 8007140:	2b60      	cmp	r3, #96	; 0x60
 8007142:	d041      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007144:	e06a      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d066      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x152>
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007150:	d017      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007152:	e063      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f000 faed 	bl	8007742 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007176:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	609a      	str	r2, [r3, #8]
      break;
 8007180:	e04c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6899      	ldr	r1, [r3, #8]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f000 fad6 	bl	8007742 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a4:	609a      	str	r2, [r3, #8]
      break;
 80071a6:	e039      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6859      	ldr	r1, [r3, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f000 fa4d 	bl	8007654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2150      	movs	r1, #80	; 0x50
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 faa4 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 80071c6:	e029      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f000 fa6b 	bl	80076b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2160      	movs	r1, #96	; 0x60
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fa94 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 80071e6:	e019      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f000 fa2d 	bl	8007654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2140      	movs	r1, #64	; 0x40
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fa84 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 8007206:	e009      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f000 fa7b 	bl	800770e <TIM_ITRx_SetConfig>
        break;
 8007218:	e000      	b.n	800721c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800721a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr
	...

08007280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a29      	ldr	r2, [pc, #164]	; (8007338 <TIM_Base_SetConfig+0xb8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00b      	beq.n	80072b0 <TIM_Base_SetConfig+0x30>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d007      	beq.n	80072b0 <TIM_Base_SetConfig+0x30>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a26      	ldr	r2, [pc, #152]	; (800733c <TIM_Base_SetConfig+0xbc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_Base_SetConfig+0x30>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a25      	ldr	r2, [pc, #148]	; (8007340 <TIM_Base_SetConfig+0xc0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d108      	bne.n	80072c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a1c      	ldr	r2, [pc, #112]	; (8007338 <TIM_Base_SetConfig+0xb8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <TIM_Base_SetConfig+0x62>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d0:	d007      	beq.n	80072e2 <TIM_Base_SetConfig+0x62>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <TIM_Base_SetConfig+0xbc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_Base_SetConfig+0x62>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a18      	ldr	r2, [pc, #96]	; (8007340 <TIM_Base_SetConfig+0xc0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a07      	ldr	r2, [pc, #28]	; (8007338 <TIM_Base_SetConfig+0xb8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d103      	bne.n	8007328 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	615a      	str	r2, [r3, #20]
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr
 8007338:	40012c00 	.word	0x40012c00
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800

08007344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f023 0201 	bic.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 0302 	bic.w	r3, r3, #2
 800738c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a1c      	ldr	r2, [pc, #112]	; (800740c <TIM_OC1_SetConfig+0xc8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d10c      	bne.n	80073ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0308 	bic.w	r3, r3, #8
 80073a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f023 0304 	bic.w	r3, r3, #4
 80073b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a13      	ldr	r2, [pc, #76]	; (800740c <TIM_OC1_SetConfig+0xc8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d111      	bne.n	80073e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	621a      	str	r2, [r3, #32]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40012c00 	.word	0x40012c00

08007410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0210 	bic.w	r2, r3, #16
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f023 0320 	bic.w	r3, r3, #32
 800745a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <TIM_OC2_SetConfig+0xd0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10d      	bne.n	800748c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <TIM_OC2_SetConfig+0xd0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d113      	bne.n	80074bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800749a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr
 80074e0:	40012c00 	.word	0x40012c00

080074e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800752c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <TIM_OC3_SetConfig+0xd0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10d      	bne.n	800755e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800755c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a14      	ldr	r2, [pc, #80]	; (80075b4 <TIM_OC3_SetConfig+0xd0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d113      	bne.n	800758e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800756c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40012c00 	.word	0x40012c00

080075b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	031b      	lsls	r3, r3, #12
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <TIM_OC4_SetConfig+0x98>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d109      	bne.n	800762c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800761e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	019b      	lsls	r3, r3, #6
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	40012c00 	.word	0x40012c00

08007654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f023 0201 	bic.w	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800767e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 030a 	bic.w	r3, r3, #10
 8007690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	f023 0210 	bic.w	r2, r3, #16
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	031b      	lsls	r3, r3, #12
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	621a      	str	r2, [r3, #32]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	bc80      	pop	{r7}
 800770c:	4770      	bx	lr

0800770e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	f043 0307 	orr.w	r3, r3, #7
 8007730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr

08007742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007742:	b480      	push	{r7}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800775c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	021a      	lsls	r2, r3, #8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	431a      	orrs	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4313      	orrs	r3, r2
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	609a      	str	r2, [r3, #8]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2201      	movs	r2, #1
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	401a      	ands	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077dc:	2302      	movs	r3, #2
 80077de:	e046      	b.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a16      	ldr	r2, [pc, #88]	; (8007878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00e      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782c:	d009      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a12      	ldr	r2, [pc, #72]	; (800787c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d004      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a10      	ldr	r2, [pc, #64]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d10c      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4313      	orrs	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800

08007884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr

08007896 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e03f      	b.n	800793a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fd f848 	bl	8004964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2224      	movs	r2, #36	; 0x24
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fbab 	bl	8008048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	4613      	mov	r3, r2
 800794e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b20      	cmp	r3, #32
 800795a:	d11d      	bne.n	8007998 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <HAL_UART_Receive_IT+0x26>
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e016      	b.n	800799a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_UART_Receive_IT+0x38>
 8007976:	2302      	movs	r3, #2
 8007978:	e00f      	b.n	800799a <HAL_UART_Receive_IT+0x58>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	461a      	mov	r2, r3
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f9d1 	bl	8007d36 <UART_Start_Receive_IT>
 8007994:	4603      	mov	r3, r0
 8007996:	e000      	b.n	800799a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007998:	2302      	movs	r3, #2
  }
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	; 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10d      	bne.n	80079f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_UART_IRQHandler+0x52>
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa81 	bl	8007ef6 <UART_Receive_IT>
      return;
 80079f4:	e17c      	b.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80b1 	beq.w	8007b60 <HAL_UART_IRQHandler+0x1bc>
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <HAL_UART_IRQHandler+0x70>
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 80a6 	beq.w	8007b60 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <HAL_UART_IRQHandler+0x90>
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	f043 0201 	orr.w	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	f003 0304 	and.w	r3, r3, #4
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <HAL_UART_IRQHandler+0xb0>
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	f043 0202 	orr.w	r2, r3, #2
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <HAL_UART_IRQHandler+0xd0>
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <HAL_UART_IRQHandler+0xfa>
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <HAL_UART_IRQHandler+0xee>
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f043 0208 	orr.w	r2, r3, #8
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 811f 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x11e>
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa1a 	bl	8007ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bf14      	ite	ne
 8007ad0:	2301      	movne	r3, #1
 8007ad2:	2300      	moveq	r3, #0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d102      	bne.n	8007aea <HAL_UART_IRQHandler+0x146>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d031      	beq.n	8007b4e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f95c 	bl	8007da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d023      	beq.n	8007b46 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d013      	beq.n	8007b3e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	4a77      	ldr	r2, [pc, #476]	; (8007cf8 <HAL_UART_IRQHandler+0x354>)
 8007b1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fd f984 	bl	8004e30 <HAL_DMA_Abort_IT>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3c:	e00e      	b.n	8007b5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8e5 	bl	8007d0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	e00a      	b.n	8007b5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8e1 	bl	8007d0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4c:	e006      	b.n	8007b5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8dd 	bl	8007d0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b5a:	e0c4      	b.n	8007ce6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5c:	bf00      	nop
    return;
 8007b5e:	e0c2      	b.n	8007ce6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	f040 80a1 	bne.w	8007cac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 809b 	beq.w	8007cac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8095 	beq.w	8007cac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d04e      	beq.n	8007c44 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007bb0:	8a3b      	ldrh	r3, [r7, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8099 	beq.w	8007cea <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bbc:	8a3a      	ldrh	r2, [r7, #16]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	f080 8093 	bcs.w	8007cea <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8a3a      	ldrh	r2, [r7, #16]
 8007bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d02b      	beq.n	8007c2c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007be2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695a      	ldr	r2, [r3, #20]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0201 	bic.w	r2, r2, #1
 8007bf2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c02:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0210 	bic.w	r2, r2, #16
 8007c20:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd f8c7 	bl	8004dba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f86f 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c42:	e052      	b.n	8007cea <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d048      	beq.n	8007cee <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007c5c:	8a7b      	ldrh	r3, [r7, #18]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d045      	beq.n	8007cee <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c70:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	695a      	ldr	r2, [r3, #20]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0201 	bic.w	r2, r2, #1
 8007c80:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0210 	bic.w	r2, r2, #16
 8007c9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ca0:	8a7b      	ldrh	r3, [r7, #18]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f83b 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007caa:	e020      	b.n	8007cee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d008      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x324>
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8b1 	bl	8007e28 <UART_Transmit_IT>
    return;
 8007cc6:	e013      	b.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00e      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8f2 	bl	8007ec6 <UART_EndTransmit_IT>
    return;
 8007ce2:	bf00      	nop
 8007ce4:	e004      	b.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
    return;
 8007ce6:	bf00      	nop
 8007ce8:	e002      	b.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007cee:	bf00      	nop
  }
}
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	08007e01 	.word	0x08007e01

08007cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr

08007d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	4613      	mov	r3, r2
 8007d42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	88fa      	ldrh	r2, [r7, #6]
 8007d54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2222      	movs	r2, #34	; 0x22
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695a      	ldr	r2, [r3, #20]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0220 	orr.w	r2, r2, #32
 8007d9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695a      	ldr	r2, [r3, #20]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d107      	bne.n	8007de8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0210 	bic.w	r2, r2, #16
 8007de6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr

08007e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff ff77 	bl	8007d0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b21      	cmp	r3, #33	; 0x21
 8007e3a:	d13e      	bne.n	8007eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d114      	bne.n	8007e70 <UART_Transmit_IT+0x48>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d110      	bne.n	8007e70 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	1c9a      	adds	r2, r3, #2
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	621a      	str	r2, [r3, #32]
 8007e6e:	e008      	b.n	8007e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	1c59      	adds	r1, r3, #1
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6211      	str	r1, [r2, #32]
 8007e7a:	781a      	ldrb	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10f      	bne.n	8007eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e000      	b.n	8007ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr

08007ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff ff08 	bl	8007cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b086      	sub	sp, #24
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b22      	cmp	r3, #34	; 0x22
 8007f08:	f040 8099 	bne.w	800803e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f14:	d117      	bne.n	8007f46 <UART_Receive_IT+0x50>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d113      	bne.n	8007f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	1c9a      	adds	r2, r3, #2
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	629a      	str	r2, [r3, #40]	; 0x28
 8007f44:	e026      	b.n	8007f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f58:	d007      	beq.n	8007f6a <UART_Receive_IT+0x74>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <UART_Receive_IT+0x82>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e008      	b.n	8007f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d148      	bne.n	800803a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0220 	bic.w	r2, r2, #32
 8007fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0201 	bic.w	r2, r2, #1
 8007fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d123      	bne.n	8008030 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0210 	bic.w	r2, r2, #16
 8007ffc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	2b10      	cmp	r3, #16
 800800a:	d10a      	bne.n	8008022 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fe79 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
 800802e:	e002      	b.n	8008036 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7f9 f9d7 	bl	80013e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	e002      	b.n	8008040 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e000      	b.n	8008040 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800803e:	2302      	movs	r3, #2
  }
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008082:	f023 030c 	bic.w	r3, r3, #12
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	430b      	orrs	r3, r1
 800808e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a2c      	ldr	r2, [pc, #176]	; (800815c <UART_SetConfig+0x114>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d103      	bne.n	80080b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080b0:	f7fe fc7e 	bl	80069b0 <HAL_RCC_GetPCLK2Freq>
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	e002      	b.n	80080be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080b8:	f7fe fc66 	bl	8006988 <HAL_RCC_GetPCLK1Freq>
 80080bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009a      	lsls	r2, r3, #2
 80080c8:	441a      	add	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d4:	4a22      	ldr	r2, [pc, #136]	; (8008160 <UART_SetConfig+0x118>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	0119      	lsls	r1, r3, #4
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009a      	lsls	r2, r3, #2
 80080e8:	441a      	add	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80080f4:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <UART_SetConfig+0x118>)
 80080f6:	fba3 0302 	umull	r0, r3, r3, r2
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	2064      	movs	r0, #100	; 0x64
 80080fe:	fb00 f303 	mul.w	r3, r0, r3
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	3332      	adds	r3, #50	; 0x32
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <UART_SetConfig+0x118>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008114:	4419      	add	r1, r3
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009a      	lsls	r2, r3, #2
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	fbb2 f2f3 	udiv	r2, r2, r3
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <UART_SetConfig+0x118>)
 800812e:	fba3 0302 	umull	r0, r3, r3, r2
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	2064      	movs	r0, #100	; 0x64
 8008136:	fb00 f303 	mul.w	r3, r0, r3
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	3332      	adds	r3, #50	; 0x32
 8008140:	4a07      	ldr	r2, [pc, #28]	; (8008160 <UART_SetConfig+0x118>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	440a      	add	r2, r1
 8008152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40013800 	.word	0x40013800
 8008160:	51eb851f 	.word	0x51eb851f

08008164 <__errno>:
 8008164:	4b01      	ldr	r3, [pc, #4]	; (800816c <__errno+0x8>)
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	200000b8 	.word	0x200000b8

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	2500      	movs	r5, #0
 8008174:	4e0c      	ldr	r6, [pc, #48]	; (80081a8 <__libc_init_array+0x38>)
 8008176:	4c0d      	ldr	r4, [pc, #52]	; (80081ac <__libc_init_array+0x3c>)
 8008178:	1ba4      	subs	r4, r4, r6
 800817a:	10a4      	asrs	r4, r4, #2
 800817c:	42a5      	cmp	r5, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	f000 fb92 	bl	80088a8 <_init>
 8008184:	2500      	movs	r5, #0
 8008186:	4e0a      	ldr	r6, [pc, #40]	; (80081b0 <__libc_init_array+0x40>)
 8008188:	4c0a      	ldr	r4, [pc, #40]	; (80081b4 <__libc_init_array+0x44>)
 800818a:	1ba4      	subs	r4, r4, r6
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	42a5      	cmp	r5, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008198:	4798      	blx	r3
 800819a:	3501      	adds	r5, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a2:	4798      	blx	r3
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	08008bf8 	.word	0x08008bf8
 80081ac:	08008bf8 	.word	0x08008bf8
 80081b0:	08008bf8 	.word	0x08008bf8
 80081b4:	08008bfc 	.word	0x08008bfc

080081b8 <memset>:
 80081b8:	4603      	mov	r3, r0
 80081ba:	4402      	add	r2, r0
 80081bc:	4293      	cmp	r3, r2
 80081be:	d100      	bne.n	80081c2 <memset+0xa>
 80081c0:	4770      	bx	lr
 80081c2:	f803 1b01 	strb.w	r1, [r3], #1
 80081c6:	e7f9      	b.n	80081bc <memset+0x4>

080081c8 <atan>:
 80081c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4bb6      	ldr	r3, [pc, #728]	; (80084a8 <atan+0x2e0>)
 80081ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80081d2:	429e      	cmp	r6, r3
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	468b      	mov	fp, r1
 80081da:	dd17      	ble.n	800820c <atan+0x44>
 80081dc:	4bb3      	ldr	r3, [pc, #716]	; (80084ac <atan+0x2e4>)
 80081de:	429e      	cmp	r6, r3
 80081e0:	dc01      	bgt.n	80081e6 <atan+0x1e>
 80081e2:	d109      	bne.n	80081f8 <atan+0x30>
 80081e4:	b140      	cbz	r0, 80081f8 <atan+0x30>
 80081e6:	4622      	mov	r2, r4
 80081e8:	462b      	mov	r3, r5
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f7 ffb5 	bl	800015c <__adddf3>
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	e005      	b.n	8008204 <atan+0x3c>
 80081f8:	f1bb 0f00 	cmp.w	fp, #0
 80081fc:	4cac      	ldr	r4, [pc, #688]	; (80084b0 <atan+0x2e8>)
 80081fe:	f340 8121 	ble.w	8008444 <atan+0x27c>
 8008202:	4dac      	ldr	r5, [pc, #688]	; (80084b4 <atan+0x2ec>)
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	4baa      	ldr	r3, [pc, #680]	; (80084b8 <atan+0x2f0>)
 800820e:	429e      	cmp	r6, r3
 8008210:	dc11      	bgt.n	8008236 <atan+0x6e>
 8008212:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008216:	429e      	cmp	r6, r3
 8008218:	dc0a      	bgt.n	8008230 <atan+0x68>
 800821a:	a38b      	add	r3, pc, #556	; (adr r3, 8008448 <atan+0x280>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f7 ff9c 	bl	800015c <__adddf3>
 8008224:	2200      	movs	r2, #0
 8008226:	4ba5      	ldr	r3, [pc, #660]	; (80084bc <atan+0x2f4>)
 8008228:	f7f8 fbde 	bl	80009e8 <__aeabi_dcmpgt>
 800822c:	2800      	cmp	r0, #0
 800822e:	d1e9      	bne.n	8008204 <atan+0x3c>
 8008230:	f04f 3aff 	mov.w	sl, #4294967295
 8008234:	e027      	b.n	8008286 <atan+0xbe>
 8008236:	f000 f951 	bl	80084dc <fabs>
 800823a:	4ba1      	ldr	r3, [pc, #644]	; (80084c0 <atan+0x2f8>)
 800823c:	4604      	mov	r4, r0
 800823e:	429e      	cmp	r6, r3
 8008240:	460d      	mov	r5, r1
 8008242:	f300 80b8 	bgt.w	80083b6 <atan+0x1ee>
 8008246:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800824a:	429e      	cmp	r6, r3
 800824c:	f300 809c 	bgt.w	8008388 <atan+0x1c0>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	f7f7 ff82 	bl	800015c <__adddf3>
 8008258:	2200      	movs	r2, #0
 800825a:	4b98      	ldr	r3, [pc, #608]	; (80084bc <atan+0x2f4>)
 800825c:	f7f7 ff7c 	bl	8000158 <__aeabi_dsub>
 8008260:	2200      	movs	r2, #0
 8008262:	4606      	mov	r6, r0
 8008264:	460f      	mov	r7, r1
 8008266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	f7f7 ff75 	bl	800015c <__adddf3>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4630      	mov	r0, r6
 8008278:	4639      	mov	r1, r7
 800827a:	f7f8 fa4f 	bl	800071c <__aeabi_ddiv>
 800827e:	f04f 0a00 	mov.w	sl, #0
 8008282:	4604      	mov	r4, r0
 8008284:	460d      	mov	r5, r1
 8008286:	4622      	mov	r2, r4
 8008288:	462b      	mov	r3, r5
 800828a:	4620      	mov	r0, r4
 800828c:	4629      	mov	r1, r5
 800828e:	f7f8 f91b 	bl	80004c8 <__aeabi_dmul>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4680      	mov	r8, r0
 8008298:	4689      	mov	r9, r1
 800829a:	f7f8 f915 	bl	80004c8 <__aeabi_dmul>
 800829e:	a36c      	add	r3, pc, #432	; (adr r3, 8008450 <atan+0x288>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	4606      	mov	r6, r0
 80082a6:	460f      	mov	r7, r1
 80082a8:	f7f8 f90e 	bl	80004c8 <__aeabi_dmul>
 80082ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008458 <atan+0x290>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ff53 	bl	800015c <__adddf3>
 80082b6:	4632      	mov	r2, r6
 80082b8:	463b      	mov	r3, r7
 80082ba:	f7f8 f905 	bl	80004c8 <__aeabi_dmul>
 80082be:	a368      	add	r3, pc, #416	; (adr r3, 8008460 <atan+0x298>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f7 ff4a 	bl	800015c <__adddf3>
 80082c8:	4632      	mov	r2, r6
 80082ca:	463b      	mov	r3, r7
 80082cc:	f7f8 f8fc 	bl	80004c8 <__aeabi_dmul>
 80082d0:	a365      	add	r3, pc, #404	; (adr r3, 8008468 <atan+0x2a0>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f7 ff41 	bl	800015c <__adddf3>
 80082da:	4632      	mov	r2, r6
 80082dc:	463b      	mov	r3, r7
 80082de:	f7f8 f8f3 	bl	80004c8 <__aeabi_dmul>
 80082e2:	a363      	add	r3, pc, #396	; (adr r3, 8008470 <atan+0x2a8>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f7 ff38 	bl	800015c <__adddf3>
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	f7f8 f8ea 	bl	80004c8 <__aeabi_dmul>
 80082f4:	a360      	add	r3, pc, #384	; (adr r3, 8008478 <atan+0x2b0>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ff2f 	bl	800015c <__adddf3>
 80082fe:	4642      	mov	r2, r8
 8008300:	464b      	mov	r3, r9
 8008302:	f7f8 f8e1 	bl	80004c8 <__aeabi_dmul>
 8008306:	a35e      	add	r3, pc, #376	; (adr r3, 8008480 <atan+0x2b8>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	4680      	mov	r8, r0
 800830e:	4689      	mov	r9, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f8 f8d8 	bl	80004c8 <__aeabi_dmul>
 8008318:	a35b      	add	r3, pc, #364	; (adr r3, 8008488 <atan+0x2c0>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f7 ff1b 	bl	8000158 <__aeabi_dsub>
 8008322:	4632      	mov	r2, r6
 8008324:	463b      	mov	r3, r7
 8008326:	f7f8 f8cf 	bl	80004c8 <__aeabi_dmul>
 800832a:	a359      	add	r3, pc, #356	; (adr r3, 8008490 <atan+0x2c8>)
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f7f7 ff12 	bl	8000158 <__aeabi_dsub>
 8008334:	4632      	mov	r2, r6
 8008336:	463b      	mov	r3, r7
 8008338:	f7f8 f8c6 	bl	80004c8 <__aeabi_dmul>
 800833c:	a356      	add	r3, pc, #344	; (adr r3, 8008498 <atan+0x2d0>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f7 ff09 	bl	8000158 <__aeabi_dsub>
 8008346:	4632      	mov	r2, r6
 8008348:	463b      	mov	r3, r7
 800834a:	f7f8 f8bd 	bl	80004c8 <__aeabi_dmul>
 800834e:	a354      	add	r3, pc, #336	; (adr r3, 80084a0 <atan+0x2d8>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f7 ff00 	bl	8000158 <__aeabi_dsub>
 8008358:	4632      	mov	r2, r6
 800835a:	463b      	mov	r3, r7
 800835c:	f7f8 f8b4 	bl	80004c8 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f7 fef8 	bl	800015c <__adddf3>
 800836c:	4622      	mov	r2, r4
 800836e:	462b      	mov	r3, r5
 8008370:	f7f8 f8aa 	bl	80004c8 <__aeabi_dmul>
 8008374:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	d144      	bne.n	8008408 <atan+0x240>
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f7 fee9 	bl	8000158 <__aeabi_dsub>
 8008386:	e734      	b.n	80081f2 <atan+0x2a>
 8008388:	2200      	movs	r2, #0
 800838a:	4b4c      	ldr	r3, [pc, #304]	; (80084bc <atan+0x2f4>)
 800838c:	f7f7 fee4 	bl	8000158 <__aeabi_dsub>
 8008390:	2200      	movs	r2, #0
 8008392:	4606      	mov	r6, r0
 8008394:	460f      	mov	r7, r1
 8008396:	4b49      	ldr	r3, [pc, #292]	; (80084bc <atan+0x2f4>)
 8008398:	4620      	mov	r0, r4
 800839a:	4629      	mov	r1, r5
 800839c:	f7f7 fede 	bl	800015c <__adddf3>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f8 f9b8 	bl	800071c <__aeabi_ddiv>
 80083ac:	f04f 0a01 	mov.w	sl, #1
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	e767      	b.n	8008286 <atan+0xbe>
 80083b6:	4b43      	ldr	r3, [pc, #268]	; (80084c4 <atan+0x2fc>)
 80083b8:	429e      	cmp	r6, r3
 80083ba:	dc1a      	bgt.n	80083f2 <atan+0x22a>
 80083bc:	2200      	movs	r2, #0
 80083be:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <atan+0x300>)
 80083c0:	f7f7 feca 	bl	8000158 <__aeabi_dsub>
 80083c4:	2200      	movs	r2, #0
 80083c6:	4606      	mov	r6, r0
 80083c8:	460f      	mov	r7, r1
 80083ca:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <atan+0x300>)
 80083cc:	4620      	mov	r0, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f8 f87a 	bl	80004c8 <__aeabi_dmul>
 80083d4:	2200      	movs	r2, #0
 80083d6:	4b39      	ldr	r3, [pc, #228]	; (80084bc <atan+0x2f4>)
 80083d8:	f7f7 fec0 	bl	800015c <__adddf3>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f8 f99a 	bl	800071c <__aeabi_ddiv>
 80083e8:	f04f 0a02 	mov.w	sl, #2
 80083ec:	4604      	mov	r4, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	e749      	b.n	8008286 <atan+0xbe>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	2000      	movs	r0, #0
 80083f8:	4934      	ldr	r1, [pc, #208]	; (80084cc <atan+0x304>)
 80083fa:	f7f8 f98f 	bl	800071c <__aeabi_ddiv>
 80083fe:	f04f 0a03 	mov.w	sl, #3
 8008402:	4604      	mov	r4, r0
 8008404:	460d      	mov	r5, r1
 8008406:	e73e      	b.n	8008286 <atan+0xbe>
 8008408:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <atan+0x308>)
 800840a:	4e32      	ldr	r6, [pc, #200]	; (80084d4 <atan+0x30c>)
 800840c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008410:	4456      	add	r6, sl
 8008412:	449a      	add	sl, r3
 8008414:	e9da 2300 	ldrd	r2, r3, [sl]
 8008418:	f7f7 fe9e 	bl	8000158 <__aeabi_dsub>
 800841c:	4622      	mov	r2, r4
 800841e:	462b      	mov	r3, r5
 8008420:	f7f7 fe9a 	bl	8000158 <__aeabi_dsub>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	e9d6 0100 	ldrd	r0, r1, [r6]
 800842c:	f7f7 fe94 	bl	8000158 <__aeabi_dsub>
 8008430:	f1bb 0f00 	cmp.w	fp, #0
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	f6bf aee4 	bge.w	8008204 <atan+0x3c>
 800843c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008440:	461d      	mov	r5, r3
 8008442:	e6df      	b.n	8008204 <atan+0x3c>
 8008444:	4d24      	ldr	r5, [pc, #144]	; (80084d8 <atan+0x310>)
 8008446:	e6dd      	b.n	8008204 <atan+0x3c>
 8008448:	8800759c 	.word	0x8800759c
 800844c:	7e37e43c 	.word	0x7e37e43c
 8008450:	e322da11 	.word	0xe322da11
 8008454:	3f90ad3a 	.word	0x3f90ad3a
 8008458:	24760deb 	.word	0x24760deb
 800845c:	3fa97b4b 	.word	0x3fa97b4b
 8008460:	a0d03d51 	.word	0xa0d03d51
 8008464:	3fb10d66 	.word	0x3fb10d66
 8008468:	c54c206e 	.word	0xc54c206e
 800846c:	3fb745cd 	.word	0x3fb745cd
 8008470:	920083ff 	.word	0x920083ff
 8008474:	3fc24924 	.word	0x3fc24924
 8008478:	5555550d 	.word	0x5555550d
 800847c:	3fd55555 	.word	0x3fd55555
 8008480:	2c6a6c2f 	.word	0x2c6a6c2f
 8008484:	bfa2b444 	.word	0xbfa2b444
 8008488:	52defd9a 	.word	0x52defd9a
 800848c:	3fadde2d 	.word	0x3fadde2d
 8008490:	af749a6d 	.word	0xaf749a6d
 8008494:	3fb3b0f2 	.word	0x3fb3b0f2
 8008498:	fe231671 	.word	0xfe231671
 800849c:	3fbc71c6 	.word	0x3fbc71c6
 80084a0:	9998ebc4 	.word	0x9998ebc4
 80084a4:	3fc99999 	.word	0x3fc99999
 80084a8:	440fffff 	.word	0x440fffff
 80084ac:	7ff00000 	.word	0x7ff00000
 80084b0:	54442d18 	.word	0x54442d18
 80084b4:	3ff921fb 	.word	0x3ff921fb
 80084b8:	3fdbffff 	.word	0x3fdbffff
 80084bc:	3ff00000 	.word	0x3ff00000
 80084c0:	3ff2ffff 	.word	0x3ff2ffff
 80084c4:	40037fff 	.word	0x40037fff
 80084c8:	3ff80000 	.word	0x3ff80000
 80084cc:	bff00000 	.word	0xbff00000
 80084d0:	08008bd0 	.word	0x08008bd0
 80084d4:	08008bb0 	.word	0x08008bb0
 80084d8:	bff921fb 	.word	0xbff921fb

080084dc <fabs>:
 80084dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084e0:	4619      	mov	r1, r3
 80084e2:	4770      	bx	lr

080084e4 <atan2>:
 80084e4:	f000 b854 	b.w	8008590 <__ieee754_atan2>

080084e8 <sqrt>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	b08b      	sub	sp, #44	; 0x2c
 80084ee:	4604      	mov	r4, r0
 80084f0:	460d      	mov	r5, r1
 80084f2:	f000 f92b 	bl	800874c <__ieee754_sqrt>
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <sqrt+0xa0>)
 80084f8:	4680      	mov	r8, r0
 80084fa:	f993 a000 	ldrsb.w	sl, [r3]
 80084fe:	4689      	mov	r9, r1
 8008500:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008504:	d02b      	beq.n	800855e <sqrt+0x76>
 8008506:	4622      	mov	r2, r4
 8008508:	462b      	mov	r3, r5
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7f8 fa75 	bl	80009fc <__aeabi_dcmpun>
 8008512:	4683      	mov	fp, r0
 8008514:	bb18      	cbnz	r0, 800855e <sqrt+0x76>
 8008516:	2600      	movs	r6, #0
 8008518:	2700      	movs	r7, #0
 800851a:	4632      	mov	r2, r6
 800851c:	463b      	mov	r3, r7
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f8 fa43 	bl	80009ac <__aeabi_dcmplt>
 8008526:	b1d0      	cbz	r0, 800855e <sqrt+0x76>
 8008528:	2301      	movs	r3, #1
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4b17      	ldr	r3, [pc, #92]	; (800858c <sqrt+0xa4>)
 800852e:	f8cd b020 	str.w	fp, [sp, #32]
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008538:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800853c:	f1ba 0f00 	cmp.w	sl, #0
 8008540:	d112      	bne.n	8008568 <sqrt+0x80>
 8008542:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008546:	4668      	mov	r0, sp
 8008548:	f000 f9ac 	bl	80088a4 <matherr>
 800854c:	b1b8      	cbz	r0, 800857e <sqrt+0x96>
 800854e:	9b08      	ldr	r3, [sp, #32]
 8008550:	b11b      	cbz	r3, 800855a <sqrt+0x72>
 8008552:	f7ff fe07 	bl	8008164 <__errno>
 8008556:	9b08      	ldr	r3, [sp, #32]
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	b00b      	add	sp, #44	; 0x2c
 8008564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	4632      	mov	r2, r6
 800856a:	463b      	mov	r3, r7
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 f8d4 	bl	800071c <__aeabi_ddiv>
 8008574:	f1ba 0f02 	cmp.w	sl, #2
 8008578:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800857c:	d1e3      	bne.n	8008546 <sqrt+0x5e>
 800857e:	f7ff fdf1 	bl	8008164 <__errno>
 8008582:	2321      	movs	r3, #33	; 0x21
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	e7e2      	b.n	800854e <sqrt+0x66>
 8008588:	2000011c 	.word	0x2000011c
 800858c:	08008bf0 	.word	0x08008bf0

08008590 <__ieee754_atan2>:
 8008590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4256      	negs	r6, r2
 8008596:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800859a:	4316      	orrs	r6, r2
 800859c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008748 <__ieee754_atan2+0x1b8>
 80085a0:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80085a4:	454e      	cmp	r6, r9
 80085a6:	4604      	mov	r4, r0
 80085a8:	460d      	mov	r5, r1
 80085aa:	469e      	mov	lr, r3
 80085ac:	d808      	bhi.n	80085c0 <__ieee754_atan2+0x30>
 80085ae:	4246      	negs	r6, r0
 80085b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80085b4:	4306      	orrs	r6, r0
 80085b6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80085ba:	454e      	cmp	r6, r9
 80085bc:	4688      	mov	r8, r1
 80085be:	d906      	bls.n	80085ce <__ieee754_atan2+0x3e>
 80085c0:	4620      	mov	r0, r4
 80085c2:	4629      	mov	r1, r5
 80085c4:	f7f7 fdca 	bl	800015c <__adddf3>
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	e030      	b.n	8008630 <__ieee754_atan2+0xa0>
 80085ce:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80085d2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80085d6:	4316      	orrs	r6, r2
 80085d8:	d103      	bne.n	80085e2 <__ieee754_atan2+0x52>
 80085da:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085de:	f7ff bdf3 	b.w	80081c8 <atan>
 80085e2:	179e      	asrs	r6, r3, #30
 80085e4:	f006 0602 	and.w	r6, r6, #2
 80085e8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80085ec:	ea57 0100 	orrs.w	r1, r7, r0
 80085f0:	d107      	bne.n	8008602 <__ieee754_atan2+0x72>
 80085f2:	2e02      	cmp	r6, #2
 80085f4:	d079      	beq.n	80086ea <__ieee754_atan2+0x15a>
 80085f6:	2e03      	cmp	r6, #3
 80085f8:	d11a      	bne.n	8008630 <__ieee754_atan2+0xa0>
 80085fa:	a541      	add	r5, pc, #260	; (adr r5, 8008700 <__ieee754_atan2+0x170>)
 80085fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008600:	e016      	b.n	8008630 <__ieee754_atan2+0xa0>
 8008602:	ea5c 0102 	orrs.w	r1, ip, r2
 8008606:	d106      	bne.n	8008616 <__ieee754_atan2+0x86>
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	da71      	bge.n	80086f2 <__ieee754_atan2+0x162>
 800860e:	a53e      	add	r5, pc, #248	; (adr r5, 8008708 <__ieee754_atan2+0x178>)
 8008610:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008614:	e00c      	b.n	8008630 <__ieee754_atan2+0xa0>
 8008616:	45cc      	cmp	ip, r9
 8008618:	d123      	bne.n	8008662 <__ieee754_atan2+0xd2>
 800861a:	4567      	cmp	r7, ip
 800861c:	d114      	bne.n	8008648 <__ieee754_atan2+0xb8>
 800861e:	2e02      	cmp	r6, #2
 8008620:	d00a      	beq.n	8008638 <__ieee754_atan2+0xa8>
 8008622:	2e03      	cmp	r6, #3
 8008624:	d00c      	beq.n	8008640 <__ieee754_atan2+0xb0>
 8008626:	2e01      	cmp	r6, #1
 8008628:	d15b      	bne.n	80086e2 <__ieee754_atan2+0x152>
 800862a:	a539      	add	r5, pc, #228	; (adr r5, 8008710 <__ieee754_atan2+0x180>)
 800862c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008630:	4620      	mov	r0, r4
 8008632:	4629      	mov	r1, r5
 8008634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008638:	a537      	add	r5, pc, #220	; (adr r5, 8008718 <__ieee754_atan2+0x188>)
 800863a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800863e:	e7f7      	b.n	8008630 <__ieee754_atan2+0xa0>
 8008640:	a537      	add	r5, pc, #220	; (adr r5, 8008720 <__ieee754_atan2+0x190>)
 8008642:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008646:	e7f3      	b.n	8008630 <__ieee754_atan2+0xa0>
 8008648:	2e02      	cmp	r6, #2
 800864a:	d04e      	beq.n	80086ea <__ieee754_atan2+0x15a>
 800864c:	2e03      	cmp	r6, #3
 800864e:	d0d4      	beq.n	80085fa <__ieee754_atan2+0x6a>
 8008650:	2e01      	cmp	r6, #1
 8008652:	f04f 0400 	mov.w	r4, #0
 8008656:	d102      	bne.n	800865e <__ieee754_atan2+0xce>
 8008658:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800865c:	e7e8      	b.n	8008630 <__ieee754_atan2+0xa0>
 800865e:	2500      	movs	r5, #0
 8008660:	e7e6      	b.n	8008630 <__ieee754_atan2+0xa0>
 8008662:	454f      	cmp	r7, r9
 8008664:	d0d0      	beq.n	8008608 <__ieee754_atan2+0x78>
 8008666:	eba7 070c 	sub.w	r7, r7, ip
 800866a:	153f      	asrs	r7, r7, #20
 800866c:	2f3c      	cmp	r7, #60	; 0x3c
 800866e:	dc1e      	bgt.n	80086ae <__ieee754_atan2+0x11e>
 8008670:	2b00      	cmp	r3, #0
 8008672:	da01      	bge.n	8008678 <__ieee754_atan2+0xe8>
 8008674:	373c      	adds	r7, #60	; 0x3c
 8008676:	db1e      	blt.n	80086b6 <__ieee754_atan2+0x126>
 8008678:	4620      	mov	r0, r4
 800867a:	4629      	mov	r1, r5
 800867c:	f7f8 f84e 	bl	800071c <__aeabi_ddiv>
 8008680:	f7ff ff2c 	bl	80084dc <fabs>
 8008684:	f7ff fda0 	bl	80081c8 <atan>
 8008688:	4604      	mov	r4, r0
 800868a:	460d      	mov	r5, r1
 800868c:	2e01      	cmp	r6, #1
 800868e:	d015      	beq.n	80086bc <__ieee754_atan2+0x12c>
 8008690:	2e02      	cmp	r6, #2
 8008692:	d017      	beq.n	80086c4 <__ieee754_atan2+0x134>
 8008694:	2e00      	cmp	r6, #0
 8008696:	d0cb      	beq.n	8008630 <__ieee754_atan2+0xa0>
 8008698:	a323      	add	r3, pc, #140	; (adr r3, 8008728 <__ieee754_atan2+0x198>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f7 fd59 	bl	8000158 <__aeabi_dsub>
 80086a6:	a322      	add	r3, pc, #136	; (adr r3, 8008730 <__ieee754_atan2+0x1a0>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	e016      	b.n	80086dc <__ieee754_atan2+0x14c>
 80086ae:	a522      	add	r5, pc, #136	; (adr r5, 8008738 <__ieee754_atan2+0x1a8>)
 80086b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086b4:	e7ea      	b.n	800868c <__ieee754_atan2+0xfc>
 80086b6:	2400      	movs	r4, #0
 80086b8:	2500      	movs	r5, #0
 80086ba:	e7e7      	b.n	800868c <__ieee754_atan2+0xfc>
 80086bc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80086c0:	461d      	mov	r5, r3
 80086c2:	e7b5      	b.n	8008630 <__ieee754_atan2+0xa0>
 80086c4:	a318      	add	r3, pc, #96	; (adr r3, 8008728 <__ieee754_atan2+0x198>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f7 fd43 	bl	8000158 <__aeabi_dsub>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	a116      	add	r1, pc, #88	; (adr r1, 8008730 <__ieee754_atan2+0x1a0>)
 80086d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086dc:	f7f7 fd3c 	bl	8000158 <__aeabi_dsub>
 80086e0:	e772      	b.n	80085c8 <__ieee754_atan2+0x38>
 80086e2:	a517      	add	r5, pc, #92	; (adr r5, 8008740 <__ieee754_atan2+0x1b0>)
 80086e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086e8:	e7a2      	b.n	8008630 <__ieee754_atan2+0xa0>
 80086ea:	a511      	add	r5, pc, #68	; (adr r5, 8008730 <__ieee754_atan2+0x1a0>)
 80086ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086f0:	e79e      	b.n	8008630 <__ieee754_atan2+0xa0>
 80086f2:	a511      	add	r5, pc, #68	; (adr r5, 8008738 <__ieee754_atan2+0x1a8>)
 80086f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086f8:	e79a      	b.n	8008630 <__ieee754_atan2+0xa0>
 80086fa:	bf00      	nop
 80086fc:	f3af 8000 	nop.w
 8008700:	54442d18 	.word	0x54442d18
 8008704:	c00921fb 	.word	0xc00921fb
 8008708:	54442d18 	.word	0x54442d18
 800870c:	bff921fb 	.word	0xbff921fb
 8008710:	54442d18 	.word	0x54442d18
 8008714:	bfe921fb 	.word	0xbfe921fb
 8008718:	7f3321d2 	.word	0x7f3321d2
 800871c:	4002d97c 	.word	0x4002d97c
 8008720:	7f3321d2 	.word	0x7f3321d2
 8008724:	c002d97c 	.word	0xc002d97c
 8008728:	33145c07 	.word	0x33145c07
 800872c:	3ca1a626 	.word	0x3ca1a626
 8008730:	54442d18 	.word	0x54442d18
 8008734:	400921fb 	.word	0x400921fb
 8008738:	54442d18 	.word	0x54442d18
 800873c:	3ff921fb 	.word	0x3ff921fb
 8008740:	54442d18 	.word	0x54442d18
 8008744:	3fe921fb 	.word	0x3fe921fb
 8008748:	7ff00000 	.word	0x7ff00000

0800874c <__ieee754_sqrt>:
 800874c:	4b54      	ldr	r3, [pc, #336]	; (80088a0 <__ieee754_sqrt+0x154>)
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	438b      	bics	r3, r1
 8008754:	4606      	mov	r6, r0
 8008756:	460d      	mov	r5, r1
 8008758:	460a      	mov	r2, r1
 800875a:	460c      	mov	r4, r1
 800875c:	d10f      	bne.n	800877e <__ieee754_sqrt+0x32>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	f7f7 feb1 	bl	80004c8 <__aeabi_dmul>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4630      	mov	r0, r6
 800876c:	4629      	mov	r1, r5
 800876e:	f7f7 fcf5 	bl	800015c <__adddf3>
 8008772:	4606      	mov	r6, r0
 8008774:	460d      	mov	r5, r1
 8008776:	4630      	mov	r0, r6
 8008778:	4629      	mov	r1, r5
 800877a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877e:	2900      	cmp	r1, #0
 8008780:	4607      	mov	r7, r0
 8008782:	4603      	mov	r3, r0
 8008784:	dc0e      	bgt.n	80087a4 <__ieee754_sqrt+0x58>
 8008786:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800878a:	ea5c 0707 	orrs.w	r7, ip, r7
 800878e:	d0f2      	beq.n	8008776 <__ieee754_sqrt+0x2a>
 8008790:	b141      	cbz	r1, 80087a4 <__ieee754_sqrt+0x58>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	f7f7 fcdf 	bl	8000158 <__aeabi_dsub>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	f7f7 ffbd 	bl	800071c <__aeabi_ddiv>
 80087a2:	e7e6      	b.n	8008772 <__ieee754_sqrt+0x26>
 80087a4:	1512      	asrs	r2, r2, #20
 80087a6:	d074      	beq.n	8008892 <__ieee754_sqrt+0x146>
 80087a8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80087ac:	07d5      	lsls	r5, r2, #31
 80087ae:	f04f 0500 	mov.w	r5, #0
 80087b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80087b6:	bf48      	it	mi
 80087b8:	0fd9      	lsrmi	r1, r3, #31
 80087ba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80087be:	bf44      	itt	mi
 80087c0:	005b      	lslmi	r3, r3, #1
 80087c2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80087c6:	1051      	asrs	r1, r2, #1
 80087c8:	0fda      	lsrs	r2, r3, #31
 80087ca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80087ce:	4628      	mov	r0, r5
 80087d0:	2216      	movs	r2, #22
 80087d2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	1987      	adds	r7, r0, r6
 80087da:	42a7      	cmp	r7, r4
 80087dc:	bfde      	ittt	le
 80087de:	19b8      	addle	r0, r7, r6
 80087e0:	1be4      	suble	r4, r4, r7
 80087e2:	19ad      	addle	r5, r5, r6
 80087e4:	0fdf      	lsrs	r7, r3, #31
 80087e6:	3a01      	subs	r2, #1
 80087e8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80087ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80087f4:	d1f0      	bne.n	80087d8 <__ieee754_sqrt+0x8c>
 80087f6:	f04f 0c20 	mov.w	ip, #32
 80087fa:	4696      	mov	lr, r2
 80087fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008800:	4284      	cmp	r4, r0
 8008802:	eb06 070e 	add.w	r7, r6, lr
 8008806:	dc02      	bgt.n	800880e <__ieee754_sqrt+0xc2>
 8008808:	d112      	bne.n	8008830 <__ieee754_sqrt+0xe4>
 800880a:	429f      	cmp	r7, r3
 800880c:	d810      	bhi.n	8008830 <__ieee754_sqrt+0xe4>
 800880e:	2f00      	cmp	r7, #0
 8008810:	eb07 0e06 	add.w	lr, r7, r6
 8008814:	da42      	bge.n	800889c <__ieee754_sqrt+0x150>
 8008816:	f1be 0f00 	cmp.w	lr, #0
 800881a:	db3f      	blt.n	800889c <__ieee754_sqrt+0x150>
 800881c:	f100 0801 	add.w	r8, r0, #1
 8008820:	1a24      	subs	r4, r4, r0
 8008822:	4640      	mov	r0, r8
 8008824:	429f      	cmp	r7, r3
 8008826:	bf88      	it	hi
 8008828:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800882c:	1bdb      	subs	r3, r3, r7
 800882e:	4432      	add	r2, r6
 8008830:	0064      	lsls	r4, r4, #1
 8008832:	f1bc 0c01 	subs.w	ip, ip, #1
 8008836:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800883a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800883e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008842:	d1dd      	bne.n	8008800 <__ieee754_sqrt+0xb4>
 8008844:	4323      	orrs	r3, r4
 8008846:	d006      	beq.n	8008856 <__ieee754_sqrt+0x10a>
 8008848:	1c54      	adds	r4, r2, #1
 800884a:	bf0b      	itete	eq
 800884c:	4662      	moveq	r2, ip
 800884e:	3201      	addne	r2, #1
 8008850:	3501      	addeq	r5, #1
 8008852:	f022 0201 	bicne.w	r2, r2, #1
 8008856:	106b      	asrs	r3, r5, #1
 8008858:	0852      	lsrs	r2, r2, #1
 800885a:	07e8      	lsls	r0, r5, #31
 800885c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008860:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008864:	bf48      	it	mi
 8008866:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800886a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800886e:	4616      	mov	r6, r2
 8008870:	e781      	b.n	8008776 <__ieee754_sqrt+0x2a>
 8008872:	0adc      	lsrs	r4, r3, #11
 8008874:	3915      	subs	r1, #21
 8008876:	055b      	lsls	r3, r3, #21
 8008878:	2c00      	cmp	r4, #0
 800887a:	d0fa      	beq.n	8008872 <__ieee754_sqrt+0x126>
 800887c:	02e6      	lsls	r6, r4, #11
 800887e:	d50a      	bpl.n	8008896 <__ieee754_sqrt+0x14a>
 8008880:	f1c2 0020 	rsb	r0, r2, #32
 8008884:	fa23 f000 	lsr.w	r0, r3, r0
 8008888:	1e55      	subs	r5, r2, #1
 800888a:	4093      	lsls	r3, r2
 800888c:	4304      	orrs	r4, r0
 800888e:	1b4a      	subs	r2, r1, r5
 8008890:	e78a      	b.n	80087a8 <__ieee754_sqrt+0x5c>
 8008892:	4611      	mov	r1, r2
 8008894:	e7f0      	b.n	8008878 <__ieee754_sqrt+0x12c>
 8008896:	0064      	lsls	r4, r4, #1
 8008898:	3201      	adds	r2, #1
 800889a:	e7ef      	b.n	800887c <__ieee754_sqrt+0x130>
 800889c:	4680      	mov	r8, r0
 800889e:	e7bf      	b.n	8008820 <__ieee754_sqrt+0xd4>
 80088a0:	7ff00000 	.word	0x7ff00000

080088a4 <matherr>:
 80088a4:	2000      	movs	r0, #0
 80088a6:	4770      	bx	lr

080088a8 <_init>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr

080088b4 <_fini>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr
