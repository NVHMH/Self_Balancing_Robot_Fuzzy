
Self_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009298  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  080093a8  080093a8  000193a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009730  08009730  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08009730  08009730  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009730  08009730  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08009738  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000120  08009858  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08009858  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015152  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002992  00000000  00000000  0003529b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  00037c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  00038fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019953  00000000  00000000  0003a248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7b9  00000000  00000000  00053b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f9fb  00000000  00000000  00062354  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1d4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b68  00000000  00000000  000f1dcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000120 	.word	0x20000120
 800012c:	00000000 	.word	0x00000000
 8000130:	08009390 	.word	0x08009390

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000124 	.word	0x20000124
 800014c:	08009390 	.word	0x08009390

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <SBR1_init>:
static const float u_PS_p[] = { 0.3333f };
static const float u_PM_p[] = { 0.4500f };//0.6670
static const float u_PB_p[] = { 1.0000f };


void SBR1_init( void ){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( SBR1_inputs, theta, -1.0000f, 1.0000f );
 8001162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001166:	4a8d      	ldr	r2, [pc, #564]	; (800139c <SBR1_init+0x240>)
 8001168:	2100      	movs	r1, #0
 800116a:	488d      	ldr	r0, [pc, #564]	; (80013a0 <SBR1_init+0x244>)
 800116c:	f001 fcea 	bl	8002b44 <qFIS_InputSetup>
    qFIS_InputSetup( SBR1_inputs, thetadot, -1.0000f, 1.0000f );
 8001170:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001174:	4a89      	ldr	r2, [pc, #548]	; (800139c <SBR1_init+0x240>)
 8001176:	2101      	movs	r1, #1
 8001178:	4889      	ldr	r0, [pc, #548]	; (80013a0 <SBR1_init+0x244>)
 800117a:	f001 fce3 	bl	8002b44 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( SBR1_outputs, u, -1.0000f, 1.0000f );
 800117e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001182:	4a86      	ldr	r2, [pc, #536]	; (800139c <SBR1_init+0x240>)
 8001184:	2100      	movs	r1, #0
 8001186:	4887      	ldr	r0, [pc, #540]	; (80013a4 <SBR1_init+0x248>)
 8001188:	f001 fd07 	bl	8002b9a <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, theta, theta_NB, trapmf, NULL, theta_NB_p, 1.0f );
 800118c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	4b85      	ldr	r3, [pc, #532]	; (80013a8 <SBR1_init+0x24c>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2302      	movs	r3, #2
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	4882      	ldr	r0, [pc, #520]	; (80013ac <SBR1_init+0x250>)
 80011a2:	f001 fda3 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_NS, trapmf, NULL, theta_NS_p, 1.0f );
 80011a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <SBR1_init+0x254>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	2201      	movs	r2, #1
 80011b8:	2100      	movs	r1, #0
 80011ba:	487c      	ldr	r0, [pc, #496]	; (80013ac <SBR1_init+0x250>)
 80011bc:	f001 fd96 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_ZE, trimf, NULL, theta_ZE_p, 1.0f );
 80011c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <SBR1_init+0x258>)
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2300      	movs	r3, #0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2202      	movs	r2, #2
 80011d2:	2100      	movs	r1, #0
 80011d4:	4875      	ldr	r0, [pc, #468]	; (80013ac <SBR1_init+0x250>)
 80011d6:	f001 fd89 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PS, trapmf, NULL, theta_PS_p, 1.0f );
 80011da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <SBR1_init+0x25c>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2302      	movs	r3, #2
 80011ea:	2203      	movs	r2, #3
 80011ec:	2100      	movs	r1, #0
 80011ee:	486f      	ldr	r0, [pc, #444]	; (80013ac <SBR1_init+0x250>)
 80011f0:	f001 fd7c 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PB, trapmf, NULL, theta_PB_p, 1.0f );
 80011f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <SBR1_init+0x260>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2302      	movs	r3, #2
 8001204:	2204      	movs	r2, #4
 8001206:	2100      	movs	r1, #0
 8001208:	4868      	ldr	r0, [pc, #416]	; (80013ac <SBR1_init+0x250>)
 800120a:	f001 fd6f 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NB, trimf, NULL, thetadot_NB_p, 1.0f );
 800120e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <SBR1_init+0x264>)
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2205      	movs	r2, #5
 8001220:	2101      	movs	r1, #1
 8001222:	4862      	ldr	r0, [pc, #392]	; (80013ac <SBR1_init+0x250>)
 8001224:	f001 fd62 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NS, trimf, NULL, thetadot_NS_p, 1.0f );
 8001228:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <SBR1_init+0x268>)
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2206      	movs	r2, #6
 800123a:	2101      	movs	r1, #1
 800123c:	485b      	ldr	r0, [pc, #364]	; (80013ac <SBR1_init+0x250>)
 800123e:	f001 fd55 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_ZE, trimf, NULL, thetadot_ZE_p, 1.0f );
 8001242:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <SBR1_init+0x26c>)
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2207      	movs	r2, #7
 8001254:	2101      	movs	r1, #1
 8001256:	4855      	ldr	r0, [pc, #340]	; (80013ac <SBR1_init+0x250>)
 8001258:	f001 fd48 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PS, trimf, NULL, thetadot_PS_p, 1.0f );
 800125c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <SBR1_init+0x270>)
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	2208      	movs	r2, #8
 800126e:	2101      	movs	r1, #1
 8001270:	484e      	ldr	r0, [pc, #312]	; (80013ac <SBR1_init+0x250>)
 8001272:	f001 fd3b 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PB, trimf, NULL, thetadot_PB_p, 1.0f );
 8001276:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <SBR1_init+0x274>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2209      	movs	r2, #9
 8001288:	2101      	movs	r1, #1
 800128a:	4848      	ldr	r0, [pc, #288]	; (80013ac <SBR1_init+0x250>)
 800128c:	f001 fd2e 	bl	8002cec <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001290:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <SBR1_init+0x278>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2313      	movs	r3, #19
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	484c      	ldr	r0, [pc, #304]	; (80013d8 <SBR1_init+0x27c>)
 80012a6:	f001 fd21 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 80012aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <SBR1_init+0x280>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2313      	movs	r3, #19
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4846      	ldr	r0, [pc, #280]	; (80013d8 <SBR1_init+0x27c>)
 80012c0:	f001 fd14 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 80012c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <SBR1_init+0x284>)
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2313      	movs	r3, #19
 80012d4:	2202      	movs	r2, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	483f      	ldr	r0, [pc, #252]	; (80013d8 <SBR1_init+0x27c>)
 80012da:	f001 fd07 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 80012de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <SBR1_init+0x288>)
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2313      	movs	r3, #19
 80012ee:	2203      	movs	r2, #3
 80012f0:	2100      	movs	r1, #0
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <SBR1_init+0x27c>)
 80012f4:	f001 fcfa 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 80012f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <SBR1_init+0x28c>)
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2313      	movs	r3, #19
 8001308:	2204      	movs	r2, #4
 800130a:	2100      	movs	r1, #0
 800130c:	4832      	ldr	r0, [pc, #200]	; (80013d8 <SBR1_init+0x27c>)
 800130e:	f001 fced 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 8001312:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <SBR1_init+0x290>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2313      	movs	r3, #19
 8001322:	2205      	movs	r2, #5
 8001324:	2100      	movs	r1, #0
 8001326:	482c      	ldr	r0, [pc, #176]	; (80013d8 <SBR1_init+0x27c>)
 8001328:	f001 fce0 	bl	8002cec <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 800132c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <SBR1_init+0x294>)
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2313      	movs	r3, #19
 800133c:	2206      	movs	r2, #6
 800133e:	2100      	movs	r1, #0
 8001340:	4825      	ldr	r0, [pc, #148]	; (80013d8 <SBR1_init+0x27c>)
 8001342:	f001 fcd3 	bl	8002cec <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &SBR1, Sugeno,
 8001346:	2319      	movs	r3, #25
 8001348:	9308      	str	r3, [sp, #32]
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <SBR1_init+0x298>)
 800134c:	9307      	str	r3, [sp, #28]
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <SBR1_init+0x29c>)
 8001350:	9306      	str	r3, [sp, #24]
 8001352:	238c      	movs	r3, #140	; 0x8c
 8001354:	9305      	str	r3, [sp, #20]
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SBR1_init+0x27c>)
 8001358:	9304      	str	r3, [sp, #16]
 800135a:	23c8      	movs	r3, #200	; 0xc8
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <SBR1_init+0x250>)
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2334      	movs	r3, #52	; 0x34
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <SBR1_init+0x248>)
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2318      	movs	r3, #24
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <SBR1_init+0x244>)
 800136e:	2101      	movs	r1, #1
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <SBR1_init+0x2a0>)
 8001372:	f001 fb0f 	bl	8002994 <qFIS_Setup>
                SBR1_inputs, sizeof(SBR1_inputs),
                SBR1_outputs, sizeof(SBR1_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &SBR1, qFIS_AND, qFIS_PROD );
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4820      	ldr	r0, [pc, #128]	; (80013fc <SBR1_init+0x2a0>)
 800137c:	f001 fa98 	bl	80028b0 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Implication, qFIS_PROD );
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	481d      	ldr	r0, [pc, #116]	; (80013fc <SBR1_init+0x2a0>)
 8001386:	f001 fa93 	bl	80028b0 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Aggregation, qFIS_SUM );
 800138a:	2204      	movs	r2, #4
 800138c:	2101      	movs	r1, #1
 800138e:	481b      	ldr	r0, [pc, #108]	; (80013fc <SBR1_init+0x2a0>)
 8001390:	f001 fa8e 	bl	80028b0 <qFIS_SetParameter>
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	bf800000 	.word	0xbf800000
 80013a0:	2000019c 	.word	0x2000019c
 80013a4:	200001b4 	.word	0x200001b4
 80013a8:	08009570 	.word	0x08009570
 80013ac:	200001e8 	.word	0x200001e8
 80013b0:	08009580 	.word	0x08009580
 80013b4:	08009590 	.word	0x08009590
 80013b8:	0800959c 	.word	0x0800959c
 80013bc:	080095ac 	.word	0x080095ac
 80013c0:	080095bc 	.word	0x080095bc
 80013c4:	080095c8 	.word	0x080095c8
 80013c8:	080095d4 	.word	0x080095d4
 80013cc:	080095e0 	.word	0x080095e0
 80013d0:	080095ec 	.word	0x080095ec
 80013d4:	080095f8 	.word	0x080095f8
 80013d8:	200002b0 	.word	0x200002b0
 80013dc:	080095fc 	.word	0x080095fc
 80013e0:	08009600 	.word	0x08009600
 80013e4:	08009604 	.word	0x08009604
 80013e8:	08009608 	.word	0x08009608
 80013ec:	0800960c 	.word	0x0800960c
 80013f0:	08009610 	.word	0x08009610
 80013f4:	2000033c 	.word	0x2000033c
 80013f8:	080093dc 	.word	0x080093dc
 80013fc:	2000013c 	.word	0x2000013c

08001400 <SBR1_run>:

void SBR1_run( float *inputs, float *outputs ) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( SBR1_inputs, theta, inputs[ theta ] );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <SBR1_run+0x58>)
 8001414:	f001 fc2e 	bl	8002c74 <qFIS_SetInput>
    qFIS_SetInput( SBR1_inputs, thetadot, inputs[ thetadot ] );
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	2101      	movs	r1, #1
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <SBR1_run+0x58>)
 8001424:	f001 fc26 	bl	8002c74 <qFIS_SetInput>

    qFIS_Fuzzify( &SBR1 );
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <SBR1_run+0x5c>)
 800142a:	f001 fd3c 	bl	8002ea6 <qFIS_Fuzzify>
    if ( qFIS_Inference( &SBR1 ) > 0 ) {
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <SBR1_run+0x5c>)
 8001430:	f002 f968 	bl	8003704 <qFIS_Inference>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	dd02      	ble.n	8001440 <SBR1_run+0x40>
        qFIS_DeFuzzify( &SBR1 );
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <SBR1_run+0x5c>)
 800143c:	f002 f81d 	bl	800347a <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( SBR1_outputs, u );
 8001440:	2100      	movs	r1, #0
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <SBR1_run+0x60>)
 8001444:	f001 fc36 	bl	8002cb4 <qFIS_GetOutput>
 8001448:	4602      	mov	r2, r0
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000019c 	.word	0x2000019c
 800145c:	2000013c 	.word	0x2000013c
 8001460:	200001b4 	.word	0x200001b4

08001464 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d102      	bne.n	800147c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		u8_flag_10ms = 1;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
	}
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40012c00 	.word	0x40012c00
 800148c:	200003a0 	.word	0x200003a0

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f003 fc07 	bl	8004ca8 <HAL_Init>

  /* USER CODE BEGIN Init */
	 SBR1_init();
 800149a:	f7ff fe5f 	bl	800115c <SBR1_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f8b9 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 fa63 	bl	800196c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a6:	f000 f8f1 	bl	800168c <MX_I2C1_Init>
  MX_TIM1_Init();
 80014aa:	f000 f91d 	bl	80016e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014ae:	f000 f96b 	bl	8001788 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014b2:	f000 f9cd 	bl	8001850 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 fa2f 	bl	8001918 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80014ba:	484b      	ldr	r0, [pc, #300]	; (80015e8 <main+0x158>)
 80014bc:	f005 fbe0 	bl	8006c80 <HAL_TIM_Base_Start_IT>
  Init_tim_pwm();
 80014c0:	f000 fb22 	bl	8001b08 <Init_tim_pwm>

  while (MPU6050_Init(&hi2c1) == 1);
 80014c4:	bf00      	nop
 80014c6:	4849      	ldr	r0, [pc, #292]	; (80015ec <main+0x15c>)
 80014c8:	f000 fc30 	bl	8001d2c <MPU6050_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d0f9      	beq.n	80014c6 <main+0x36>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (u8_flag_10ms)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <main+0x160>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0fb      	beq.n	80014d2 <main+0x42>
	  {
		  u8_flag_10ms = 0;
 80014da:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <main+0x160>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		  MPU6050_Read_All(&hi2c1,&t_MPU6050);
 80014e0:	4944      	ldr	r1, [pc, #272]	; (80015f4 <main+0x164>)
 80014e2:	4842      	ldr	r0, [pc, #264]	; (80015ec <main+0x15c>)
 80014e4:	f000 fc7c 	bl	8001de0 <MPU6050_Read_All>
		  Controller (t_MPU6050.KalmanAngleY, t_MPU6050.Gy* RAD_TO_DEG, &t_fuzzy);
 80014e8:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <main+0x164>)
 80014ea:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <main+0x164>)
 80014f0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80014f4:	a33a      	add	r3, pc, #232	; (adr r3, 80015e0 <main+0x150>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffed 	bl	80004d8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <main+0x168>)
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	460a      	mov	r2, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f000 fb75 	bl	8001c00 <Controller>
		  int theta = t_MPU6050.KalmanAngleY*1000.0;
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <main+0x164>)
 8001518:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <main+0x16c>)
 8001522:	f7fe ffd9 	bl	80004d8 <__aeabi_dmul>
 8001526:	4603      	mov	r3, r0
 8001528:	460c      	mov	r4, r1
 800152a:	4618      	mov	r0, r3
 800152c:	4621      	mov	r1, r4
 800152e:	f7ff fa83 	bl	8000a38 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	60fb      	str	r3, [r7, #12]
		  int theta_dot = t_MPU6050.Gy* RAD_TO_DEG*1000.0;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <main+0x164>)
 8001538:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800153c:	a328      	add	r3, pc, #160	; (adr r3, 80015e0 <main+0x150>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe ffc9 	bl	80004d8 <__aeabi_dmul>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	4618      	mov	r0, r3
 800154c:	4621      	mov	r1, r4
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <main+0x16c>)
 8001554:	f7fe ffc0 	bl	80004d8 <__aeabi_dmul>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	4618      	mov	r0, r3
 800155e:	4621      	mov	r1, r4
 8001560:	f7ff fa6a 	bl	8000a38 <__aeabi_d2iz>
 8001564:	4603      	mov	r3, r0
 8001566:	60bb      	str	r3, [r7, #8]
		  int uk = t_fuzzy.f_out_fuzzy;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <main+0x168>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fdaf 	bl	80010d0 <__aeabi_f2iz>
 8001572:	4603      	mov	r3, r0
 8001574:	607b      	str	r3, [r7, #4]
		  sprintf(data,FRAME,SIGN(theta),ABS(theta),SIGN(theta_dot),ABS(theta_dot),SIGN(uk),ABS(uk));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db01      	blt.n	8001580 <main+0xf0>
 800157c:	4c20      	ldr	r4, [pc, #128]	; (8001600 <main+0x170>)
 800157e:	e000      	b.n	8001582 <main+0xf2>
 8001580:	4c20      	ldr	r4, [pc, #128]	; (8001604 <main+0x174>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8001588:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db01      	blt.n	8001596 <main+0x106>
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <main+0x170>)
 8001594:	e000      	b.n	8001598 <main+0x108>
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <main+0x174>)
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	2a00      	cmp	r2, #0
 800159c:	bfb8      	it	lt
 800159e:	4252      	neglt	r2, r2
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	2900      	cmp	r1, #0
 80015a4:	db01      	blt.n	80015aa <main+0x11a>
 80015a6:	4916      	ldr	r1, [pc, #88]	; (8001600 <main+0x170>)
 80015a8:	e000      	b.n	80015ac <main+0x11c>
 80015aa:	4916      	ldr	r1, [pc, #88]	; (8001604 <main+0x174>)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	2800      	cmp	r0, #0
 80015b0:	bfb8      	it	lt
 80015b2:	4240      	neglt	r0, r0
 80015b4:	9003      	str	r0, [sp, #12]
 80015b6:	9102      	str	r1, [sp, #8]
 80015b8:	9201      	str	r2, [sp, #4]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	462b      	mov	r3, r5
 80015be:	4622      	mov	r2, r4
 80015c0:	4911      	ldr	r1, [pc, #68]	; (8001608 <main+0x178>)
 80015c2:	4812      	ldr	r0, [pc, #72]	; (800160c <main+0x17c>)
 80015c4:	f006 ff62 	bl	800848c <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)data, strlen(data), 5);
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <main+0x17c>)
 80015ca:	f7fe fdc1 	bl	8000150 <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	2305      	movs	r3, #5
 80015d4:	490d      	ldr	r1, [pc, #52]	; (800160c <main+0x17c>)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <main+0x180>)
 80015d8:	f006 fa99 	bl	8007b0e <HAL_UART_Transmit>
	  if (u8_flag_10ms)
 80015dc:	e779      	b.n	80014d2 <main+0x42>
 80015de:	bf00      	nop
 80015e0:	1a63c1f8 	.word	0x1a63c1f8
 80015e4:	404ca5dc 	.word	0x404ca5dc
 80015e8:	200005a0 	.word	0x200005a0
 80015ec:	20000400 	.word	0x20000400
 80015f0:	200003a0 	.word	0x200003a0
 80015f4:	200004a0 	.word	0x200004a0
 80015f8:	20000000 	.word	0x20000000
 80015fc:	408f4000 	.word	0x408f4000
 8001600:	080093a8 	.word	0x080093a8
 8001604:	080093ac 	.word	0x080093ac
 8001608:	080093b0 	.word	0x080093b0
 800160c:	2000053c 	.word	0x2000053c
 8001610:	200004f8 	.word	0x200004f8

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	; 0x40
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	2228      	movs	r2, #40	; 0x28
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f006 ff2a 	bl	800847c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163e:	2310      	movs	r3, #16
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f004 feac 	bl	80063a8 <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001656:	f000 f9f5 	bl	8001a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f918 	bl	80068a8 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800167e:	f000 f9e1 	bl	8001a44 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3740      	adds	r7, #64	; 0x40
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C1_Init+0x50>)
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <MX_I2C1_Init+0x54>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_I2C1_Init+0x50>)
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <MX_I2C1_Init+0x58>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_I2C1_Init+0x50>)
 80016aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C1_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_I2C1_Init+0x50>)
 80016ca:	f003 fe7f 	bl	80053cc <HAL_I2C_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d4:	f000 f9b6 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000400 	.word	0x20000400
 80016e0:	40005400 	.word	0x40005400
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM1_Init+0x98>)
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <MX_TIM1_Init+0x9c>)
 8001708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_TIM1_Init+0x98>)
 800170c:	f240 321f 	movw	r2, #799	; 0x31f
 8001710:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_TIM1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM1_Init+0x98>)
 800171a:	2263      	movs	r2, #99	; 0x63
 800171c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_TIM1_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_TIM1_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001730:	4813      	ldr	r0, [pc, #76]	; (8001780 <MX_TIM1_Init+0x98>)
 8001732:	f005 fa55 	bl	8006be0 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800173c:	f000 f982 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4619      	mov	r1, r3
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_TIM1_Init+0x98>)
 800174e:	f005 fda1 	bl	8007294 <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001758:	f000 f974 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_TIM1_Init+0x98>)
 800176a:	f006 f913 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001774:	f000 f966 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200005a0 	.word	0x200005a0
 8001784:	40012c00 	.word	0x40012c00

08001788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <MX_TIM3_Init+0xc4>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017b2:	224f      	movs	r2, #79	; 0x4f
 80017b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017be:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d0:	481d      	ldr	r0, [pc, #116]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017d2:	f005 faa7 	bl	8006d24 <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017dc:	f000 f932 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4619      	mov	r1, r3
 80017ee:	4816      	ldr	r0, [pc, #88]	; (8001848 <MX_TIM3_Init+0xc0>)
 80017f0:	f006 f8d0 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017fa:	f000 f923 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fe:	2360      	movs	r3, #96	; 0x60
 8001800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_TIM3_Init+0xc0>)
 8001816:	f005 fc7f 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001820:	f000 f910 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2204      	movs	r2, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_TIM3_Init+0xc0>)
 800182c:	f005 fc74 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001836:	f000 f905 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM3_Init+0xc0>)
 800183c:	f003 f8dc 	bl	80049f8 <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000454 	.word	0x20000454
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <MX_TIM4_Init+0xc0>)
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <MX_TIM4_Init+0xc4>)
 8001876:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <MX_TIM4_Init+0xc0>)
 800187a:	224f      	movs	r2, #79	; 0x4f
 800187c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <MX_TIM4_Init+0xc0>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <MX_TIM4_Init+0xc0>)
 8001886:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800188a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <MX_TIM4_Init+0xc0>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM4_Init+0xc0>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001898:	481d      	ldr	r0, [pc, #116]	; (8001910 <MX_TIM4_Init+0xc0>)
 800189a:	f005 fa43 	bl	8006d24 <HAL_TIM_PWM_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f8ce 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4619      	mov	r1, r3
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <MX_TIM4_Init+0xc0>)
 80018b8:	f006 f86c 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80018c2:	f000 f8bf 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c6:	2360      	movs	r3, #96	; 0x60
 80018c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_TIM4_Init+0xc0>)
 80018de:	f005 fc1b 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80018e8:	f000 f8ac 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2204      	movs	r2, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM4_Init+0xc0>)
 80018f4:	f005 fc10 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018fe:	f000 f8a1 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM4_Init+0xc0>)
 8001904:	f003 f878 	bl	80049f8 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200003b8 	.word	0x200003b8
 8001914:	40000800 	.word	0x40000800

08001918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <MX_USART1_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 8001924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_USART1_UART_Init+0x4c>)
 8001950:	f006 f890 	bl	8007a74 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f000 f873 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200004f8 	.word	0x200004f8
 8001968:	40013800 	.word	0x40013800

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_GPIO_Init+0xcc>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <MX_GPIO_Init+0xcc>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <MX_GPIO_Init+0xcc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_GPIO_Init+0xcc>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <MX_GPIO_Init+0xcc>)
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e6:	4815      	ldr	r0, [pc, #84]	; (8001a3c <MX_GPIO_Init+0xd0>)
 80019e8:	f003 fcd8 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2128      	movs	r1, #40	; 0x28
 80019f0:	4813      	ldr	r0, [pc, #76]	; (8001a40 <MX_GPIO_Init+0xd4>)
 80019f2:	f003 fcd3 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <MX_GPIO_Init+0xd0>)
 8001a10:	f003 fb6a 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a14:	2328      	movs	r3, #40	; 0x28
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_GPIO_Init+0xd4>)
 8001a2c:	f003 fb5c 	bl	80050e8 <HAL_GPIO_Init>

}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40010800 	.word	0x40010800

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <Error_Handler+0x6>

08001a4c <Limit_val>:
 *      Author: Hien Nguyen
 */

#include "motor.h"

static void Limit_val(float *value){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	if(*value> VAL_MAX)  *value = VAL_MAX;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fb2d 	bl	80010bc <__aeabi_fcmpgt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <Limit_val+0x24>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a6e:	601a      	str	r2, [r3, #0]
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <Limit_val+0x48>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb02 	bl	8001080 <__aeabi_fcmplt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <Limit_val+0x38>
}
 8001a82:	e002      	b.n	8001a8a <Limit_val+0x3e>
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <Limit_val+0x48>)
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	bf800000 	.word	0xbf800000

08001a98 <Set_duty>:

static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d111      	bne.n	8001ace <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 8001aaa:	4915      	ldr	r1, [pc, #84]	; (8001b00 <Set_duty+0x68>)
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff f949 	bl	8000d44 <__aeabi_fmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4913      	ldr	r1, [pc, #76]	; (8001b04 <Set_duty+0x6c>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f83c 	bl	8000b34 <__addsf3>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7ff fb29 	bl	800111c <__aeabi_f2uiz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d111      	bne.n	8001af8 <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 8001ad4:	490a      	ldr	r1, [pc, #40]	; (8001b00 <Set_duty+0x68>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff f934 	bl	8000d44 <__aeabi_fmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4909      	ldr	r1, [pc, #36]	; (8001b04 <Set_duty+0x6c>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f827 	bl	8000b34 <__addsf3>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	681c      	ldr	r4, [r3, #0]
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff fb14 	bl	800111c <__aeabi_f2uiz>
 8001af4:	4603      	mov	r3, r0
 8001af6:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	44ed6000 	.word	0x44ed6000
 8001b04:	42c80000 	.word	0x42c80000

08001b08 <Init_tim_pwm>:

void Init_tim_pwm(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4808      	ldr	r0, [pc, #32]	; (8001b30 <Init_tim_pwm+0x28>)
 8001b10:	f005 f958 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b14:	2104      	movs	r1, #4
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <Init_tim_pwm+0x28>)
 8001b18:	f005 f954 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <Init_tim_pwm+0x2c>)
 8001b20:	f005 f950 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b24:	2104      	movs	r1, #4
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <Init_tim_pwm+0x2c>)
 8001b28:	f005 f94c 	bl	8006dc4 <HAL_TIM_PWM_Start>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000454 	.word	0x20000454
 8001b34:	200003b8 	.word	0x200003b8

08001b38 <Stop_motor>:

static void Stop_motor(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	Set_duty(0, &htim3, 1);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	490c      	ldr	r1, [pc, #48]	; (8001b70 <Stop_motor+0x38>)
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f7ff ffa8 	bl	8001a98 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4909      	ldr	r1, [pc, #36]	; (8001b70 <Stop_motor+0x38>)
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f7ff ffa2 	bl	8001a98 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	4907      	ldr	r1, [pc, #28]	; (8001b74 <Stop_motor+0x3c>)
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f7ff ff9c 	bl	8001a98 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001b60:	2202      	movs	r2, #2
 8001b62:	4904      	ldr	r1, [pc, #16]	; (8001b74 <Stop_motor+0x3c>)
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f7ff ff96 	bl	8001a98 <Set_duty>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000454 	.word	0x20000454
 8001b74:	200003b8 	.word	0x200003b8

08001b78 <Forward>:

void Forward (float duty){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	Set_duty(0, &htim3, 1);
 8001b80:	2201      	movs	r2, #1
 8001b82:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <Forward+0x3c>)
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f7ff ff86 	bl	8001a98 <Set_duty>
	Set_duty(duty, &htim3, 2);
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <Forward+0x3c>)
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff81 	bl	8001a98 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <Forward+0x40>)
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f7ff ff7b 	bl	8001a98 <Set_duty>
	Set_duty(duty, &htim4, 2);
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <Forward+0x40>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff76 	bl	8001a98 <Set_duty>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000454 	.word	0x20000454
 8001bb8:	200003b8 	.word	0x200003b8

08001bbc <Reverse>:

void Reverse (float duty){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <Reverse+0x3c>)
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff65 	bl	8001a98 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <Reverse+0x3c>)
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f7ff ff5f 	bl	8001a98 <Set_duty>
	Set_duty(duty, &htim4, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4907      	ldr	r1, [pc, #28]	; (8001bfc <Reverse+0x40>)
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff5a 	bl	8001a98 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001be4:	2202      	movs	r2, #2
 8001be6:	4905      	ldr	r1, [pc, #20]	; (8001bfc <Reverse+0x40>)
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f7ff ff54 	bl	8001a98 <Set_duty>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000454 	.word	0x20000454
 8001bfc:	200003b8 	.word	0x200003b8

08001c00 <Controller>:

void Controller (double new_angle, double vec_angle, Fuzzy_t *fuzzy){
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c0a:	e9c7 2300 	strd	r2, r3, [r7]
	if((new_angle>ANGLE_THRESHOLD)|(new_angle<(-1)*ANGLE_THRESHOLD)){
 8001c0e:	2301      	movs	r3, #1
 8001c10:	461c      	mov	r4, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <Controller+0x124>)
 8001c18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c1c:	f7fe feec 	bl	80009f8 <__aeabi_dcmpgt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <Controller+0x2a>
 8001c26:	2300      	movs	r3, #0
 8001c28:	461c      	mov	r4, r3
 8001c2a:	b2e4      	uxtb	r4, r4
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	461d      	mov	r5, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <Controller+0x128>)
 8001c36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c3a:	f7fe febf 	bl	80009bc <__aeabi_dcmplt>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <Controller+0x48>
 8001c44:	2300      	movs	r3, #0
 8001c46:	461d      	mov	r5, r3
 8001c48:	b2eb      	uxtb	r3, r5
 8001c4a:	4323      	orrs	r3, r4
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <Controller+0x58>
			Stop_motor();
 8001c52:	f7ff ff71 	bl	8001b38 <Stop_motor>
			return;
 8001c56:	e062      	b.n	8001d1e <Controller+0x11e>
		}

	fuzzy->f_inp_fuzzy[0] = (new_angle- OFFSET)/fuzzy->f_K_theta;
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c64:	f7fe fa82 	bl	800016c <__adddf3>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4625      	mov	r5, r4
 8001c6e:	461c      	mov	r4, r3
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fbd7 	bl	8000428 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fd53 	bl	800072c <__aeabi_ddiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f7fe fefb 	bl	8000a88 <__aeabi_d2f>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	601a      	str	r2, [r3, #0]
	Limit_val(&fuzzy->f_inp_fuzzy[0]);
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fed6 	bl	8001a4c <Limit_val>
	fuzzy->f_inp_fuzzy[1] = vec_angle/fuzzy->f_K_theta_dot;
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fbbf 	bl	8000428 <__aeabi_f2d>
 8001caa:	4603      	mov	r3, r0
 8001cac:	460c      	mov	r4, r1
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb6:	f7fe fd39 	bl	800072c <__aeabi_ddiv>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f7fe fee1 	bl	8000a88 <__aeabi_d2f>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	605a      	str	r2, [r3, #4]
	Limit_val(&fuzzy->f_inp_fuzzy[1]);
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff febb 	bl	8001a4c <Limit_val>
	SBR1_run(&fuzzy->f_inp_fuzzy, &fuzzy->f_out_fuzzy);
 8001cd6:	6a3a      	ldr	r2, [r7, #32]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f7ff fb8e 	bl	8001400 <SBR1_run>
	Limit_val(&fuzzy->f_out_fuzzy);
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff feaf 	bl	8001a4c <Limit_val>

	if (fuzzy->f_out_fuzzy > 0){
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f9e0 	bl	80010bc <__aeabi_fcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <Controller+0x10e>
		Reverse (fuzzy->f_out_fuzzy);
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff58 	bl	8001bbc <Reverse>
		return;
 8001d0c:	e007      	b.n	8001d1e <Controller+0x11e>
	} else {
		Forward ((-1)*fuzzy->f_out_fuzzy);
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff2e 	bl	8001b78 <Forward>
		return;
 8001d1c:	bf00      	nop
	}

}
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	404e0000 	.word	0x404e0000
 8001d28:	c04e0000 	.word	0xc04e0000

08001d2c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af04      	add	r7, sp, #16
 8001d32:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	f107 030f 	add.w	r3, r7, #15
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	2275      	movs	r2, #117	; 0x75
 8001d46:	21d0      	movs	r1, #208	; 0xd0
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f003 fd71 	bl	8005830 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b68      	cmp	r3, #104	; 0x68
 8001d52:	d13d      	bne.n	8001dd0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	f107 030e 	add.w	r3, r7, #14
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2301      	movs	r3, #1
 8001d68:	226b      	movs	r2, #107	; 0x6b
 8001d6a:	21d0      	movs	r1, #208	; 0xd0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f003 fc65 	bl	800563c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001d72:	2307      	movs	r3, #7
 8001d74:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	f107 030e 	add.w	r3, r7, #14
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	2219      	movs	r2, #25
 8001d88:	21d0      	movs	r1, #208	; 0xd0
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f003 fc56 	bl	800563c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f107 030e 	add.w	r3, r7, #14
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2301      	movs	r3, #1
 8001da4:	221c      	movs	r2, #28
 8001da6:	21d0      	movs	r1, #208	; 0xd0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f003 fc47 	bl	800563c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f107 030e 	add.w	r3, r7, #14
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	221b      	movs	r2, #27
 8001dc4:	21d0      	movs	r1, #208	; 0xd0
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f003 fc38 	bl	800563c <HAL_I2C_Mem_Write>
        return 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <MPU6050_Init+0xa6>
    }
    return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	0000      	movs	r0, r0
 8001ddc:	0000      	movs	r0, r0
	...

08001de0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b094      	sub	sp, #80	; 0x50
 8001de6:	af04      	add	r7, sp, #16
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001dec:	2364      	movs	r3, #100	; 0x64
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	230e      	movs	r3, #14
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	223b      	movs	r2, #59	; 0x3b
 8001dfe:	21d0      	movs	r1, #208	; 0xd0
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f003 fd15 	bl	8005830 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e06:	7a3b      	ldrb	r3, [r7, #8]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	7a7b      	ldrb	r3, [r7, #9]
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001e18:	7abb      	ldrb	r3, [r7, #10]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001e2a:	7b3b      	ldrb	r3, [r7, #12]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001e4a:	7c3b      	ldrb	r3, [r7, #16]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	7c7b      	ldrb	r3, [r7, #17]
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001e5c:	7cbb      	ldrb	r3, [r7, #18]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001e6e:	7d3b      	ldrb	r3, [r7, #20]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	7d7b      	ldrb	r3, [r7, #21]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fabc 	bl	8000404 <__aeabi_i2d>
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4bb7      	ldr	r3, [pc, #732]	; (8002170 <MPU6050_Read_All+0x390>)
 8001e92:	f7fe fc4b 	bl	800072c <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe faac 	bl	8000404 <__aeabi_i2d>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4baf      	ldr	r3, [pc, #700]	; (8002170 <MPU6050_Read_All+0x390>)
 8001eb2:	f7fe fc3b 	bl	800072c <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fa9c 	bl	8000404 <__aeabi_i2d>
 8001ecc:	a3a2      	add	r3, pc, #648	; (adr r3, 8002158 <MPU6050_Read_All+0x378>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fc2b 	bl	800072c <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001ee0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fed9 	bl	8000c9c <__aeabi_i2f>
 8001eea:	4603      	mov	r3, r0
 8001eec:	49a1      	ldr	r1, [pc, #644]	; (8002174 <MPU6050_Read_All+0x394>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ffdc 	bl	8000eac <__aeabi_fdiv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	49a0      	ldr	r1, [pc, #640]	; (8002178 <MPU6050_Read_All+0x398>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fe1b 	bl	8000b34 <__addsf3>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fa79 	bl	8000404 <__aeabi_i2d>
 8001f12:	a393      	add	r3, pc, #588	; (adr r3, 8002160 <MPU6050_Read_All+0x380>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fc08 	bl	800072c <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fa69 	bl	8000404 <__aeabi_i2d>
 8001f32:	a38b      	add	r3, pc, #556	; (adr r3, 8002160 <MPU6050_Read_All+0x380>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fbf8 	bl	800072c <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fa59 	bl	8000404 <__aeabi_i2d>
 8001f52:	a383      	add	r3, pc, #524	; (adr r3, 8002160 <MPU6050_Read_All+0x380>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fbe8 	bl	800072c <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001f66:	f002 fef7 	bl	8004d58 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b83      	ldr	r3, [pc, #524]	; (800217c <MPU6050_Read_All+0x39c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fa36 	bl	80003e4 <__aeabi_ui2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b80      	ldr	r3, [pc, #512]	; (8002180 <MPU6050_Read_All+0x3a0>)
 8001f7e:	f7fe fbd5 	bl	800072c <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001f8a:	f002 fee5 	bl	8004d58 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b7a      	ldr	r3, [pc, #488]	; (800217c <MPU6050_Read_All+0x39c>)
 8001f92:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	fb03 f202 	mul.w	r2, r3, r2
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fac:	4619      	mov	r1, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fb4:	fb03 f301 	mul.w	r3, r3, r1
 8001fb8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fa22 	bl	8000404 <__aeabi_i2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f007 f802 	bl	8008fd0 <sqrt>
 8001fcc:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fdc:	f7fe fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d119      	bne.n	800201a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa09 	bl	8000404 <__aeabi_i2d>
 8001ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff6:	f7fe fb99 	bl	800072c <__aeabi_ddiv>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f006 fe55 	bl	8008cb0 <atan>
 8002006:	a358      	add	r3, pc, #352	; (adr r3, 8002168 <MPU6050_Read_All+0x388>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fa64 	bl	80004d8 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002018:	e005      	b.n	8002026 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	425b      	negs	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f9e8 	bl	8000404 <__aeabi_i2d>
 8002034:	4682      	mov	sl, r0
 8002036:	468b      	mov	fp, r1
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f9e0 	bl	8000404 <__aeabi_i2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4650      	mov	r0, sl
 800204a:	4659      	mov	r1, fp
 800204c:	f006 ffbe 	bl	8008fcc <atan2>
 8002050:	a345      	add	r3, pc, #276	; (adr r3, 8002168 <MPU6050_Read_All+0x388>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002056:	f7fe fa3f 	bl	80004d8 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <MPU6050_Read_All+0x3a4>)
 8002068:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800206c:	f7fe fca6 	bl	80009bc <__aeabi_dcmplt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <MPU6050_Read_All+0x2ac>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <MPU6050_Read_All+0x3a8>)
 8002082:	f7fe fcb9 	bl	80009f8 <__aeabi_dcmpgt>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d114      	bne.n	80020b6 <MPU6050_Read_All+0x2d6>
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <MPU6050_Read_All+0x3a8>)
 8002092:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002096:	f7fe fcaf 	bl	80009f8 <__aeabi_dcmpgt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <MPU6050_Read_All+0x2ec>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <MPU6050_Read_All+0x3a4>)
 80020ac:	f7fe fc86 	bl	80009bc <__aeabi_dcmplt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80020b6:	4935      	ldr	r1, [pc, #212]	; (800218c <MPU6050_Read_All+0x3ac>)
 80020b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80020ca:	e012      	b.n	80020f2 <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020da:	e9cd 2300 	strd	r2, r3, [sp]
 80020de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e2:	482a      	ldr	r0, [pc, #168]	; (800218c <MPU6050_Read_All+0x3ac>)
 80020e4:	f000 f856 	bl	8002194 <Kalman_getAngle>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80020f8:	4690      	mov	r8, r2
 80020fa:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <MPU6050_Read_All+0x3a8>)
 8002104:	4640      	mov	r0, r8
 8002106:	4649      	mov	r1, r9
 8002108:	f7fe fc76 	bl	80009f8 <__aeabi_dcmpgt>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002118:	4614      	mov	r4, r2
 800211a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800212a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800212e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002132:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002136:	e9cd 3400 	strd	r3, r4, [sp]
 800213a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800213e:	4814      	ldr	r0, [pc, #80]	; (8002190 <MPU6050_Read_All+0x3b0>)
 8002140:	f000 f828 	bl	8002194 <Kalman_getAngle>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
}
 800214e:	bf00      	nop
 8002150:	3740      	adds	r7, #64	; 0x40
 8002152:	46bd      	mov	sp, r7
 8002154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002158:	00000000 	.word	0x00000000
 800215c:	40cc2900 	.word	0x40cc2900
 8002160:	00000000 	.word	0x00000000
 8002164:	40606000 	.word	0x40606000
 8002168:	1a63c1f8 	.word	0x1a63c1f8
 800216c:	404ca5dc 	.word	0x404ca5dc
 8002170:	40d00000 	.word	0x40d00000
 8002174:	43aa0000 	.word	0x43aa0000
 8002178:	42121eb8 	.word	0x42121eb8
 800217c:	200005e8 	.word	0x200005e8
 8002180:	408f4000 	.word	0x408f4000
 8002184:	c0568000 	.word	0xc0568000
 8002188:	40568000 	.word	0x40568000
 800218c:	20000060 	.word	0x20000060
 8002190:	20000018 	.word	0x20000018

08002194 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002194:	b5b0      	push	{r4, r5, r7, lr}
 8002196:	b092      	sub	sp, #72	; 0x48
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f103 0420 	add.w	r4, r3, #32
 80021a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4623      	mov	r3, r4
 80021ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021b2:	f7fd ffd9 	bl	8000168 <__aeabi_dsub>
 80021b6:	4603      	mov	r3, r0
 80021b8:	460c      	mov	r4, r1
 80021ba:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80021c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80021cc:	f7fe f984 	bl	80004d8 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fd ffc8 	bl	800016c <__adddf3>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80021f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80021f6:	f7fe f96f 	bl	80004d8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002208:	f7fd ffae 	bl	8000168 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800221a:	f7fd ffa5 	bl	8000168 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fd ff9e 	bl	800016c <__adddf3>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800223c:	f7fe f94c 	bl	80004d8 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fd ff90 	bl	800016c <__adddf3>
 800224c:	4603      	mov	r3, r0
 800224e:	460c      	mov	r4, r1
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002262:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002266:	f7fe f937 	bl	80004d8 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4620      	mov	r0, r4
 8002270:	4629      	mov	r1, r5
 8002272:	f7fd ff79 	bl	8000168 <__aeabi_dsub>
 8002276:	4603      	mov	r3, r0
 8002278:	460c      	mov	r4, r1
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800228c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002290:	f7fe f922 	bl	80004d8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4620      	mov	r0, r4
 800229a:	4629      	mov	r1, r5
 800229c:	f7fd ff64 	bl	8000168 <__aeabi_dsub>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022ba:	f7fe f90d 	bl	80004d8 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4620      	mov	r0, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7fd ff51 	bl	800016c <__adddf3>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f103 0410 	add.w	r4, r3, #16
 80022e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	f7fd ff40 	bl	800016c <__adddf3>
 80022ec:	4603      	mov	r3, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80022fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022fe:	f7fe fa15 	bl	800072c <__aeabi_ddiv>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002314:	f7fe fa0a 	bl	800072c <__aeabi_ddiv>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f103 0418 	add.w	r4, r3, #24
 8002326:	e9d4 3400 	ldrd	r3, r4, [r4]
 800232a:	461a      	mov	r2, r3
 800232c:	4623      	mov	r3, r4
 800232e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002332:	f7fd ff19 	bl	8000168 <__aeabi_dsub>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002348:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800234c:	f7fe f8c4 	bl	80004d8 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f7fd ff08 	bl	800016c <__adddf3>
 800235c:	4603      	mov	r3, r0
 800235e:	460c      	mov	r4, r1
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800236c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002374:	f7fe f8b0 	bl	80004d8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fd fef4 	bl	800016c <__adddf3>
 8002384:	4603      	mov	r3, r0
 8002386:	460c      	mov	r4, r1
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002394:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002398:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80023a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023a6:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80023b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023b8:	f7fe f88e 	bl	80004d8 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fd fed0 	bl	8000168 <__aeabi_dsub>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80023d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e0:	f7fe f87a 	bl	80004d8 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4620      	mov	r0, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	f7fd febc 	bl	8000168 <__aeabi_dsub>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002400:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002408:	f7fe f866 	bl	80004d8 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fd fea8 	bl	8000168 <__aeabi_dsub>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002428:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800242c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002430:	f7fe f852 	bl	80004d8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fd fe94 	bl	8000168 <__aeabi_dsub>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f103 0418 	add.w	r4, r3, #24
 8002450:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 8002454:	4618      	mov	r0, r3
 8002456:	4621      	mov	r1, r4
 8002458:	3748      	adds	r7, #72	; 0x48
 800245a:	46bd      	mov	sp, r7
 800245c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002460 <_qFFMath_GetAbnormal>:
#define cast_reinterpret( dst, src, dst_type )                              \
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <_qFFMath_GetAbnormal+0x34>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <_qFFMath_GetAbnormal+0x22>
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <_qFFMath_GetAbnormal+0x38>)
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <_qFFMath_GetAbnormal+0x3c>)
 8002474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002478:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <_qFFMath_GetAbnormal+0x34>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <_qFFMath_GetAbnormal+0x38>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	200000a8 	.word	0x200000a8
 8002498:	200003a4 	.word	0x200003a4
 800249c:	08009614 	.word	0x08009614

080024a0 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
    int retVal;

    cast_reinterpret( u, f, uint32_t );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b6:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e016      	b.n	80024f2 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ca:	d202      	bcs.n	80024d2 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 80024cc:	2301      	movs	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e00f      	b.n	80024f2 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80024d8:	d202      	bcs.n	80024e0 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 80024da:	2302      	movs	r3, #2
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e008      	b.n	80024f2 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80024e6:	d102      	bne.n	80024ee <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 80024e8:	2303      	movs	r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e001      	b.n	80024f2 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 80024ee:	2304      	movs	r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffca 	bl	80024a0 <qFFMath_FPClassify>
 800250c:	4603      	mov	r3, r0
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2db      	uxtb	r3, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe fda7 	bl	8001080 <__aeabi_fcmplt>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <qFFMath_Abs+0x20>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800253e:	e000      	b.n	8002542 <qFFMath_Abs+0x22>
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd91 	bl	8001080 <__aeabi_fcmplt>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8002564:	2001      	movs	r0, #1
 8002566:	f7ff ff7b 	bl	8002460 <_qFFMath_GetAbnormal>
 800256a:	6178      	str	r0, [r7, #20]
 800256c:	e02f      	b.n	80025ce <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff95 	bl	80024a0 <qFFMath_FPClassify>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e024      	b.n	80025ce <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800259e:	613b      	str	r3, [r7, #16]
        cast_reinterpret( z, y, float );
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fc7e 	bl	8000eac <__aeabi_fdiv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f7fe fabb 	bl	8000b34 <__addsf3>
 80025be:	4603      	mov	r3, r0
 80025c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fbbd 	bl	8000d44 <__aeabi_fmul>
 80025ca:	4603      	mov	r3, r0
 80025cc:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80025ce:	697b      	ldr	r3, [r7, #20]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    float y;
    x *= -0.318309886f;
 80025e0:	491e      	ldr	r1, [pc, #120]	; (800265c <qFFMath_Sin+0x84>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fbae 	bl	8000d44 <__aeabi_fmul>
 80025e8:	4603      	mov	r3, r0
 80025ea:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 80025ec:	491c      	ldr	r1, [pc, #112]	; (8002660 <qFFMath_Sin+0x88>)
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe faa0 	bl	8000b34 <__addsf3>
 80025f4:	4603      	mov	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 80025f8:	4919      	ldr	r1, [pc, #100]	; (8002660 <qFFMath_Sin+0x88>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7fe fa98 	bl	8000b30 <__aeabi_fsub>
 8002600:	4603      	mov	r3, r0
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7fe fa93 	bl	8000b30 <__aeabi_fsub>
 800260a:	4603      	mov	r3, r0
 800260c:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ff86 	bl	8002520 <qFFMath_Abs>
 8002614:	4603      	mov	r3, r0
 8002616:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fa88 	bl	8000b30 <__aeabi_fsub>
 8002620:	4603      	mov	r3, r0
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe fb8d 	bl	8000d44 <__aeabi_fmul>
 800262a:	4603      	mov	r3, r0
 800262c:	607b      	str	r3, [r7, #4]
    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff76 	bl	8002520 <qFFMath_Abs>
 8002634:	4603      	mov	r3, r0
 8002636:	490b      	ldr	r1, [pc, #44]	; (8002664 <qFFMath_Sin+0x8c>)
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fb83 	bl	8000d44 <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <qFFMath_Sin+0x90>)
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fa76 	bl	8000b34 <__addsf3>
 8002648:	4603      	mov	r3, r0
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb79 	bl	8000d44 <__aeabi_fmul>
 8002652:	4603      	mov	r3, r0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	bea2f983 	.word	0xbea2f983
 8002660:	4bc00000 	.word	0x4bc00000
 8002664:	40656265 	.word	0x40656265
 8002668:	4046a767 	.word	0x4046a767

0800266c <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + 1.570796327f );
 8002674:	4906      	ldr	r1, [pc, #24]	; (8002690 <qFFMath_Cos+0x24>)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fa5c 	bl	8000b34 <__addsf3>
 800267c:	4603      	mov	r3, r0
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ffaa 	bl	80025d8 <qFFMath_Sin>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	3fc90fdb 	.word	0x3fc90fdb

08002694 <qFFMath_Exp2>:
    y = qFFMath_ATan( y/( x + f ) ) + ( ( x < 0.0f ) ? t : 0.0f );
    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 800269c:	492e      	ldr	r1, [pc, #184]	; (8002758 <qFFMath_Exp2+0xc4>)
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fcf8 	bl	8001094 <__aeabi_fcmple>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e04c      	b.n	800274c <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 80026b2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fd00 	bl	80010bc <__aeabi_fcmpgt>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fecc 	bl	8002460 <_qFFMath_GetAbnormal>
 80026c8:	6178      	str	r0, [r7, #20]
 80026ca:	e03f      	b.n	800274c <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 80026d2:	4922      	ldr	r1, [pc, #136]	; (800275c <qFFMath_Exp2+0xc8>)
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fe fa2d 	bl	8000b34 <__addsf3>
 80026da:	4603      	mov	r3, r0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fd1d 	bl	800111c <__aeabi_f2uiz>
 80026e2:	4603      	mov	r3, r0
 80026e4:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fad3 	bl	8000c94 <__aeabi_ui2f>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4619      	mov	r1, r3
 80026f2:	481a      	ldr	r0, [pc, #104]	; (800275c <qFFMath_Exp2+0xc8>)
 80026f4:	f7fe fa1c 	bl	8000b30 <__aeabi_fsub>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7fe fa19 	bl	8000b34 <__addsf3>
 8002702:	4603      	mov	r3, r0
 8002704:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( y, exponent, float );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 8002710:	4913      	ldr	r1, [pc, #76]	; (8002760 <qFFMath_Exp2+0xcc>)
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fb16 	bl	8000d44 <__aeabi_fmul>
 8002718:	4603      	mov	r3, r0
 800271a:	4912      	ldr	r1, [pc, #72]	; (8002764 <qFFMath_Exp2+0xd0>)
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fa09 	bl	8000b34 <__addsf3>
 8002722:	4603      	mov	r3, r0
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fb0c 	bl	8000d44 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 8002730:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe f9fd 	bl	8000b34 <__addsf3>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7fe fafe 	bl	8000d44 <__aeabi_fmul>
 8002748:	4603      	mov	r3, r0
 800274a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800274c:	697b      	ldr	r3, [r7, #20]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	c2fc0000 	.word	0xc2fc0000
 800275c:	42fe0000 	.word	0x42fe0000
 8002760:	3eadf5d0 	.word	0x3eadf5d0
 8002764:	3f290518 	.word	0x3f290518

08002768 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fc82 	bl	8001080 <__aeabi_fcmplt>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff fe6c 	bl	8002460 <_qFFMath_GetAbnormal>
 8002788:	6178      	str	r0, [r7, #20]
 800278a:	e049      	b.n	8002820 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fe86 	bl	80024a0 <qFFMath_FPClassify>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 800279a:	2000      	movs	r0, #0
 800279c:	f7ff fe60 	bl	8002460 <_qFFMath_GetAbnormal>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e03a      	b.n	8002820 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
        y2 = y;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0ddb      	lsrs	r3, r3, #23
 80027ba:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fa68 	bl	8000c94 <__aeabi_ui2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80027ce:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80027d2:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( x, y, float );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4914      	ldr	r1, [pc, #80]	; (800282c <qFFMath_Log2+0xc4>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fab1 	bl	8000d44 <__aeabi_fmul>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe f9a3 	bl	8000b34 <__addsf3>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7fe faa4 	bl	8000d44 <__aeabi_fmul>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe f994 	bl	8000b30 <__aeabi_fsub>
 8002808:	4603      	mov	r3, r0
 800280a:	4909      	ldr	r1, [pc, #36]	; (8002830 <qFFMath_Log2+0xc8>)
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe f98f 	bl	8000b30 <__aeabi_fsub>
 8002812:	4603      	mov	r3, r0
 8002814:	4619      	mov	r1, r3
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7fe f98c 	bl	8000b34 <__addsf3>
 800281c:	4603      	mov	r3, r0
 800281e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002820:	697b      	ldr	r3, [r7, #20]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	beaaaaab 	.word	0xbeaaaaab
 8002830:	3f2aaaab 	.word	0x3f2aaaab

08002834 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( 1.442695041f*x );
 800283c:	4906      	ldr	r1, [pc, #24]	; (8002858 <qFFMath_Exp+0x24>)
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fa80 	bl	8000d44 <__aeabi_fmul>
 8002844:	4603      	mov	r3, r0
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff24 	bl	8002694 <qFFMath_Exp2>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	3fb8aa3b 	.word	0x3fb8aa3b

0800285c <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    return 0.693147181f*qFFMath_Log2(x);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff7f 	bl	8002768 <qFFMath_Log2>
 800286a:	4603      	mov	r3, r0
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <qFFMath_Log+0x24>)
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fa68 	bl	8000d44 <__aeabi_fmul>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	3f317218 	.word	0x3f317218

08002884 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff6a 	bl	8002768 <qFFMath_Log2>
 8002894:	4603      	mov	r3, r0
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fa53 	bl	8000d44 <__aeabi_fmul>
 800289e:	4603      	mov	r3, r0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fef7 	bl	8002694 <qFFMath_Exp2>
 80028a6:	4603      	mov	r3, r0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
 80028bc:	4613      	mov	r3, r2
 80028be:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04f      	beq.n	800296a <qFIS_SetParameter+0xba>
        switch ( p ) {
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d84e      	bhi.n	800296e <qFIS_SetParameter+0xbe>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <qFIS_SetParameter+0x28>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080028ed 	.word	0x080028ed
 80028dc:	08002905 	.word	0x08002905
 80028e0:	08002923 	.word	0x08002923
 80028e4:	0800293b 	.word	0x0800293b
 80028e8:	08002959 	.word	0x08002959
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 80028ec:	78bb      	ldrb	r3, [r7, #2]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d83f      	bhi.n	8002972 <qFIS_SetParameter+0xc2>
                    f->implicate = method[ x ];
 80028f2:	78bb      	ldrb	r3, [r7, #2]
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <qFIS_SetParameter+0xe0>)
 80028f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002902:	e036      	b.n	8002972 <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8002904:	78bb      	ldrb	r3, [r7, #2]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d935      	bls.n	8002976 <qFIS_SetParameter+0xc6>
 800290a:	78bb      	ldrb	r3, [r7, #2]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d832      	bhi.n	8002976 <qFIS_SetParameter+0xc6>
                    f->aggregate = method[ x ];
 8002910:	78bb      	ldrb	r3, [r7, #2]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <qFIS_SetParameter+0xe0>)
 8002914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 800291c:	2301      	movs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002920:	e029      	b.n	8002976 <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 8002922:	78bb      	ldrb	r3, [r7, #2]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d828      	bhi.n	800297a <qFIS_SetParameter+0xca>
                    f->andOp = method[ x ];
 8002928:	78bb      	ldrb	r3, [r7, #2]
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <qFIS_SetParameter+0xe0>)
 800292c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002938:	e01f      	b.n	800297a <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 800293a:	78bb      	ldrb	r3, [r7, #2]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d91e      	bls.n	800297e <qFIS_SetParameter+0xce>
 8002940:	78bb      	ldrb	r3, [r7, #2]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d81b      	bhi.n	800297e <qFIS_SetParameter+0xce>
                    f->orOp = method[ x ];
 8002946:	78bb      	ldrb	r3, [r7, #2]
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <qFIS_SetParameter+0xe0>)
 800294a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002956:	e012      	b.n	800297e <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 8002958:	78bb      	ldrb	r3, [r7, #2]
 800295a:	2b13      	cmp	r3, #19
 800295c:	d911      	bls.n	8002982 <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 800295e:	78ba      	ldrb	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002964:	2301      	movs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002968:	e00b      	b.n	8002982 <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 800296a:	bf00      	nop
 800296c:	e00a      	b.n	8002984 <qFIS_SetParameter+0xd4>
                break;
 800296e:	bf00      	nop
 8002970:	e008      	b.n	8002984 <qFIS_SetParameter+0xd4>
                break;
 8002972:	bf00      	nop
 8002974:	e006      	b.n	8002984 <qFIS_SetParameter+0xd4>
                break;
 8002976:	bf00      	nop
 8002978:	e004      	b.n	8002984 <qFIS_SetParameter+0xd4>
                break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <qFIS_SetParameter+0xd4>
                break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <qFIS_SetParameter+0xd4>
                break;
 8002982:	bf00      	nop

    return retVal;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	0800961c 	.word	0x0800961c

08002994 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	460b      	mov	r3, r1
 80029a2:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80bb 	beq.w	8002b26 <qFIS_Setup+0x192>
 80029b0:	7afb      	ldrb	r3, [r7, #11]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	f200 80b7 	bhi.w	8002b26 <qFIS_Setup+0x192>
 80029b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80b3 	beq.w	8002b26 <qFIS_Setup+0x192>
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80af 	beq.w	8002b26 <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4a59      	ldr	r2, [pc, #356]	; (8002b30 <qFIS_Setup+0x19c>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	4a56      	ldr	r2, [pc, #344]	; (8002b34 <qFIS_Setup+0x1a0>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	091a      	lsrs	r2, r3, #4
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <qFIS_Setup+0x1a4>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	091a      	lsrs	r2, r3, #4
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 80029f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f4:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <qFIS_Setup+0x1a4>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	091a      	lsrs	r2, r3, #4
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0a:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a10:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a16:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a28:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	7afa      	ldrb	r2, [r7, #11]
 8002a2e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8002a32:	2264      	movs	r2, #100	; 0x64
 8002a34:	2104      	movs	r1, #4
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff3a 	bl	80028b0 <qFIS_SetParameter>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8002a44:	2200      	movs	r2, #0
 8002a46:	2102      	movs	r1, #2
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff ff31 	bl	80028b0 <qFIS_SetParameter>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4413      	add	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 8002a56:	2202      	movs	r2, #2
 8002a58:	2103      	movs	r1, #3
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff ff28 	bl	80028b0 <qFIS_SetParameter>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff ff1f 	bl	80028b0 <qFIS_SetParameter>
 8002a72:	4602      	mov	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4413      	add	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff ff16 	bl	80028b0 <qFIS_SetParameter>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4413      	add	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
        retVal = ( 5 == retVal ) ? 1 : 0;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <qFIS_Setup+0x110>
 8002aa0:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <qFIS_Setup+0x1a8>)
 8002aa2:	e000      	b.n	8002aa6 <qFIS_Setup+0x112>
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e032      	b.n	8002b1c <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2134      	movs	r1, #52	; 0x34
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	6858      	ldr	r0, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2134      	movs	r1, #52	; 0x34
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f82a 	bl	8000b30 <__aeabi_fsub>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461d      	mov	r5, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe f8d5 	bl	8000c94 <__aeabi_ui2f>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2134      	movs	r1, #52	; 0x34
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	18d4      	adds	r4, r2, r3
 8002af8:	4601      	mov	r1, r0
 8002afa:	4628      	mov	r0, r5
 8002afc:	f7fe f9d6 	bl	8000eac <__aeabi_fdiv>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60e3      	str	r3, [r4, #12]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2134      	movs	r1, #52	; 0x34
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3c7      	bcc.n	8002ab6 <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8002b26:	697b      	ldr	r3, [r7, #20]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b30:	aaaaaaab 	.word	0xaaaaaaab
 8002b34:	4ec4ec4f 	.word	0x4ec4ec4f
 8002b38:	cccccccd 	.word	0xcccccccd
 8002b3c:	080033b1 	.word	0x080033b1
 8002b40:	08003445 	.word	0x08003445

08002b44 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d018      	beq.n	8002b8e <qFIS_InputSetup+0x4a>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db15      	blt.n	8002b8e <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4413      	add	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	461a      	mov	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d05a      	beq.n	8002c68 <qFIS_OutputSetup+0xce>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db57      	blt.n	8002c68 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2234      	movs	r2, #52	; 0x34
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
        v[ t ].data[ 1 ] = 0.0f;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2234      	movs	r2, #52	; 0x34
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	61da      	str	r2, [r3, #28]
        v[ t ].data[ 2 ] = 0.0f;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2234      	movs	r2, #52	; 0x34
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
        v[ t ].data[ 3 ] = 0.0f;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2234      	movs	r2, #52	; 0x34
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].x = 0.0f;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2234      	movs	r2, #52	; 0x34
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
        v[ t ].y = 0.0f;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2234      	movs	r2, #52	; 0x34
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
        v[ t ].b.min = min;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2234      	movs	r2, #52	; 0x34
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2234      	movs	r2, #52	; 0x34
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2234      	movs	r2, #52	; 0x34
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].yag = NULL;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2234      	movs	r2, #52	; 0x34
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
        retVal = 1;
 8002c64:	2301      	movs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002c68:	697b      	ldr	r3, [r7, #20]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <qFIS_SetInput+0x34>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0b      	blt.n	8002ca8 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002ca8:	697b      	ldr	r3, [r7, #20]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <qFIS_GetOutput+0x2c>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db07      	blt.n	8002ce0 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2234      	movs	r2, #52	; 0x34
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d055      	beq.n	8002db0 <qFIS_SetMF+0xc4>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db52      	blt.n	8002db0 <qFIS_SetMF+0xc4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db4f      	blt.n	8002db0 <qFIS_SetMF+0xc4>
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b1a      	cmp	r3, #26
 8002d14:	d84c      	bhi.n	8002db0 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e00c      	b.n	8002d4c <qFIS_SetMF+0x60>
        }
        else {
            m[ mf ].shape = fShape[ s ];
 8002d32:	78f9      	ldrb	r1, [r7, #3]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <qFIS_SetMF+0xd0>)
 8002d46:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d4a:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d72:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	189c      	adds	r4, r3, r2
 8002d9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da4:	f001 fcd3 	bl	800474e <qFIS_Bound>
 8002da8:	4603      	mov	r3, r0
 8002daa:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002db0:	697b      	ldr	r3, [r7, #20]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	08009630 	.word	0x08009630

08002dc0 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e026      	b.n	8002e1c <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	68dd      	ldr	r5, [r3, #12]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681c      	ldr	r4, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	18c8      	adds	r0, r1, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4619      	mov	r1, r3
 8002e02:	47a0      	blx	r4
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f7fd ff9b 	bl	8000d44 <__aeabi_fmul>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3d3      	bcc.n	8002dce <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}

08002e2e <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e02b      	b.n	8002e94 <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002e5e:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002e70:	685e      	ldr	r6, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	18cc      	adds	r4, r1, r3
 8002e82:	4632      	mov	r2, r6
 8002e84:	4629      	mov	r1, r5
 8002e86:	f001 fc62 	bl	800474e <qFIS_Bound>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d3ce      	bcc.n	8002e3c <qFIS_TruncateInputs+0xe>
    }
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ea6 <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffb8 	bl	8002e2e <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ff7e 	bl	8002dc0 <qFIS_EvalInputMFs>
        retVal = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	807b      	strh	r3, [r7, #2]
    uint8_t neg = (uint8_t)( index < 0 );
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	0bdb      	lsrs	r3, r3, #15
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <qFIS_ParseFuzzValue+0x22>
        index = -index;
 8002eec:	887b      	ldrh	r3, [r7, #2]
 8002eee:	425b      	negs	r3, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8002ef4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3b14      	subs	r3, #20
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 fc1c 	bl	800474e <qFIS_Bound>
 8002f16:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <qFIS_ParseFuzzValue+0x5a>
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f24:	f7fd fe04 	bl	8000b30 <__aeabi_fsub>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	e000      	b.n	8002f2e <qFIS_ParseFuzzValue+0x5c>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60bb      	str	r3, [r7, #8]

    return y;
 8002f30:	68bb      	ldr	r3, [r7, #8]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <qFIS_GetFuzzOperator+0x40>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <qFIS_GetFuzzOperator+0x1c>
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <qFIS_GetFuzzOperator+0x44>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <qFIS_GetFuzzOperator+0x24>
 8002f56:	e007      	b.n	8002f68 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	60fb      	str	r3, [r7, #12]
            break;
 8002f5e:	e006      	b.n	8002f6e <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	60fb      	str	r3, [r7, #12]
            break;
 8002f66:	e002      	b.n	8002f6e <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <qFIS_GetFuzzOperator+0x48>)
 8002f6a:	60fb      	str	r3, [r7, #12]
            break;
 8002f6c:	bf00      	nop
    }

    return oper;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	ffff8002 	.word	0xffff8002
 8002f80:	ffff8003 	.word	0xffff8003
 8002f84:	08004723 	.word	0x08004723

08002f88 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ffbb 	bl	8002f3c <qFIS_GetFuzzOperator>
 8002fc6:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff7b 	bl	8002ed2 <qFIS_ParseFuzzValue>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4798      	blx	r3
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8002fec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db05      	blt.n	8003000 <qFIS_InferenceAntecedent+0x78>
 8002ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d902      	bls.n	8003006 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 8003000:	2300      	movs	r3, #0
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	e022      	b.n	800304c <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8003006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <qFIS_InferenceAntecedent+0xd0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <qFIS_InferenceAntecedent+0x92>
 8003010:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003014:	4a11      	ldr	r2, [pc, #68]	; (800305c <qFIS_InferenceAntecedent+0xd4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10a      	bne.n	8003030 <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8a7a      	ldrh	r2, [r7, #18]
 800301e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <qFIS_InferenceAntecedent+0xd8>)
 8003026:	621a      	str	r2, [r3, #32]
            i += 2u;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	3302      	adds	r3, #2
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	e00d      	b.n	800304c <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 8003030:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <qFIS_InferenceAntecedent+0xdc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d106      	bne.n	8003048 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <qFIS_InferenceAntecedent+0xe0>)
 800303e:	621a      	str	r2, [r3, #32]
            i += 2u;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	3302      	adds	r3, #2
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	e001      	b.n	800304c <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8003048:	2300      	movs	r3, #0
 800304a:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 800304c:	683b      	ldr	r3, [r7, #0]
}
 800304e:	4618      	mov	r0, r3
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop
 8003058:	ffff8002 	.word	0xffff8002
 800305c:	ffff8003 	.word	0xffff8003
 8003060:	08002f89 	.word	0x08002f89
 8003064:	ffff8004 	.word	0xffff8004
 8003068:	0800306d 	.word	0x0800306d

0800306c <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b01      	cmp	r3, #1
 800307c:	d908      	bls.n	8003090 <qFIS_InferenceReachEnd+0x24>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3302      	adds	r3, #2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800308e:	e001      	b.n	8003094 <qFIS_InferenceReachEnd+0x28>
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	3302      	adds	r3, #2
 800309a:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 800309c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a0:	4a23      	ldr	r2, [pc, #140]	; (8003130 <qFIS_InferenceReachEnd+0xc4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03f      	beq.n	8003126 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <qFIS_InferenceReachEnd+0xc8>)
 80030aa:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030c6:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01e      	beq.n	800310e <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 fb31 	bl	800474e <qFIS_Bound>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	18d4      	adds	r4, r2, r3
 8003106:	f7fd fe1d 	bl	8000d44 <__aeabi_fmul>
 800310a:	4603      	mov	r3, r0
 800310c:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	3b01      	subs	r3, #1
 8003124:	603b      	str	r3, [r7, #0]
    }

    return i;
 8003126:	683b      	ldr	r3, [r7, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	ffff8002 	.word	0xffff8002
 8003134:	08002f89 	.word	0x08002f89

08003138 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 8003142:	bf00      	nop
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <qFIS_AggregationFindConsequent+0x3c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d1f3      	bne.n	8003144 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a06      	ldr	r2, [pc, #24]	; (8003178 <qFIS_AggregationFindConsequent+0x40>)
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	ffff8004 	.word	0xffff8004
 8003178:	0800317d 	.word	0x0800317d

0800317c <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 8003186:	2300      	movs	r3, #0
 8003188:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d908      	bls.n	80031c2 <qFIS_InferenceConsequent+0x46>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	3302      	adds	r3, #2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c0:	e001      	b.n	80031c6 <qFIS_InferenceConsequent+0x4a>
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 80031c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da05      	bge.n	80031dc <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 80031d0:	8bfb      	ldrh	r3, [r7, #30]
 80031d2:	425b      	negs	r3, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 80031d8:	2301      	movs	r3, #1
 80031da:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 80031dc:	8bfb      	ldrh	r3, [r7, #30]
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd ff60 	bl	80010bc <__aeabi_fcmpgt>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d07b      	beq.n	80032fa <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800320a:	2134      	movs	r1, #52	; 0x34
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800322e:	2b00      	cmp	r3, #0
 8003230:	d133      	bne.n	800329a <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	68dc      	ldr	r4, [r3, #12]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	6851      	ldr	r1, [r2, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	6978      	ldr	r0, [r7, #20]
 8003242:	4798      	blx	r3
 8003244:	4603      	mov	r3, r0
 8003246:	4619      	mov	r1, r3
 8003248:	4620      	mov	r0, r4
 800324a:	f7fd fd7b 	bl	8000d44 <__aeabi_fmul>
 800324e:	4603      	mov	r3, r0
 8003250:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 8003252:	7f7b      	ldrb	r3, [r7, #29]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <qFIS_InferenceConsequent+0xea>
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800325e:	f7fd fc67 	bl	8000b30 <__aeabi_fsub>
 8003262:	4603      	mov	r3, r0
 8003264:	e000      	b.n	8003268 <qFIS_InferenceConsequent+0xec>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69dc      	ldr	r4, [r3, #28]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	695d      	ldr	r5, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	440a      	add	r2, r1
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4610      	mov	r0, r2
 8003288:	4798      	blx	r3
 800328a:	4603      	mov	r3, r0
 800328c:	4619      	mov	r1, r3
 800328e:	4628      	mov	r0, r5
 8003290:	47a0      	blx	r4
 8003292:	4602      	mov	r2, r0
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	615a      	str	r2, [r3, #20]
 8003298:	e02f      	b.n	80032fa <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6810      	ldr	r0, [r2, #0]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	6851      	ldr	r1, [r2, #4]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032aa:	4798      	blx	r3
 80032ac:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	699c      	ldr	r4, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fd3e 	bl	8000d44 <__aeabi_fmul>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4619      	mov	r1, r3
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7fd fc31 	bl	8000b34 <__addsf3>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	69d8      	ldr	r0, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7fd fc21 	bl	8000b34 <__addsf3>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	61da      	str	r2, [r3, #28]
        }
    }

    i += 2u;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3302      	adds	r3, #2
 80032fe:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8003300:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <qFIS_InferenceConsequent+0x1b0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00a      	beq.n	8003320 <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <qFIS_InferenceConsequent+0x1b4>)
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	603b      	str	r3, [r7, #0]
    }

    return i;
 8003320:	683b      	ldr	r3, [r7, #0]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bdb0      	pop	{r4, r5, r7, pc}
 800332a:	bf00      	nop
 800332c:	ffff8002 	.word	0xffff8002
 8003330:	08003139 	.word	0x08003139

08003334 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02d      	beq.n	800339e <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800334e:	d126      	bne.n	800339e <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 8003350:	2301      	movs	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <qFIS_Aggregate+0x74>)
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003360:	e00b      	b.n	800337a <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
 800336c:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003388:	4a08      	ldr	r2, [pc, #32]	; (80033ac <qFIS_Aggregate+0x78>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <qFIS_Aggregate+0x6a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	429a      	cmp	r2, r3
 8003398:	d3e3      	bcc.n	8003362 <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 800339a:	e000      	b.n	800339e <qFIS_Aggregate+0x6a>
                    break;
 800339c:	bf00      	nop
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	08003139 	.word	0x08003139
 80033ac:	ffff8001 	.word	0xffff8001

080033b0 <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d004      	beq.n	80033d2 <qFIS_DeFuzz_Centroid+0x22>
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d02b      	beq.n	8003424 <qFIS_DeFuzz_Centroid+0x74>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <qFIS_DeFuzz_Centroid+0x62>
            break;
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
            break;
        default:
            break;
 80033d0:	e033      	b.n	800343a <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] += o->x*o->y;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699c      	ldr	r4, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fd fcaf 	bl	8000d44 <__aeabi_fmul>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4619      	mov	r1, r3
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7fd fba2 	bl	8000b34 <__addsf3>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += o->y;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7fd fb96 	bl	8000b34 <__addsf3>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	61da      	str	r2, [r3, #28]
            break;
 8003410:	e013      	b.n	800343a <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
            break;
 8003422:	e00a      	b.n	800343a <qFIS_DeFuzz_Centroid+0x8a>
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f7fd fd3c 	bl	8000eac <__aeabi_fdiv>
 8003434:	4603      	mov	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
            break;
 8003438:	bf00      	nop
    }

    return d;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bd90      	pop	{r4, r7, pc}

08003444 <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d109      	bne.n	8003470 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f7fd fd20 	bl	8000eac <__aeabi_fdiv>
 800346c:	4603      	mov	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8003470:	68fb      	ldr	r3, [r7, #12]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <qFIS_DeFuzzify>:

    return d;
}
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 800347a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347c:	b087      	sub	sp, #28
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8136 	beq.w	80036fa <qFIS_DeFuzzify+0x280>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e00e      	b.n	80034b2 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6851      	ldr	r1, [r2, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	2034      	movs	r0, #52	; 0x34
 80034a0:	fb00 f202 	mul.w	r2, r0, r2
 80034a4:	440a      	add	r2, r1
 80034a6:	2100      	movs	r1, #0
 80034a8:	4610      	mov	r0, r2
 80034aa:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3301      	adds	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d3eb      	bcc.n	8003494 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 809b 	bne.w	80035fe <qFIS_DeFuzzify+0x184>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e090      	b.n	80035f0 <qFIS_DeFuzzify+0x176>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e039      	b.n	8003548 <qFIS_DeFuzzify+0xce>
                    f->output[ i ].y = 0.0f;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2134      	movs	r1, #52	; 0x34
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2134      	movs	r1, #52	; 0x34
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2134      	movs	r1, #52	; 0x34
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003506:	68dd      	ldr	r5, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2134      	movs	r1, #52	; 0x34
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	18d4      	adds	r4, r2, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4629      	mov	r1, r5
 800351a:	f000 f951 	bl	80037c0 <qFIS_GetNextX>
 800351e:	4603      	mov	r3, r0
 8003520:	6123      	str	r3, [r4, #16]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2134      	movs	r1, #52	; 0x34
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2034      	movs	r0, #52	; 0x34
 8003538:	fb00 f303 	mul.w	r3, r0, r3
 800353c:	440b      	add	r3, r1
 800353e:	6912      	ldr	r2, [r2, #16]
 8003540:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3301      	adds	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	429a      	cmp	r2, r3
 8003550:	d3c0      	bcc.n	80034d4 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff feee 	bl	8003334 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e040      	b.n	80035e0 <qFIS_DeFuzzify+0x166>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6851      	ldr	r1, [r2, #4]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	2034      	movs	r0, #52	; 0x34
 800356a:	fb00 f202 	mul.w	r2, r0, r2
 800356e:	440a      	add	r2, r1
 8003570:	2101      	movs	r1, #1
 8003572:	4610      	mov	r0, r2
 8003574:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2134      	movs	r1, #52	; 0x34
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d027      	beq.n	80035da <qFIS_DeFuzzify+0x160>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2134      	movs	r1, #52	; 0x34
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	441a      	add	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2034      	movs	r0, #52	; 0x34
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	6912      	ldr	r2, [r2, #16]
 80035b0:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2134      	movs	r1, #52	; 0x34
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2034      	movs	r0, #52	; 0x34
 80035c8:	fb00 f303 	mul.w	r3, r0, r3
 80035cc:	440b      	add	r3, r1
 80035ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	6952      	ldr	r2, [r2, #20]
 80035d8:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3b9      	bcc.n	800355e <qFIS_DeFuzzify+0xe4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	3301      	adds	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	f4ff af69 	bcc.w	80034ce <qFIS_DeFuzzify+0x54>
 80035fc:	e038      	b.n	8003670 <qFIS_DeFuzzify+0x1f6>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e016      	b.n	8003632 <qFIS_DeFuzzify+0x1b8>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2134      	movs	r1, #52	; 0x34
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2134      	movs	r1, #52	; 0x34
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	d3e3      	bcc.n	8003604 <qFIS_DeFuzzify+0x18a>
            }
            qFIS_Aggregate( f );
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fe79 	bl	8003334 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e00e      	b.n	8003666 <qFIS_DeFuzzify+0x1ec>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6851      	ldr	r1, [r2, #4]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	2034      	movs	r0, #52	; 0x34
 8003654:	fb00 f202 	mul.w	r2, r0, r2
 8003658:	440a      	add	r2, r1
 800365a:	2101      	movs	r1, #1
 800365c:	4610      	mov	r0, r2
 800365e:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3301      	adds	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	d3eb      	bcc.n	8003648 <qFIS_DeFuzzify+0x1ce>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e03c      	b.n	80036f0 <qFIS_DeFuzzify+0x276>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6851      	ldr	r1, [r2, #4]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	2034      	movs	r0, #52	; 0x34
 8003682:	fb00 f202 	mul.w	r2, r0, r2
 8003686:	188d      	adds	r5, r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6851      	ldr	r1, [r2, #4]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	2034      	movs	r0, #52	; 0x34
 8003690:	fb00 f202 	mul.w	r2, r0, r2
 8003694:	188c      	adds	r4, r1, r2
 8003696:	2102      	movs	r1, #2
 8003698:	4628      	mov	r0, r5
 800369a:	4798      	blx	r3
 800369c:	4603      	mov	r3, r0
 800369e:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2134      	movs	r1, #52	; 0x34
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2134      	movs	r1, #52	; 0x34
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80036be:	681d      	ldr	r5, [r3, #0]
                                                 f->output[ i ].b.max );
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2134      	movs	r1, #52	; 0x34
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80036ce:	685e      	ldr	r6, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2134      	movs	r1, #52	; 0x34
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	18d4      	adds	r4, r2, r3
 80036de:	4632      	mov	r2, r6
 80036e0:	4629      	mov	r1, r5
 80036e2:	f001 f834 	bl	800474e <qFIS_Bound>
 80036e6:	4603      	mov	r3, r0
 80036e8:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	3301      	adds	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3bd      	bcc.n	8003676 <qFIS_DeFuzzify+0x1fc>
        }
    }

    return retVal;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003704 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04a      	beq.n	80037ac <qFIS_Inference+0xa8>
        size_t i = 0u;
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003722:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003726:	d12f      	bne.n	8003788 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <qFIS_Inference+0xb4>)
 800372c:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 8003746:	2301      	movs	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800374a:	e00b      	b.n	8003764 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <qFIS_Inference+0xb8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <qFIS_Inference+0x84>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	429a      	cmp	r2, r3
 8003782:	d3e3      	bcc.n	800374c <qFIS_Inference+0x48>
 8003784:	e000      	b.n	8003788 <qFIS_Inference+0x84>
                    break;
 8003786:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <qFIS_Inference+0xb8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d107      	bne.n	80037ac <qFIS_Inference+0xa8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d101      	bne.n	80037ac <qFIS_Inference+0xa8>
            retVal = 1;
 80037a8:	2301      	movs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 80037ac:	68fb      	ldr	r3, [r7, #12]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08002f89 	.word	0x08002f89
 80037bc:	ffff8001 	.word	0xffff8001

080037c0 <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd fa61 	bl	8000c94 <__aeabi_ui2f>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd f9ab 	bl	8000b34 <__addsf3>
 80037de:	4603      	mov	r3, r0
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd faae 	bl	8000d44 <__aeabi_fmul>
 80037e8:	4603      	mov	r3, r0
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd f9a1 	bl	8000b34 <__addsf3>
 80037f2:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 80037fc:	b5b0      	push	{r4, r5, r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003824:	f7fd f984 	bl	8000b30 <__aeabi_fsub>
 8003828:	4603      	mov	r3, r0
 800382a:	461c      	mov	r4, r3
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	69f8      	ldr	r0, [r7, #28]
 8003830:	f7fd f97e 	bl	8000b30 <__aeabi_fsub>
 8003834:	4603      	mov	r3, r0
 8003836:	4619      	mov	r1, r3
 8003838:	4620      	mov	r0, r4
 800383a:	f7fd fb37 	bl	8000eac <__aeabi_fdiv>
 800383e:	4603      	mov	r3, r0
 8003840:	461c      	mov	r4, r3
 8003842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003844:	69b8      	ldr	r0, [r7, #24]
 8003846:	f7fd f973 	bl	8000b30 <__aeabi_fsub>
 800384a:	4603      	mov	r3, r0
 800384c:	461d      	mov	r5, r3
 800384e:	69f9      	ldr	r1, [r7, #28]
 8003850:	69b8      	ldr	r0, [r7, #24]
 8003852:	f7fd f96d 	bl	8000b30 <__aeabi_fsub>
 8003856:	4603      	mov	r3, r0
 8003858:	4619      	mov	r1, r3
 800385a:	4628      	mov	r0, r5
 800385c:	f7fd fb26 	bl	8000eac <__aeabi_fdiv>
 8003860:	4603      	mov	r3, r0
 8003862:	4619      	mov	r1, r3
 8003864:	4620      	mov	r0, r4
 8003866:	f000 feef 	bl	8004648 <qFIS_Min>
 800386a:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	6978      	ldr	r0, [r7, #20]
 8003872:	f000 ff04 	bl	800467e <qFIS_Max>
 8003876:	4603      	mov	r3, r0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bdb0      	pop	{r4, r5, r7, pc}

08003880 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b08b      	sub	sp, #44	; 0x2c
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 80038aa:	6a39      	ldr	r1, [r7, #32]
 80038ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ae:	f7fd f93f 	bl	8000b30 <__aeabi_fsub>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461c      	mov	r4, r3
 80038b6:	6a39      	ldr	r1, [r7, #32]
 80038b8:	69f8      	ldr	r0, [r7, #28]
 80038ba:	f7fd f939 	bl	8000b30 <__aeabi_fsub>
 80038be:	4603      	mov	r3, r0
 80038c0:	4619      	mov	r1, r3
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7fd faf2 	bl	8000eac <__aeabi_fdiv>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 feba 	bl	8004648 <qFIS_Min>
 80038d4:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 80038d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d8:	6978      	ldr	r0, [r7, #20]
 80038da:	f7fd f929 	bl	8000b30 <__aeabi_fsub>
 80038de:	4603      	mov	r3, r0
 80038e0:	461c      	mov	r4, r3
 80038e2:	69b9      	ldr	r1, [r7, #24]
 80038e4:	6978      	ldr	r0, [r7, #20]
 80038e6:	f7fd f923 	bl	8000b30 <__aeabi_fsub>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4619      	mov	r1, r3
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7fd fadc 	bl	8000eac <__aeabi_fdiv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4619      	mov	r1, r3
 80038f8:	6938      	ldr	r0, [r7, #16]
 80038fa:	f000 fea5 	bl	8004648 <qFIS_Min>
 80038fe:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	6938      	ldr	r0, [r7, #16]
 8003906:	f000 feba 	bl	800467e <qFIS_Max>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	372c      	adds	r7, #44	; 0x2c
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 8003938:	6939      	ldr	r1, [r7, #16]
 800393a:	69f8      	ldr	r0, [r7, #28]
 800393c:	f7fd f8f8 	bl	8000b30 <__aeabi_fsub>
 8003940:	4603      	mov	r3, r0
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fab1 	bl	8000eac <__aeabi_fdiv>
 800394a:	4603      	mov	r3, r0
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fde7 	bl	8002520 <qFFMath_Abs>
 8003952:	4604      	mov	r4, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4619      	mov	r1, r3
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd f8eb 	bl	8000b34 <__addsf3>
 800395e:	4603      	mov	r3, r0
 8003960:	4619      	mov	r1, r3
 8003962:	4620      	mov	r0, r4
 8003964:	f7fe ff8e 	bl	8002884 <qFFMath_Pow>
 8003968:	4603      	mov	r3, r0
 800396a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd f8e0 	bl	8000b34 <__addsf3>
 8003974:	4603      	mov	r3, r0
 8003976:	4619      	mov	r1, r3
 8003978:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800397c:	f7fd fa96 	bl	8000eac <__aeabi_fdiv>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}

0800398a <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b088      	sub	sp, #32
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 80039a8:	6979      	ldr	r1, [r7, #20]
 80039aa:	69f8      	ldr	r0, [r7, #28]
 80039ac:	f7fd f8c0 	bl	8000b30 <__aeabi_fsub>
 80039b0:	4603      	mov	r3, r0
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fa79 	bl	8000eac <__aeabi_fdiv>
 80039ba:	4603      	mov	r3, r0
 80039bc:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 80039be:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80039c2:	6938      	ldr	r0, [r7, #16]
 80039c4:	f7fd f9be 	bl	8000d44 <__aeabi_fmul>
 80039c8:	4603      	mov	r3, r0
 80039ca:	6939      	ldr	r1, [r7, #16]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f9b9 	bl	8000d44 <__aeabi_fmul>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe ff2d 	bl	8002834 <qFFMath_Exp>
 80039da:	4603      	mov	r3, r0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 8003a02:	6a39      	ldr	r1, [r7, #32]
 8003a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a06:	f7fd fb45 	bl	8001094 <__aeabi_fcmple>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d006      	beq.n	8003a1e <qFIS_Gauss2MF+0x3a>
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff ffb8 	bl	800398a <qFIS_GaussMF>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	e001      	b.n	8003a22 <qFIS_Gauss2MF+0x3e>
 8003a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a22:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a28:	f7fd fb34 	bl	8001094 <__aeabi_fcmple>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <qFIS_Gauss2MF+0x60>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3308      	adds	r3, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff ffa5 	bl	800398a <qFIS_GaussMF>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e001      	b.n	8003a48 <qFIS_Gauss2MF+0x64>
 8003a44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a48:	617b      	str	r3, [r7, #20]

    return f1*f2;
 8003a4a:	6979      	ldr	r1, [r7, #20]
 8003a4c:	69b8      	ldr	r0, [r7, #24]
 8003a4e:	f7fd f979 	bl	8000d44 <__aeabi_fmul>
 8003a52:	4603      	mov	r3, r0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	69f8      	ldr	r0, [r7, #28]
 8003a84:	f7fd f854 	bl	8000b30 <__aeabi_fsub>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7fd f959 	bl	8000d44 <__aeabi_fmul>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe fecd 	bl	8002834 <qFFMath_Exp>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd f847 	bl	8000b34 <__addsf3>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003aae:	f7fd f9fd 	bl	8000eac <__aeabi_fdiv>
 8003ab2:	4603      	mov	r3, r0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3724      	adds	r7, #36	; 0x24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}

08003abc <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 8003ae6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003aea:	6a38      	ldr	r0, [r7, #32]
 8003aec:	f000 fe99 	bl	8004822 <qFMathEx_Equal>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	f7fd fad4 	bl	80010a8 <__aeabi_fcmpge>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <qFIS_TSigMF+0x50>
            y = max;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e033      	b.n	8003b74 <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	e030      	b.n	8003b74 <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	6a38      	ldr	r0, [r7, #32]
 8003b18:	f000 fe83 	bl	8004822 <qFMathEx_Equal>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7fd fabe 	bl	80010a8 <__aeabi_fcmpge>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <qFIS_TSigMF+0x7c>
            y = min;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e01d      	b.n	8003b74 <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	e01a      	b.n	8003b74 <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 8003b3e:	6a39      	ldr	r1, [r7, #32]
 8003b40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003b44:	f7fd f9b2 	bl	8000eac <__aeabi_fdiv>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc ffee 	bl	8000b30 <__aeabi_fsub>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fe80 	bl	800285c <qFFMath_Log>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	6979      	ldr	r1, [r7, #20]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd f9a3 	bl	8000eac <__aeabi_fdiv>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6938      	ldr	r0, [r7, #16]
 8003b6c:	f7fc ffe0 	bl	8000b30 <__aeabi_fsub>
 8003b70:	4603      	mov	r3, r0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3728      	adds	r7, #40	; 0x28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003b7e:	b590      	push	{r4, r7, lr}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ff64 	bl	8003a5c <qFIS_SigMF>
 8003b94:	4604      	mov	r4, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff ff5c 	bl	8003a5c <qFIS_SigMF>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7fc ffc1 	bl	8000b30 <__aeabi_fsub>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fcb5 	bl	8002520 <qFFMath_Abs>
 8003bb6:	4603      	mov	r3, r0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd90      	pop	{r4, r7, pc}

08003bc0 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff ff43 	bl	8003a5c <qFIS_SigMF>
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff ff3b 	bl	8003a5c <qFIS_SigMF>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4619      	mov	r1, r3
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7fd f8aa 	bl	8000d44 <__aeabi_fmul>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fc94 	bl	8002520 <qFFMath_Abs>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd90      	pop	{r4, r7, pc}

08003c02 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b08b      	sub	sp, #44	; 0x2c
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003c20:	69f9      	ldr	r1, [r7, #28]
 8003c22:	6a38      	ldr	r0, [r7, #32]
 8003c24:	f7fd fa36 	bl	8001094 <__aeabi_fcmple>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <qFIS_SMF+0x34>
        y =  0.0f;
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	e081      	b.n	8003d3a <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	6a38      	ldr	r0, [r7, #32]
 8003c3a:	f7fd fa35 	bl	80010a8 <__aeabi_fcmpge>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <qFIS_SMF+0x4a>
        y = 1.0f;
 8003c44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	e076      	b.n	8003d3a <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003c4c:	69f9      	ldr	r1, [r7, #28]
 8003c4e:	6a38      	ldr	r0, [r7, #32]
 8003c50:	f7fd fa2a 	bl	80010a8 <__aeabi_fcmpge>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d02f      	beq.n	8003cba <qFIS_SMF+0xb8>
 8003c5a:	69b9      	ldr	r1, [r7, #24]
 8003c5c:	69f8      	ldr	r0, [r7, #28]
 8003c5e:	f7fc ff69 	bl	8000b34 <__addsf3>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd f86b 	bl	8000d44 <__aeabi_fmul>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4619      	mov	r1, r3
 8003c72:	6a38      	ldr	r0, [r7, #32]
 8003c74:	f7fd fa0e 	bl	8001094 <__aeabi_fcmple>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01d      	beq.n	8003cba <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	6a38      	ldr	r0, [r7, #32]
 8003c82:	f7fc ff55 	bl	8000b30 <__aeabi_fsub>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461c      	mov	r4, r3
 8003c8a:	69f9      	ldr	r1, [r7, #28]
 8003c8c:	69b8      	ldr	r0, [r7, #24]
 8003c8e:	f7fc ff4f 	bl	8000b30 <__aeabi_fsub>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4619      	mov	r1, r3
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7fd f908 	bl	8000eac <__aeabi_fdiv>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc ff45 	bl	8000b34 <__addsf3>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4619      	mov	r1, r3
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7fd f848 	bl	8000d44 <__aeabi_fmul>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb8:	e03f      	b.n	8003d3a <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003cba:	69b9      	ldr	r1, [r7, #24]
 8003cbc:	6a38      	ldr	r0, [r7, #32]
 8003cbe:	f7fd f9e9 	bl	8001094 <__aeabi_fcmple>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d035      	beq.n	8003d34 <qFIS_SMF+0x132>
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	69f8      	ldr	r0, [r7, #28]
 8003ccc:	f7fc ff32 	bl	8000b34 <__addsf3>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd f834 	bl	8000d44 <__aeabi_fmul>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6a38      	ldr	r0, [r7, #32]
 8003ce2:	f7fd f9e1 	bl	80010a8 <__aeabi_fcmpge>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d023      	beq.n	8003d34 <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	6a38      	ldr	r0, [r7, #32]
 8003cf0:	f7fc ff1e 	bl	8000b30 <__aeabi_fsub>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	69f9      	ldr	r1, [r7, #28]
 8003cfa:	69b8      	ldr	r0, [r7, #24]
 8003cfc:	f7fc ff18 	bl	8000b30 <__aeabi_fsub>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4619      	mov	r1, r3
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7fd f8d1 	bl	8000eac <__aeabi_fdiv>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4619      	mov	r1, r3
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc ff0e 	bl	8000b34 <__addsf3>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd f811 	bl	8000d44 <__aeabi_fmul>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4619      	mov	r1, r3
 8003d26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d2a:	f7fc ff01 	bl	8000b30 <__aeabi_fsub>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e002      	b.n	8003d3a <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	372c      	adds	r7, #44	; 0x2c
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}

08003d44 <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b091      	sub	sp, #68	; 0x44
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d66:	f7fc fee3 	bl	8000b30 <__aeabi_fsub>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003d6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d74:	f7fc ffe6 	bl	8000d44 <__aeabi_fmul>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7e:	f7fc ffe1 	bl	8000d44 <__aeabi_fmul>
 8003d82:	4603      	mov	r3, r0
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d8a:	f7fc ffdb 	bl	8000d44 <__aeabi_fmul>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe fbda 	bl	800254a <qFFMath_Sqrt>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d9c:	f7fc feca 	bl	8000b34 <__addsf3>
 8003da0:	4603      	mov	r3, r0
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ff26 	bl	8003c02 <qFIS_SMF>
 8003db6:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8003db8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003dbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dbe:	f7fc feb7 	bl	8000b30 <__aeabi_fsub>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc ffba 	bl	8000d44 <__aeabi_fmul>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fbb9 	bl	800254a <qFFMath_Sqrt>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dde:	f7fc fea9 	bl	8000b34 <__addsf3>
 8003de2:	4603      	mov	r3, r0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff05 	bl	8003c02 <qFIS_SMF>
 8003df8:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8003dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dfe:	f7fc fe97 	bl	8000b30 <__aeabi_fsub>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fb8b 	bl	8002520 <qFFMath_Abs>
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	6a39      	ldr	r1, [r7, #32]
 8003e0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e10:	f7fc fe8e 	bl	8000b30 <__aeabi_fsub>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fb82 	bl	8002520 <qFFMath_Abs>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7fd f92d 	bl	8001080 <__aeabi_fcmplt>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <qFIS_TSMF+0xec>
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	e000      	b.n	8003e32 <qFIS_TSMF+0xee>
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3744      	adds	r7, #68	; 0x44
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}

08003e3a <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003e3a:	b590      	push	{r4, r7, lr}
 8003e3c:	b08b      	sub	sp, #44	; 0x2c
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6a38      	ldr	r0, [r7, #32]
 8003e5c:	f7fd f91a 	bl	8001094 <__aeabi_fcmple>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <qFIS_ZMF+0x34>
        y = 1.0f;
 8003e66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e081      	b.n	8003f72 <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	6a38      	ldr	r0, [r7, #32]
 8003e72:	f7fd f919 	bl	80010a8 <__aeabi_fcmpge>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <qFIS_ZMF+0x4a>
        y = 0.0f;
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
 8003e82:	e076      	b.n	8003f72 <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003e84:	69f9      	ldr	r1, [r7, #28]
 8003e86:	6a38      	ldr	r0, [r7, #32]
 8003e88:	f7fd f90e 	bl	80010a8 <__aeabi_fcmpge>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d035      	beq.n	8003efe <qFIS_ZMF+0xc4>
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	69f8      	ldr	r0, [r7, #28]
 8003e96:	f7fc fe4d 	bl	8000b34 <__addsf3>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc ff4f 	bl	8000d44 <__aeabi_fmul>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6a38      	ldr	r0, [r7, #32]
 8003eac:	f7fd f8f2 	bl	8001094 <__aeabi_fcmple>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d023      	beq.n	8003efe <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 8003eb6:	69f9      	ldr	r1, [r7, #28]
 8003eb8:	6a38      	ldr	r0, [r7, #32]
 8003eba:	f7fc fe39 	bl	8000b30 <__aeabi_fsub>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461c      	mov	r4, r3
 8003ec2:	69f9      	ldr	r1, [r7, #28]
 8003ec4:	69b8      	ldr	r0, [r7, #24]
 8003ec6:	f7fc fe33 	bl	8000b30 <__aeabi_fsub>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7fc ffec 	bl	8000eac <__aeabi_fdiv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fe29 	bl	8000b34 <__addsf3>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc ff2c 	bl	8000d44 <__aeabi_fmul>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ef4:	f7fc fe1c 	bl	8000b30 <__aeabi_fsub>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e039      	b.n	8003f72 <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003efe:	69b9      	ldr	r1, [r7, #24]
 8003f00:	6a38      	ldr	r0, [r7, #32]
 8003f02:	f7fd f8c7 	bl	8001094 <__aeabi_fcmple>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02f      	beq.n	8003f6c <qFIS_ZMF+0x132>
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69f8      	ldr	r0, [r7, #28]
 8003f10:	f7fc fe10 	bl	8000b34 <__addsf3>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fc ff12 	bl	8000d44 <__aeabi_fmul>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4619      	mov	r1, r3
 8003f24:	6a38      	ldr	r0, [r7, #32]
 8003f26:	f7fd f8bf 	bl	80010a8 <__aeabi_fcmpge>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01d      	beq.n	8003f6c <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	6a38      	ldr	r0, [r7, #32]
 8003f34:	f7fc fdfc 	bl	8000b30 <__aeabi_fsub>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461c      	mov	r4, r3
 8003f3c:	69f9      	ldr	r1, [r7, #28]
 8003f3e:	69b8      	ldr	r0, [r7, #24]
 8003f40:	f7fc fdf6 	bl	8000b30 <__aeabi_fsub>
 8003f44:	4603      	mov	r3, r0
 8003f46:	4619      	mov	r1, r3
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7fc ffaf 	bl	8000eac <__aeabi_fdiv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fdec 	bl	8000b34 <__addsf3>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f7fc feef 	bl	8000d44 <__aeabi_fmul>
 8003f66:	4603      	mov	r3, r0
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	e002      	b.n	8003f72 <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	372c      	adds	r7, #44	; 0x2c
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}

08003f7c <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	6978      	ldr	r0, [r7, #20]
 8003f9e:	f7fd f86f 	bl	8001080 <__aeabi_fcmplt>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d027      	beq.n	8003ff8 <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	69b8      	ldr	r0, [r7, #24]
 8003fac:	f7fd f868 	bl	8001080 <__aeabi_fcmplt>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <qFIS_LinSMF+0x42>
            y = 0.0f;
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e034      	b.n	8004028 <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	69b8      	ldr	r0, [r7, #24]
 8003fc2:	f7fd f87b 	bl	80010bc <__aeabi_fcmpgt>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <qFIS_LinSMF+0x58>
            y = 1.0f;
 8003fcc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e029      	b.n	8004028 <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 8003fd4:	6979      	ldr	r1, [r7, #20]
 8003fd6:	69b8      	ldr	r0, [r7, #24]
 8003fd8:	f7fc fdaa 	bl	8000b30 <__aeabi_fsub>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461c      	mov	r4, r3
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	6938      	ldr	r0, [r7, #16]
 8003fe4:	f7fc fda4 	bl	8000b30 <__aeabi_fsub>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4619      	mov	r1, r3
 8003fec:	4620      	mov	r0, r4
 8003fee:	f7fc ff5d 	bl	8000eac <__aeabi_fdiv>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e017      	b.n	8004028 <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8003ff8:	6939      	ldr	r1, [r7, #16]
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f000 fc11 	bl	8004822 <qFMathEx_Equal>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	69b8      	ldr	r0, [r7, #24]
 800400a:	f7fd f839 	bl	8001080 <__aeabi_fcmplt>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <qFIS_LinSMF+0x9e>
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e001      	b.n	800401e <qFIS_LinSMF+0xa2>
 800401a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e002      	b.n	8004028 <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004028:	69fb      	ldr	r3, [r7, #28]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}

08004032 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004032:	b590      	push	{r4, r7, lr}
 8004034:	b089      	sub	sp, #36	; 0x24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7fd f814 	bl	8001080 <__aeabi_fcmplt>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d027      	beq.n	80040ae <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 800405e:	6979      	ldr	r1, [r7, #20]
 8004060:	69b8      	ldr	r0, [r7, #24]
 8004062:	f7fd f80d 	bl	8001080 <__aeabi_fcmplt>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <qFIS_LinZMF+0x42>
            y = 1.0f;
 800406c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e034      	b.n	80040de <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 8004074:	6939      	ldr	r1, [r7, #16]
 8004076:	69b8      	ldr	r0, [r7, #24]
 8004078:	f7fd f820 	bl	80010bc <__aeabi_fcmpgt>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <qFIS_LinZMF+0x58>
            y = 0.0f;
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e029      	b.n	80040de <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	6978      	ldr	r0, [r7, #20]
 800408e:	f7fc fd4f 	bl	8000b30 <__aeabi_fsub>
 8004092:	4603      	mov	r3, r0
 8004094:	461c      	mov	r4, r3
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	6978      	ldr	r0, [r7, #20]
 800409a:	f7fc fd49 	bl	8000b30 <__aeabi_fsub>
 800409e:	4603      	mov	r3, r0
 80040a0:	4619      	mov	r1, r3
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7fc ff02 	bl	8000eac <__aeabi_fdiv>
 80040a8:	4603      	mov	r3, r0
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e017      	b.n	80040de <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 80040ae:	6939      	ldr	r1, [r7, #16]
 80040b0:	6978      	ldr	r0, [r7, #20]
 80040b2:	f000 fbb6 	bl	8004822 <qFMathEx_Equal>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 80040bc:	6979      	ldr	r1, [r7, #20]
 80040be:	69b8      	ldr	r0, [r7, #24]
 80040c0:	f7fc ffde 	bl	8001080 <__aeabi_fcmplt>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <qFIS_LinZMF+0x9e>
 80040ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040ce:	e001      	b.n	80040d4 <qFIS_LinZMF+0xa2>
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e002      	b.n	80040de <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80040de:	69fb      	ldr	r3, [r7, #28]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3724      	adds	r7, #36	; 0x24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}

080040e8 <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b091      	sub	sp, #68	; 0x44
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8004106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004108:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800410a:	f7fc fd11 	bl	8000b30 <__aeabi_fsub>
 800410e:	4603      	mov	r3, r0
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8004112:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004118:	f7fc fe14 	bl	8000d44 <__aeabi_fmul>
 800411c:	4603      	mov	r3, r0
 800411e:	4619      	mov	r1, r3
 8004120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004122:	f7fc fe0f 	bl	8000d44 <__aeabi_fmul>
 8004126:	4603      	mov	r3, r0
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 800412a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800412e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004130:	f7fc fcfe 	bl	8000b30 <__aeabi_fsub>
 8004134:	4603      	mov	r3, r0
 8004136:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800413a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc fe01 	bl	8000d44 <__aeabi_fmul>
 8004142:	4603      	mov	r3, r0
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fa00 	bl	800254a <qFFMath_Sqrt>
 800414a:	4603      	mov	r3, r0
 800414c:	4619      	mov	r1, r3
 800414e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004150:	f7fc fcf0 	bl	8000b34 <__addsf3>
 8004154:	4603      	mov	r3, r0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fd4c 	bl	8003c02 <qFIS_SMF>
 800416a:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 800416c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800416e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004170:	f7fc fde8 	bl	8000d44 <__aeabi_fmul>
 8004174:	4603      	mov	r3, r0
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe f9e7 	bl	800254a <qFFMath_Sqrt>
 800417c:	4603      	mov	r3, r0
 800417e:	4619      	mov	r1, r3
 8004180:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004182:	f7fc fcd7 	bl	8000b34 <__addsf3>
 8004186:	4603      	mov	r3, r0
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fd33 	bl	8003c02 <qFIS_SMF>
 800419c:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 800419e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041a2:	f7fc fcc5 	bl	8000b30 <__aeabi_fsub>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe f9b9 	bl	8002520 <qFFMath_Abs>
 80041ae:	4604      	mov	r4, r0
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041b4:	f7fc fcbc 	bl	8000b30 <__aeabi_fsub>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe f9b0 	bl	8002520 <qFFMath_Abs>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4619      	mov	r1, r3
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7fc ff5b 	bl	8001080 <__aeabi_fcmplt>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <qFIS_TZMF+0xec>
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	e000      	b.n	80041d6 <qFIS_TZMF+0xee>
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3744      	adds	r7, #68	; 0x44
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd90      	pop	{r4, r7, pc}

080041de <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80041de:	b590      	push	{r4, r7, lr}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fd07 	bl	8003c02 <qFIS_SMF>
 80041f4:	4604      	mov	r4, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3308      	adds	r3, #8
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4619      	mov	r1, r3
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fe1b 	bl	8003e3a <qFIS_ZMF>
 8004204:	4603      	mov	r3, r0
 8004206:	4619      	mov	r1, r3
 8004208:	4620      	mov	r0, r4
 800420a:	f7fc fd9b 	bl	8000d44 <__aeabi_fmul>
 800420e:	4603      	mov	r3, r0
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe f985 	bl	8002520 <qFFMath_Abs>
 8004216:	4603      	mov	r3, r0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4619      	mov	r1, r3
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f000 faf2 	bl	8004822 <qFMathEx_Equal>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <qFIS_SingletonMF+0x2a>
 8004244:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004248:	e001      	b.n	800424e <qFIS_SingletonMF+0x2e>
 800424a:	f04f 0300 	mov.w	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 8004256:	b590      	push	{r4, r7, lr}
 8004258:	b089      	sub	sp, #36	; 0x24
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8004274:	6939      	ldr	r1, [r7, #16]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7fc ff0c 	bl	8001094 <__aeabi_fcmple>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d023      	beq.n	80042ca <qFIS_ConcaveMF+0x74>
 8004282:	6939      	ldr	r1, [r7, #16]
 8004284:	69b8      	ldr	r0, [r7, #24]
 8004286:	f7fc fefb 	bl	8001080 <__aeabi_fcmplt>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01c      	beq.n	80042ca <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8004290:	6979      	ldr	r1, [r7, #20]
 8004292:	6938      	ldr	r0, [r7, #16]
 8004294:	f7fc fc4c 	bl	8000b30 <__aeabi_fsub>
 8004298:	4603      	mov	r3, r0
 800429a:	461c      	mov	r4, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4619      	mov	r1, r3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc fc47 	bl	8000b34 <__addsf3>
 80042a6:	4603      	mov	r3, r0
 80042a8:	6979      	ldr	r1, [r7, #20]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc fc40 	bl	8000b30 <__aeabi_fsub>
 80042b0:	4603      	mov	r3, r0
 80042b2:	69b9      	ldr	r1, [r7, #24]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc fc3b 	bl	8000b30 <__aeabi_fsub>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4619      	mov	r1, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fdf4 	bl	8000eac <__aeabi_fdiv>
 80042c4:	4603      	mov	r3, r0
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	e02d      	b.n	8004326 <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f7fc fef5 	bl	80010bc <__aeabi_fcmpgt>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d023      	beq.n	8004320 <qFIS_ConcaveMF+0xca>
 80042d8:	6939      	ldr	r1, [r7, #16]
 80042da:	69b8      	ldr	r0, [r7, #24]
 80042dc:	f7fc feee 	bl	80010bc <__aeabi_fcmpgt>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01c      	beq.n	8004320 <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 80042e6:	6939      	ldr	r1, [r7, #16]
 80042e8:	6978      	ldr	r0, [r7, #20]
 80042ea:	f7fc fc21 	bl	8000b30 <__aeabi_fsub>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461c      	mov	r4, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4619      	mov	r1, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fc1c 	bl	8000b34 <__addsf3>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4619      	mov	r1, r3
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f7fc fc15 	bl	8000b30 <__aeabi_fsub>
 8004306:	4603      	mov	r3, r0
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc fc12 	bl	8000b34 <__addsf3>
 8004310:	4603      	mov	r3, r0
 8004312:	4619      	mov	r1, r3
 8004314:	4620      	mov	r0, r4
 8004316:	f7fc fdc9 	bl	8000eac <__aeabi_fdiv>
 800431a:	4603      	mov	r3, r0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e002      	b.n	8004326 <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 8004320:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004324:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004326:	69fb      	ldr	r3, [r7, #28]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3724      	adds	r7, #36	; 0x24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd90      	pop	{r4, r7, pc}

08004330 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 8004348:	6939      	ldr	r1, [r7, #16]
 800434a:	6978      	ldr	r0, [r7, #20]
 800434c:	f7fc fbf0 	bl	8000b30 <__aeabi_fsub>
 8004350:	4603      	mov	r3, r0
 8004352:	461c      	mov	r4, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff ff7c 	bl	8004256 <qFIS_ConcaveMF>
 800435e:	4603      	mov	r3, r0
 8004360:	4619      	mov	r1, r3
 8004362:	4620      	mov	r0, r4
 8004364:	f7fc fda2 	bl	8000eac <__aeabi_fdiv>
 8004368:	4603      	mov	r3, r0
 800436a:	461c      	mov	r4, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4619      	mov	r1, r3
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc fbdf 	bl	8000b34 <__addsf3>
 8004376:	4603      	mov	r3, r0
 8004378:	4619      	mov	r1, r3
 800437a:	4620      	mov	r0, r4
 800437c:	f7fc fbda 	bl	8000b34 <__addsf3>
 8004380:	4603      	mov	r3, r0
 8004382:	6979      	ldr	r1, [r7, #20]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc fbd3 	bl	8000b30 <__aeabi_fsub>
 800438a:	4603      	mov	r3, r0
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd90      	pop	{r4, r7, pc}

08004394 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	69f8      	ldr	r0, [r7, #28]
 80043b6:	f7fc fbbb 	bl	8000b30 <__aeabi_fsub>
 80043ba:	4603      	mov	r3, r0
 80043bc:	490b      	ldr	r1, [pc, #44]	; (80043ec <qFIS_SpikeMF+0x58>)
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc fcc0 	bl	8000d44 <__aeabi_fmul>
 80043c4:	4603      	mov	r3, r0
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fd6f 	bl	8000eac <__aeabi_fdiv>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f8a5 	bl	8002520 <qFFMath_Abs>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fa29 	bl	8002834 <qFFMath_Exp>
 80043e2:	4603      	mov	r3, r0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	41200000 	.word	0x41200000

080043f0 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f7fc fb8d 	bl	8000b30 <__aeabi_fsub>
 8004416:	4603      	mov	r3, r0
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fc fc92 	bl	8000d44 <__aeabi_fmul>
 8004420:	4603      	mov	r3, r0
 8004422:	69b9      	ldr	r1, [r7, #24]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fc fb85 	bl	8000b34 <__addsf3>
 800442a:	4603      	mov	r3, r0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	69b8      	ldr	r0, [r7, #24]
 8004456:	f7fc fb6b 	bl	8000b30 <__aeabi_fsub>
 800445a:	4603      	mov	r3, r0
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fc70 	bl	8000d44 <__aeabi_fmul>
 8004464:	4603      	mov	r3, r0
 8004466:	4619      	mov	r1, r3
 8004468:	69b8      	ldr	r0, [r7, #24]
 800446a:	f7fc fb61 	bl	8000b30 <__aeabi_fsub>
 800446e:	4603      	mov	r3, r0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	69f8      	ldr	r0, [r7, #28]
 800449a:	f7fc fe05 	bl	80010a8 <__aeabi_fcmpge>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <qFIS_RectangleMF+0x40>
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	69f8      	ldr	r0, [r7, #28]
 80044a8:	f7fc fdf4 	bl	8001094 <__aeabi_fcmple>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <qFIS_RectangleMF+0x40>
 80044b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044b6:	e001      	b.n	80044bc <qFIS_RectangleMF+0x44>
 80044b8:	f04f 0300 	mov.w	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80044c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044c8:	b08a      	sub	sp, #40	; 0x28
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <qFIS_CosineMF+0xec>)
 80044da:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 80044e8:	6a38      	ldr	r0, [r7, #32]
 80044ea:	f7fb ff9d 	bl	8000428 <__aeabi_f2d>
 80044ee:	4604      	mov	r4, r0
 80044f0:	460d      	mov	r5, r1
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f7fb ff98 	bl	8000428 <__aeabi_f2d>
 80044f8:	4680      	mov	r8, r0
 80044fa:	4689      	mov	r9, r1
 80044fc:	6978      	ldr	r0, [r7, #20]
 80044fe:	f7fb ff93 	bl	8000428 <__aeabi_f2d>
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <qFIS_CosineMF+0xf0>)
 8004508:	f7fb ffe6 	bl	80004d8 <__aeabi_dmul>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	f7fb fe28 	bl	8000168 <__aeabi_dsub>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fc fa4c 	bl	80009bc <__aeabi_dcmplt>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d111      	bne.n	800454e <qFIS_CosineMF+0x8a>
 800452a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800452e:	6978      	ldr	r0, [r7, #20]
 8004530:	f7fc fc08 	bl	8000d44 <__aeabi_fmul>
 8004534:	4603      	mov	r3, r0
 8004536:	69b9      	ldr	r1, [r7, #24]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fc fafb 	bl	8000b34 <__addsf3>
 800453e:	4603      	mov	r3, r0
 8004540:	4619      	mov	r1, r3
 8004542:	6a38      	ldr	r0, [r7, #32]
 8004544:	f7fc fdba 	bl	80010bc <__aeabi_fcmpgt>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <qFIS_CosineMF+0x92>
        y = 0.0f;
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	e026      	b.n	80045a4 <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 8004556:	6979      	ldr	r1, [r7, #20]
 8004558:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800455c:	f7fc fca6 	bl	8000eac <__aeabi_fdiv>
 8004560:	4603      	mov	r3, r0
 8004562:	69f9      	ldr	r1, [r7, #28]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc fbed 	bl	8000d44 <__aeabi_fmul>
 800456a:	4603      	mov	r3, r0
 800456c:	461c      	mov	r4, r3
 800456e:	69b9      	ldr	r1, [r7, #24]
 8004570:	6a38      	ldr	r0, [r7, #32]
 8004572:	f7fc fadd 	bl	8000b30 <__aeabi_fsub>
 8004576:	4603      	mov	r3, r0
 8004578:	4619      	mov	r1, r3
 800457a:	4620      	mov	r0, r4
 800457c:	f7fc fbe2 	bl	8000d44 <__aeabi_fmul>
 8004580:	4603      	mov	r3, r0
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe f872 	bl	800266c <qFFMath_Cos>
 8004588:	4603      	mov	r3, r0
 800458a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fad0 	bl	8000b34 <__addsf3>
 8004594:	4603      	mov	r3, r0
 8004596:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc fbd2 	bl	8000d44 <__aeabi_fmul>
 80045a0:	4603      	mov	r3, r0
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b0:	40490fdb 	.word	0x40490fdb
 80045b4:	3fe00000 	.word	0x3fe00000

080045b8 <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e01a      	b.n	8004620 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	461a      	mov	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	6898      	ldr	r0, [r3, #8]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	4413      	add	r3, r2
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	f7fc fb9c 	bl	8000d44 <__aeabi_fmul>
 800460c:	4603      	mov	r3, r0
 800460e:	4619      	mov	r1, r3
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f7fc fa8f 	bl	8000b34 <__addsf3>
 8004616:	4603      	mov	r3, r0
 8004618:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3301      	adds	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d3e0      	bcc.n	80045ea <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	4413      	add	r3, r2
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4619      	mov	r1, r3
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f7fc fa7d 	bl	8000b34 <__addsf3>
 800463a:	4603      	mov	r3, r0
 800463c:	617b      	str	r3, [r7, #20]

    return px;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fc fd13 	bl	8001080 <__aeabi_fcmplt>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <qFIS_Min+0x1c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	e000      	b.n	8004666 <qFIS_Min+0x1e>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f86d 	bl	800474e <qFIS_Bound>
 8004674:	4603      	mov	r3, r0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fd16 	bl	80010bc <__aeabi_fcmpgt>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <qFIS_Max+0x1c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	e000      	b.n	800469c <qFIS_Max+0x1e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f852 	bl	800474e <qFIS_Bound>
 80046aa:	4603      	mov	r3, r0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 80046be:	6839      	ldr	r1, [r7, #0]
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fc fb3f 	bl	8000d44 <__aeabi_fmul>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f83c 	bl	800474e <qFIS_Bound>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fc fa21 	bl	8000b34 <__addsf3>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461c      	mov	r4, r3
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fb23 	bl	8000d44 <__aeabi_fmul>
 80046fe:	4603      	mov	r3, r0
 8004700:	4619      	mov	r1, r3
 8004702:	4620      	mov	r0, r4
 8004704:	f7fc fa14 	bl	8000b30 <__aeabi_fsub>
 8004708:	4603      	mov	r3, r0
 800470a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f81b 	bl	800474e <qFIS_Bound>
 8004718:	4603      	mov	r3, r0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}

08004722 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fa00 	bl	8000b34 <__addsf3>
 8004734:	4603      	mov	r3, r0
 8004736:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f805 	bl	800474e <qFIS_Bound>
 8004744:	4603      	mov	r3, r0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f805 	bl	8004772 <qFMathEx_InRangeCoerce>

    return y;
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd feb9 	bl	80024fe <qFFMath_IsNaN>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e01b      	b.n	80047d2 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4619      	mov	r1, r3
 80047a0:	68b8      	ldr	r0, [r7, #8]
 80047a2:	f7fc fc8b 	bl	80010bc <__aeabi_fcmpgt>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e00e      	b.n	80047d2 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc fc60 	bl	8001080 <__aeabi_fcmplt>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e001      	b.n	80047d2 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 80047dc:	b5b0      	push	{r4, r5, r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7fc f9a0 	bl	8000b30 <__aeabi_fsub>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd fe94 	bl	8002520 <qFFMath_Abs>
 80047f8:	4605      	mov	r5, r0
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd fe90 	bl	8002520 <qFFMath_Abs>
 8004800:	4602      	mov	r2, r0
 8004802:	2301      	movs	r3, #1
 8004804:	461c      	mov	r4, r3
 8004806:	4611      	mov	r1, r2
 8004808:	4628      	mov	r0, r5
 800480a:	f7fc fc43 	bl	8001094 <__aeabi_fcmple>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <qFMathEx_AlmostEqual+0x3c>
 8004814:	2300      	movs	r3, #0
 8004816:	461c      	mov	r4, r3
 8004818:	b2e3      	uxtb	r3, r4
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bdb0      	pop	{r4, r5, r7, pc}

08004822 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 800482c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ffd2 	bl	80047dc <qFMathEx_AlmostEqual>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_MspInit+0x5c>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_MspInit+0x5c>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6193      	str	r3, [r2, #24]
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_MspInit+0x5c>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_MspInit+0x5c>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_MspInit+0x5c>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	61d3      	str	r3, [r2, #28]
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_MspInit+0x5c>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_MspInit+0x60>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_MspInit+0x60>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010000 	.word	0x40010000

080048a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_I2C_MspInit+0x90>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d132      	bne.n	800492e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <HAL_I2C_MspInit+0x94>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_I2C_MspInit+0x94>)
 80048ce:	f043 0308 	orr.w	r3, r3, #8
 80048d2:	6193      	str	r3, [r2, #24]
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_I2C_MspInit+0x94>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048e6:	2312      	movs	r3, #18
 80048e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048ea:	2303      	movs	r3, #3
 80048ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ee:	f107 0314 	add.w	r3, r7, #20
 80048f2:	4619      	mov	r1, r3
 80048f4:	4812      	ldr	r0, [pc, #72]	; (8004940 <HAL_I2C_MspInit+0x98>)
 80048f6:	f000 fbf7 	bl	80050e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_I2C_MspInit+0x9c>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <HAL_I2C_MspInit+0x9c>)
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_I2C_MspInit+0x94>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4a08      	ldr	r2, [pc, #32]	; (800493c <HAL_I2C_MspInit+0x94>)
 800491c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004920:	61d3      	str	r3, [r2, #28]
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_I2C_MspInit+0x94>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800492e:	bf00      	nop
 8004930:	3728      	adds	r7, #40	; 0x28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40005400 	.word	0x40005400
 800493c:	40021000 	.word	0x40021000
 8004940:	40010c00 	.word	0x40010c00
 8004944:	40010000 	.word	0x40010000

08004948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <HAL_TIM_Base_MspInit+0x44>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d113      	bne.n	8004982 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_TIM_Base_MspInit+0x48>)
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <HAL_TIM_Base_MspInit+0x48>)
 8004960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004964:	6193      	str	r3, [r2, #24]
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_TIM_Base_MspInit+0x48>)
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2100      	movs	r1, #0
 8004976:	2019      	movs	r0, #25
 8004978:	f000 facf 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800497c:	2019      	movs	r0, #25
 800497e:	f000 fae8 	bl	8004f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40021000 	.word	0x40021000

08004994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a12      	ldr	r2, [pc, #72]	; (80049ec <HAL_TIM_PWM_MspInit+0x58>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10c      	bne.n	80049c0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	61d3      	str	r3, [r2, #28]
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049be:	e010      	b.n	80049e2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a0b      	ldr	r2, [pc, #44]	; (80049f4 <HAL_TIM_PWM_MspInit+0x60>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d10b      	bne.n	80049e2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4a08      	ldr	r2, [pc, #32]	; (80049f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	61d3      	str	r3, [r2, #28]
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40000800 	.word	0x40000800

080049f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a00:	f107 0314 	add.w	r3, r7, #20
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <HAL_TIM_MspPostInit+0xb8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d12a      	bne.n	8004a6e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a18:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <HAL_TIM_MspPostInit+0xbc>)
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <HAL_TIM_MspPostInit+0xbc>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6193      	str	r3, [r2, #24]
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_TIM_MspPostInit+0xbc>)
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a30:	2330      	movs	r3, #48	; 0x30
 8004a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a34:	2302      	movs	r3, #2
 8004a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	4619      	mov	r1, r3
 8004a42:	481d      	ldr	r0, [pc, #116]	; (8004ab8 <HAL_TIM_MspPostInit+0xc0>)
 8004a44:	f000 fb50 	bl	80050e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004a48:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <HAL_TIM_MspPostInit+0xc4>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <HAL_TIM_MspPostInit+0xc4>)
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004a6c:	e01c      	b.n	8004aa8 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <HAL_TIM_MspPostInit+0xc8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d117      	bne.n	8004aa8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_TIM_MspPostInit+0xbc>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <HAL_TIM_MspPostInit+0xbc>)
 8004a7e:	f043 0308 	orr.w	r3, r3, #8
 8004a82:	6193      	str	r3, [r2, #24]
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_TIM_MspPostInit+0xbc>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a90:	23c0      	movs	r3, #192	; 0xc0
 8004a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a94:	2302      	movs	r3, #2
 8004a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9c:	f107 0314 	add.w	r3, r7, #20
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4805      	ldr	r0, [pc, #20]	; (8004ab8 <HAL_TIM_MspPostInit+0xc0>)
 8004aa4:	f000 fb20 	bl	80050e8 <HAL_GPIO_Init>
}
 8004aa8:	bf00      	nop
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010c00 	.word	0x40010c00
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40000800 	.word	0x40000800

08004ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004acc:	f107 0310 	add.w	r3, r7, #16
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <HAL_UART_MspInit+0x9c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d139      	bne.n	8004b58 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_UART_MspInit+0xa0>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <HAL_UART_MspInit+0xa0>)
 8004aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aee:	6193      	str	r3, [r2, #24]
 8004af0:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <HAL_UART_MspInit+0xa0>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_UART_MspInit+0xa0>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <HAL_UART_MspInit+0xa0>)
 8004b02:	f043 0304 	orr.w	r3, r3, #4
 8004b06:	6193      	str	r3, [r2, #24]
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_UART_MspInit+0xa0>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b22:	f107 0310 	add.w	r3, r7, #16
 8004b26:	4619      	mov	r1, r3
 8004b28:	480f      	ldr	r0, [pc, #60]	; (8004b68 <HAL_UART_MspInit+0xa4>)
 8004b2a:	f000 fadd 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	4619      	mov	r1, r3
 8004b42:	4809      	ldr	r0, [pc, #36]	; (8004b68 <HAL_UART_MspInit+0xa4>)
 8004b44:	f000 fad0 	bl	80050e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2025      	movs	r0, #37	; 0x25
 8004b4e:	f000 f9e4 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b52:	2025      	movs	r0, #37	; 0x25
 8004b54:	f000 f9fd 	bl	8004f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b58:	bf00      	nop
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40010800 	.word	0x40010800

08004b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b70:	e7fe      	b.n	8004b70 <NMI_Handler+0x4>

08004b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b76:	e7fe      	b.n	8004b76 <HardFault_Handler+0x4>

08004b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b7c:	e7fe      	b.n	8004b7c <MemManage_Handler+0x4>

08004b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b82:	e7fe      	b.n	8004b82 <BusFault_Handler+0x4>

08004b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b88:	e7fe      	b.n	8004b88 <UsageFault_Handler+0x4>

08004b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bb2:	f000 f8bf 	bl	8004d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bc0:	4802      	ldr	r0, [pc, #8]	; (8004bcc <TIM1_UP_IRQHandler+0x10>)
 8004bc2:	f002 f9a1 	bl	8006f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200005a0 	.word	0x200005a0

08004bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bd4:	4802      	ldr	r0, [pc, #8]	; (8004be0 <USART1_IRQHandler+0x10>)
 8004bd6:	f003 f82d 	bl	8007c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200004f8 	.word	0x200004f8

08004be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <_sbrk+0x5c>)
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <_sbrk+0x60>)
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <_sbrk+0x64>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <_sbrk+0x64>)
 8004c02:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <_sbrk+0x68>)
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <_sbrk+0x64>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d207      	bcs.n	8004c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c14:	f003 fc08 	bl	8008428 <__errno>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	e009      	b.n	8004c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <_sbrk+0x64>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <_sbrk+0x64>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <_sbrk+0x64>)
 8004c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20005000 	.word	0x20005000
 8004c44:	00000400 	.word	0x00000400
 8004c48:	200003ac 	.word	0x200003ac
 8004c4c:	200005f8 	.word	0x200005f8

08004c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c5c:	480c      	ldr	r0, [pc, #48]	; (8004c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c5e:	490d      	ldr	r1, [pc, #52]	; (8004c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c60:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c64:	e002      	b.n	8004c6c <LoopCopyDataInit>

08004c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c6a:	3304      	adds	r3, #4

08004c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c70:	d3f9      	bcc.n	8004c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c74:	4c0a      	ldr	r4, [pc, #40]	; (8004ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c78:	e001      	b.n	8004c7e <LoopFillZerobss>

08004c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c7c:	3204      	adds	r2, #4

08004c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c80:	d3fb      	bcc.n	8004c7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c82:	f7ff ffe5 	bl	8004c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c86:	f003 fbd5 	bl	8008434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c8a:	f7fc fc01 	bl	8001490 <main>
  bx lr
 8004c8e:	4770      	bx	lr
  ldr r0, =_sdata
 8004c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c94:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8004c98:	08009738 	.word	0x08009738
  ldr r2, =_sbss
 8004c9c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8004ca0:	200005f4 	.word	0x200005f4

08004ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ca4:	e7fe      	b.n	8004ca4 <ADC1_2_IRQHandler>
	...

08004ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_Init+0x28>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_Init+0x28>)
 8004cb2:	f043 0310 	orr.w	r3, r3, #16
 8004cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb8:	2003      	movs	r0, #3
 8004cba:	f000 f923 	bl	8004f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f000 f808 	bl	8004cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cc4:	f7ff fdbe 	bl	8004844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40022000 	.word	0x40022000

08004cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_InitTick+0x54>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_InitTick+0x58>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f93b 	bl	8004f6e <HAL_SYSTICK_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00e      	b.n	8004d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b0f      	cmp	r3, #15
 8004d06:	d80a      	bhi.n	8004d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	f000 f903 	bl	8004f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d14:	4a06      	ldr	r2, [pc, #24]	; (8004d30 <HAL_InitTick+0x5c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200000ac 	.word	0x200000ac
 8004d2c:	200000b4 	.word	0x200000b4
 8004d30:	200000b0 	.word	0x200000b0

08004d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_IncTick+0x1c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_IncTick+0x20>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4413      	add	r3, r2
 8004d44:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <HAL_IncTick+0x20>)
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	200000b4 	.word	0x200000b4
 8004d54:	200005ec 	.word	0x200005ec

08004d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <HAL_GetTick+0x10>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	200005ec 	.word	0x200005ec

08004d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <__NVIC_SetPriorityGrouping+0x44>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d9e:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <__NVIC_SetPriorityGrouping+0x44>)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	60d3      	str	r3, [r2, #12]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__NVIC_GetPriorityGrouping+0x18>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	f003 0307 	and.w	r3, r3, #7
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db0b      	blt.n	8004dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	f003 021f 	and.w	r2, r3, #31
 8004de8:	4906      	ldr	r1, [pc, #24]	; (8004e04 <__NVIC_EnableIRQ+0x34>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2001      	movs	r0, #1
 8004df2:	fa00 f202 	lsl.w	r2, r0, r2
 8004df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100

08004e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	6039      	str	r1, [r7, #0]
 8004e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	db0a      	blt.n	8004e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	490c      	ldr	r1, [pc, #48]	; (8004e54 <__NVIC_SetPriority+0x4c>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	0112      	lsls	r2, r2, #4
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e30:	e00a      	b.n	8004e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4908      	ldr	r1, [pc, #32]	; (8004e58 <__NVIC_SetPriority+0x50>)
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	3b04      	subs	r3, #4
 8004e40:	0112      	lsls	r2, r2, #4
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	440b      	add	r3, r1
 8004e46:	761a      	strb	r2, [r3, #24]
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	e000e100 	.word	0xe000e100
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f1c3 0307 	rsb	r3, r3, #7
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	bf28      	it	cs
 8004e7a:	2304      	movcs	r3, #4
 8004e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d902      	bls.n	8004e8c <NVIC_EncodePriority+0x30>
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3b03      	subs	r3, #3
 8004e8a:	e000      	b.n	8004e8e <NVIC_EncodePriority+0x32>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	43d9      	mvns	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	4313      	orrs	r3, r2
         );
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3724      	adds	r7, #36	; 0x24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed0:	d301      	bcc.n	8004ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e00f      	b.n	8004ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <SysTick_Config+0x40>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ede:	210f      	movs	r1, #15
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	f7ff ff90 	bl	8004e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <SysTick_Config+0x40>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <SysTick_Config+0x40>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000e010 	.word	0xe000e010

08004f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff2d 	bl	8004d6c <__NVIC_SetPriorityGrouping>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4603      	mov	r3, r0
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f2c:	f7ff ff42 	bl	8004db4 <__NVIC_GetPriorityGrouping>
 8004f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f7ff ff90 	bl	8004e5c <NVIC_EncodePriority>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff5f 	bl	8004e08 <__NVIC_SetPriority>
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff35 	bl	8004dd0 <__NVIC_EnableIRQ>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ffa2 	bl	8004ec0 <SysTick_Config>
 8004f7c:	4603      	mov	r3, r0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d008      	beq.n	8004fae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e020      	b.n	8004ff0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 020e 	bic.w	r2, r2, #14
 8004fbc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800500e:	2b02      	cmp	r3, #2
 8005010:	d005      	beq.n	800501e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	e051      	b.n	80050c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 020e 	bic.w	r2, r2, #14
 800502c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_DMA_Abort_IT+0xd0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d029      	beq.n	800509c <HAL_DMA_Abort_IT+0xa0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <HAL_DMA_Abort_IT+0xd4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_Abort_IT+0x9c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_DMA_Abort_IT+0xd8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01a      	beq.n	8005092 <HAL_DMA_Abort_IT+0x96>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <HAL_DMA_Abort_IT+0xdc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d012      	beq.n	800508c <HAL_DMA_Abort_IT+0x90>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_DMA_Abort_IT+0xe0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00a      	beq.n	8005086 <HAL_DMA_Abort_IT+0x8a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_DMA_Abort_IT+0xe4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d102      	bne.n	8005080 <HAL_DMA_Abort_IT+0x84>
 800507a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800507e:	e00e      	b.n	800509e <HAL_DMA_Abort_IT+0xa2>
 8005080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005084:	e00b      	b.n	800509e <HAL_DMA_Abort_IT+0xa2>
 8005086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800508a:	e008      	b.n	800509e <HAL_DMA_Abort_IT+0xa2>
 800508c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005090:	e005      	b.n	800509e <HAL_DMA_Abort_IT+0xa2>
 8005092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005096:	e002      	b.n	800509e <HAL_DMA_Abort_IT+0xa2>
 8005098:	2310      	movs	r3, #16
 800509a:	e000      	b.n	800509e <HAL_DMA_Abort_IT+0xa2>
 800509c:	2301      	movs	r3, #1
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <HAL_DMA_Abort_IT+0xe8>)
 80050a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
    } 
  }
  return status;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40020008 	.word	0x40020008
 80050d0:	4002001c 	.word	0x4002001c
 80050d4:	40020030 	.word	0x40020030
 80050d8:	40020044 	.word	0x40020044
 80050dc:	40020058 	.word	0x40020058
 80050e0:	4002006c 	.word	0x4002006c
 80050e4:	40020000 	.word	0x40020000

080050e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050f6:	2300      	movs	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050fa:	e127      	b.n	800534c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050fc:	2201      	movs	r2, #1
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	429a      	cmp	r2, r3
 8005116:	f040 8116 	bne.w	8005346 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b12      	cmp	r3, #18
 8005120:	d034      	beq.n	800518c <HAL_GPIO_Init+0xa4>
 8005122:	2b12      	cmp	r3, #18
 8005124:	d80d      	bhi.n	8005142 <HAL_GPIO_Init+0x5a>
 8005126:	2b02      	cmp	r3, #2
 8005128:	d02b      	beq.n	8005182 <HAL_GPIO_Init+0x9a>
 800512a:	2b02      	cmp	r3, #2
 800512c:	d804      	bhi.n	8005138 <HAL_GPIO_Init+0x50>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d031      	beq.n	8005196 <HAL_GPIO_Init+0xae>
 8005132:	2b01      	cmp	r3, #1
 8005134:	d01c      	beq.n	8005170 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005136:	e048      	b.n	80051ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005138:	2b03      	cmp	r3, #3
 800513a:	d043      	beq.n	80051c4 <HAL_GPIO_Init+0xdc>
 800513c:	2b11      	cmp	r3, #17
 800513e:	d01b      	beq.n	8005178 <HAL_GPIO_Init+0x90>
          break;
 8005140:	e043      	b.n	80051ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005142:	4a89      	ldr	r2, [pc, #548]	; (8005368 <HAL_GPIO_Init+0x280>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d026      	beq.n	8005196 <HAL_GPIO_Init+0xae>
 8005148:	4a87      	ldr	r2, [pc, #540]	; (8005368 <HAL_GPIO_Init+0x280>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d806      	bhi.n	800515c <HAL_GPIO_Init+0x74>
 800514e:	4a87      	ldr	r2, [pc, #540]	; (800536c <HAL_GPIO_Init+0x284>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d020      	beq.n	8005196 <HAL_GPIO_Init+0xae>
 8005154:	4a86      	ldr	r2, [pc, #536]	; (8005370 <HAL_GPIO_Init+0x288>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01d      	beq.n	8005196 <HAL_GPIO_Init+0xae>
          break;
 800515a:	e036      	b.n	80051ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800515c:	4a85      	ldr	r2, [pc, #532]	; (8005374 <HAL_GPIO_Init+0x28c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d019      	beq.n	8005196 <HAL_GPIO_Init+0xae>
 8005162:	4a85      	ldr	r2, [pc, #532]	; (8005378 <HAL_GPIO_Init+0x290>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d016      	beq.n	8005196 <HAL_GPIO_Init+0xae>
 8005168:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_GPIO_Init+0x294>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_GPIO_Init+0xae>
          break;
 800516e:	e02c      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	623b      	str	r3, [r7, #32]
          break;
 8005176:	e028      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	3304      	adds	r3, #4
 800517e:	623b      	str	r3, [r7, #32]
          break;
 8005180:	e023      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	3308      	adds	r3, #8
 8005188:	623b      	str	r3, [r7, #32]
          break;
 800518a:	e01e      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	330c      	adds	r3, #12
 8005192:	623b      	str	r3, [r7, #32]
          break;
 8005194:	e019      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800519e:	2304      	movs	r3, #4
 80051a0:	623b      	str	r3, [r7, #32]
          break;
 80051a2:	e012      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d105      	bne.n	80051b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051ac:	2308      	movs	r3, #8
 80051ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	611a      	str	r2, [r3, #16]
          break;
 80051b6:	e008      	b.n	80051ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051b8:	2308      	movs	r3, #8
 80051ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	615a      	str	r2, [r3, #20]
          break;
 80051c2:	e002      	b.n	80051ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051c4:	2300      	movs	r3, #0
 80051c6:	623b      	str	r3, [r7, #32]
          break;
 80051c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2bff      	cmp	r3, #255	; 0xff
 80051ce:	d801      	bhi.n	80051d4 <HAL_GPIO_Init+0xec>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	e001      	b.n	80051d8 <HAL_GPIO_Init+0xf0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2bff      	cmp	r3, #255	; 0xff
 80051de:	d802      	bhi.n	80051e6 <HAL_GPIO_Init+0xfe>
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	e002      	b.n	80051ec <HAL_GPIO_Init+0x104>
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	3b08      	subs	r3, #8
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	210f      	movs	r1, #15
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	401a      	ands	r2, r3
 80051fe:	6a39      	ldr	r1, [r7, #32]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	fa01 f303 	lsl.w	r3, r1, r3
 8005206:	431a      	orrs	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8096 	beq.w	8005346 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800521a:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_GPIO_Init+0x298>)
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_GPIO_Init+0x298>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6193      	str	r3, [r2, #24]
 8005226:	4b56      	ldr	r3, [pc, #344]	; (8005380 <HAL_GPIO_Init+0x298>)
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005232:	4a54      	ldr	r2, [pc, #336]	; (8005384 <HAL_GPIO_Init+0x29c>)
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4013      	ands	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4b      	ldr	r2, [pc, #300]	; (8005388 <HAL_GPIO_Init+0x2a0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_GPIO_Init+0x19e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4a      	ldr	r2, [pc, #296]	; (800538c <HAL_GPIO_Init+0x2a4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00d      	beq.n	8005282 <HAL_GPIO_Init+0x19a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a49      	ldr	r2, [pc, #292]	; (8005390 <HAL_GPIO_Init+0x2a8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d007      	beq.n	800527e <HAL_GPIO_Init+0x196>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a48      	ldr	r2, [pc, #288]	; (8005394 <HAL_GPIO_Init+0x2ac>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d101      	bne.n	800527a <HAL_GPIO_Init+0x192>
 8005276:	2303      	movs	r3, #3
 8005278:	e006      	b.n	8005288 <HAL_GPIO_Init+0x1a0>
 800527a:	2304      	movs	r3, #4
 800527c:	e004      	b.n	8005288 <HAL_GPIO_Init+0x1a0>
 800527e:	2302      	movs	r3, #2
 8005280:	e002      	b.n	8005288 <HAL_GPIO_Init+0x1a0>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_GPIO_Init+0x1a0>
 8005286:	2300      	movs	r3, #0
 8005288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528a:	f002 0203 	and.w	r2, r2, #3
 800528e:	0092      	lsls	r2, r2, #2
 8005290:	4093      	lsls	r3, r2
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005298:	493a      	ldr	r1, [pc, #232]	; (8005384 <HAL_GPIO_Init+0x29c>)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80052b2:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4938      	ldr	r1, [pc, #224]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
 80052be:	e006      	b.n	80052ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	4933      	ldr	r1, [pc, #204]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052da:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	492e      	ldr	r1, [pc, #184]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]
 80052e6:	e006      	b.n	80052f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052e8:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	4929      	ldr	r1, [pc, #164]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005302:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	4924      	ldr	r1, [pc, #144]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
 800530e:	e006      	b.n	800531e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	43db      	mvns	r3, r3
 8005318:	491f      	ldr	r1, [pc, #124]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 800531a:	4013      	ands	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	491a      	ldr	r1, [pc, #104]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	60cb      	str	r3, [r1, #12]
 8005336:	e006      	b.n	8005346 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005338:	4b17      	ldr	r3, [pc, #92]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	43db      	mvns	r3, r3
 8005340:	4915      	ldr	r1, [pc, #84]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005342:	4013      	ands	r3, r2
 8005344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	3301      	adds	r3, #1
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	f47f aed0 	bne.w	80050fc <HAL_GPIO_Init+0x14>
  }
}
 800535c:	bf00      	nop
 800535e:	372c      	adds	r7, #44	; 0x2c
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	10210000 	.word	0x10210000
 800536c:	10110000 	.word	0x10110000
 8005370:	10120000 	.word	0x10120000
 8005374:	10310000 	.word	0x10310000
 8005378:	10320000 	.word	0x10320000
 800537c:	10220000 	.word	0x10220000
 8005380:	40021000 	.word	0x40021000
 8005384:	40010000 	.word	0x40010000
 8005388:	40010800 	.word	0x40010800
 800538c:	40010c00 	.word	0x40010c00
 8005390:	40011000 	.word	0x40011000
 8005394:	40011400 	.word	0x40011400
 8005398:	40010400 	.word	0x40010400

0800539c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
 80053a8:	4613      	mov	r3, r2
 80053aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ac:	787b      	ldrb	r3, [r7, #1]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053b8:	e003      	b.n	80053c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	041a      	lsls	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e11f      	b.n	800561e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fa58 	bl	80048a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	; 0x24
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800541e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800542e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005430:	f001 fb90 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8005434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4a7b      	ldr	r2, [pc, #492]	; (8005628 <HAL_I2C_Init+0x25c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d807      	bhi.n	8005450 <HAL_I2C_Init+0x84>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a7a      	ldr	r2, [pc, #488]	; (800562c <HAL_I2C_Init+0x260>)
 8005444:	4293      	cmp	r3, r2
 8005446:	bf94      	ite	ls
 8005448:	2301      	movls	r3, #1
 800544a:	2300      	movhi	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e006      	b.n	800545e <HAL_I2C_Init+0x92>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a77      	ldr	r2, [pc, #476]	; (8005630 <HAL_I2C_Init+0x264>)
 8005454:	4293      	cmp	r3, r2
 8005456:	bf94      	ite	ls
 8005458:	2301      	movls	r3, #1
 800545a:	2300      	movhi	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0db      	b.n	800561e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a72      	ldr	r2, [pc, #456]	; (8005634 <HAL_I2C_Init+0x268>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0c9b      	lsrs	r3, r3, #18
 8005470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a64      	ldr	r2, [pc, #400]	; (8005628 <HAL_I2C_Init+0x25c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <HAL_I2C_Init+0xd4>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3301      	adds	r3, #1
 800549e:	e009      	b.n	80054b4 <HAL_I2C_Init+0xe8>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	4a63      	ldr	r2, [pc, #396]	; (8005638 <HAL_I2C_Init+0x26c>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	099b      	lsrs	r3, r3, #6
 80054b2:	3301      	adds	r3, #1
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4956      	ldr	r1, [pc, #344]	; (8005628 <HAL_I2C_Init+0x25c>)
 80054d0:	428b      	cmp	r3, r1
 80054d2:	d80d      	bhi.n	80054f0 <HAL_I2C_Init+0x124>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1e59      	subs	r1, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e2:	3301      	adds	r3, #1
 80054e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	bf38      	it	cc
 80054ec:	2304      	movcc	r3, #4
 80054ee:	e04f      	b.n	8005590 <HAL_I2C_Init+0x1c4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d111      	bne.n	800551c <HAL_I2C_Init+0x150>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e58      	subs	r0, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	440b      	add	r3, r1
 8005506:	fbb0 f3f3 	udiv	r3, r0, r3
 800550a:	3301      	adds	r3, #1
 800550c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e012      	b.n	8005542 <HAL_I2C_Init+0x176>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	0099      	lsls	r1, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005532:	3301      	adds	r3, #1
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Init+0x17e>
 8005546:	2301      	movs	r3, #1
 8005548:	e022      	b.n	8005590 <HAL_I2C_Init+0x1c4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10e      	bne.n	8005570 <HAL_I2C_Init+0x1a4>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1e58      	subs	r0, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	440b      	add	r3, r1
 8005560:	fbb0 f3f3 	udiv	r3, r0, r3
 8005564:	3301      	adds	r3, #1
 8005566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	e00f      	b.n	8005590 <HAL_I2C_Init+0x1c4>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e58      	subs	r0, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	0099      	lsls	r1, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	fbb0 f3f3 	udiv	r3, r0, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	6809      	ldr	r1, [r1, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6911      	ldr	r1, [r2, #16]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	4311      	orrs	r1, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	000186a0 	.word	0x000186a0
 800562c:	001e847f 	.word	0x001e847f
 8005630:	003d08ff 	.word	0x003d08ff
 8005634:	431bde83 	.word	0x431bde83
 8005638:	10624dd3 	.word	0x10624dd3

0800563c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	460b      	mov	r3, r1
 8005650:	813b      	strh	r3, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005656:	f7ff fb7f 	bl	8004d58 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	f040 80d9 	bne.w	800581c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	2319      	movs	r3, #25
 8005670:	2201      	movs	r2, #1
 8005672:	496d      	ldr	r1, [pc, #436]	; (8005828 <HAL_I2C_Mem_Write+0x1ec>)
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fcbb 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005680:	2302      	movs	r3, #2
 8005682:	e0cc      	b.n	800581e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_I2C_Mem_Write+0x56>
 800568e:	2302      	movs	r3, #2
 8005690:	e0c5      	b.n	800581e <HAL_I2C_Mem_Write+0x1e2>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d007      	beq.n	80056b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2221      	movs	r2, #33	; 0x21
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2240      	movs	r2, #64	; 0x40
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a4d      	ldr	r2, [pc, #308]	; (800582c <HAL_I2C_Mem_Write+0x1f0>)
 80056f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056fa:	88f8      	ldrh	r0, [r7, #6]
 80056fc:	893a      	ldrh	r2, [r7, #8]
 80056fe:	8979      	ldrh	r1, [r7, #10]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4603      	mov	r3, r0
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 faf2 	bl	8005cf4 <I2C_RequestMemoryWrite>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d052      	beq.n	80057bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e081      	b.n	800581e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fd3c 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b04      	cmp	r3, #4
 8005730:	d107      	bne.n	8005742 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e06b      	b.n	800581e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b04      	cmp	r3, #4
 8005782:	d11b      	bne.n	80057bc <HAL_I2C_Mem_Write+0x180>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d017      	beq.n	80057bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1aa      	bne.n	800571a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fd28 	bl	800621e <I2C_WaitOnBTFFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d107      	bne.n	80057ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e016      	b.n	800581e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	00100002 	.word	0x00100002
 800582c:	ffff0000 	.word	0xffff0000

08005830 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	; 0x30
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4603      	mov	r3, r0
 8005840:	817b      	strh	r3, [r7, #10]
 8005842:	460b      	mov	r3, r1
 8005844:	813b      	strh	r3, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800584e:	f7ff fa83 	bl	8004d58 <HAL_GetTick>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b20      	cmp	r3, #32
 800585e:	f040 823d 	bne.w	8005cdc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	2319      	movs	r3, #25
 8005868:	2201      	movs	r2, #1
 800586a:	4981      	ldr	r1, [pc, #516]	; (8005a70 <HAL_I2C_Mem_Read+0x240>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fbbf 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
 800587a:	e230      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_I2C_Mem_Read+0x5a>
 8005886:	2302      	movs	r3, #2
 8005888:	e229      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d007      	beq.n	80058b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2222      	movs	r2, #34	; 0x22
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80058e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a61      	ldr	r2, [pc, #388]	; (8005a74 <HAL_I2C_Mem_Read+0x244>)
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058f2:	88f8      	ldrh	r0, [r7, #6]
 80058f4:	893a      	ldrh	r2, [r7, #8]
 80058f6:	8979      	ldrh	r1, [r7, #10]
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	4603      	mov	r3, r0
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fa8c 	bl	8005e20 <I2C_RequestMemoryRead>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e1e5      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	d113      	bne.n	8005942 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e1b9      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	2b01      	cmp	r3, #1
 8005948:	d11d      	bne.n	8005986 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005980:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005982:	b662      	cpsie	i
 8005984:	e197      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	2b02      	cmp	r3, #2
 800598c:	d11d      	bne.n	80059ca <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800599e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059c6:	b662      	cpsie	i
 80059c8:	e175      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80059f0:	e161      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	f200 811a 	bhi.w	8005c30 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d123      	bne.n	8005a4c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fc49 	bl	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e162      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a4a:	e134      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d150      	bne.n	8005af6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4906      	ldr	r1, [pc, #24]	; (8005a78 <HAL_I2C_Mem_Read+0x248>)
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fac6 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e137      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
 8005a6e:	bf00      	nop
 8005a70:	00100002 	.word	0x00100002
 8005a74:	ffff0000 	.word	0xffff0000
 8005a78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005a7c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a8c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ac0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005af4:	e0df      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2200      	movs	r2, #0
 8005afe:	497a      	ldr	r1, [pc, #488]	; (8005ce8 <HAL_I2C_Mem_Read+0x4b8>)
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fa75 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0e6      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b20:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b54:	4b65      	ldr	r3, [pc, #404]	; (8005cec <HAL_I2C_Mem_Read+0x4bc>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	08db      	lsrs	r3, r3, #3
 8005b5a:	4a65      	ldr	r2, [pc, #404]	; (8005cf0 <HAL_I2C_Mem_Read+0x4c0>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	0a1a      	lsrs	r2, r3, #8
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00da      	lsls	r2, r3, #3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d117      	bne.n	8005baa <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005b9c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e099      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d1da      	bne.n	8005b6e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bfa:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c2e:	e042      	b.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fb33 	bl	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e04c      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d118      	bne.n	8005cb6 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f47f ae99 	bne.w	80059f2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e000      	b.n	8005cde <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	00010004 	.word	0x00010004
 8005cec:	200000ac 	.word	0x200000ac
 8005cf0:	14f8b589 	.word	0x14f8b589

08005cf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	817b      	strh	r3, [r7, #10]
 8005d06:	460b      	mov	r3, r1
 8005d08:	813b      	strh	r3, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f960 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d44:	d103      	bne.n	8005d4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e05f      	b.n	8005e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d52:	897b      	ldrh	r3, [r7, #10]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	492d      	ldr	r1, [pc, #180]	; (8005e1c <I2C_RequestMemoryWrite+0x128>)
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f998 	bl	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e04c      	b.n	8005e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	6a39      	ldr	r1, [r7, #32]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa02 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d107      	bne.n	8005db6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e02b      	b.n	8005e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d105      	bne.n	8005dcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc0:	893b      	ldrh	r3, [r7, #8]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	611a      	str	r2, [r3, #16]
 8005dca:	e021      	b.n	8005e10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dcc:	893b      	ldrh	r3, [r7, #8]
 8005dce:	0a1b      	lsrs	r3, r3, #8
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ddc:	6a39      	ldr	r1, [r7, #32]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f9dc 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d107      	bne.n	8005e02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e005      	b.n	8005e12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e06:	893b      	ldrh	r3, [r7, #8]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	00010002 	.word	0x00010002

08005e20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4603      	mov	r3, r0
 8005e30:	817b      	strh	r3, [r7, #10]
 8005e32:	460b      	mov	r3, r1
 8005e34:	813b      	strh	r3, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f8c2 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e80:	d103      	bne.n	8005e8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0aa      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e8e:	897b      	ldrh	r3, [r7, #10]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	4952      	ldr	r1, [pc, #328]	; (8005fec <I2C_RequestMemoryRead+0x1cc>)
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8fa 	bl	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e097      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ecc:	6a39      	ldr	r1, [r7, #32]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f964 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d107      	bne.n	8005ef2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e076      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d105      	bne.n	8005f08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	611a      	str	r2, [r3, #16]
 8005f06:	e021      	b.n	8005f4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f08:	893b      	ldrh	r3, [r7, #8]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f18:	6a39      	ldr	r1, [r7, #32]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f93e 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d107      	bne.n	8005f3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e050      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f42:	893b      	ldrh	r3, [r7, #8]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4e:	6a39      	ldr	r1, [r7, #32]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f923 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d107      	bne.n	8005f74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e035      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f82b 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d103      	bne.n	8005fb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e013      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fbc:	897b      	ldrh	r3, [r7, #10]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	6a3a      	ldr	r2, [r7, #32]
 8005fd0:	4906      	ldr	r1, [pc, #24]	; (8005fec <I2C_RequestMemoryRead+0x1cc>)
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f863 	bl	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	00010002 	.word	0x00010002

08005ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006000:	e025      	b.n	800604e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d021      	beq.n	800604e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fe fea5 	bl	8004d58 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d116      	bne.n	800604e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f043 0220 	orr.w	r2, r3, #32
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e023      	b.n	8006096 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	0c1b      	lsrs	r3, r3, #16
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d10d      	bne.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	e00c      	b.n	800608e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	43da      	mvns	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d0b6      	beq.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ac:	e051      	b.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d123      	bne.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e046      	b.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d021      	beq.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fe fe23 	bl	8004d58 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d116      	bne.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e020      	b.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	d10c      	bne.n	8006176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	43da      	mvns	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	bf14      	ite	ne
 800616e:	2301      	movne	r3, #1
 8006170:	2300      	moveq	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	e00b      	b.n	800618e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	43da      	mvns	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4013      	ands	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d18d      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a8:	e02d      	b.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f8ce 	bl	800634c <I2C_IsAcknowledgeFailed>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e02d      	b.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d021      	beq.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fe fdc9 	bl	8004d58 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e007      	b.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d1ca      	bne.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800622a:	e02d      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f88d 	bl	800634c <I2C_IsAcknowledgeFailed>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e02d      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d021      	beq.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006244:	f7fe fd88 	bl	8004d58 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d116      	bne.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e007      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b04      	cmp	r3, #4
 8006294:	d1ca      	bne.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062ac:	e042      	b.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d119      	bne.n	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0210 	mvn.w	r2, #16
 80062c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e029      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fe fd32 	bl	8004d58 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d1b5      	bne.n	80062ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d11b      	bne.n	800639c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800636c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	f043 0204 	orr.w	r2, r3, #4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e26c      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8087 	beq.w	80064d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063c8:	4b92      	ldr	r3, [pc, #584]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d00c      	beq.n	80063ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063d4:	4b8f      	ldr	r3, [pc, #572]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d112      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e>
 80063e0:	4b8c      	ldr	r3, [pc, #560]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d10b      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ee:	4b89      	ldr	r3, [pc, #548]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d06c      	beq.n	80064d4 <HAL_RCC_OscConfig+0x12c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d168      	bne.n	80064d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e246      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d106      	bne.n	800641e <HAL_RCC_OscConfig+0x76>
 8006410:	4b80      	ldr	r3, [pc, #512]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a7f      	ldr	r2, [pc, #508]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e02e      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x98>
 8006426:	4b7b      	ldr	r3, [pc, #492]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7a      	ldr	r2, [pc, #488]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800642c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4b78      	ldr	r3, [pc, #480]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a77      	ldr	r2, [pc, #476]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e01d      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006448:	d10c      	bne.n	8006464 <HAL_RCC_OscConfig+0xbc>
 800644a:	4b72      	ldr	r3, [pc, #456]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a71      	ldr	r2, [pc, #452]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	4b6f      	ldr	r3, [pc, #444]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6e      	ldr	r2, [pc, #440]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800645c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e00b      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 8006464:	4b6b      	ldr	r3, [pc, #428]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6a      	ldr	r2, [pc, #424]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800646a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4b68      	ldr	r3, [pc, #416]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a67      	ldr	r2, [pc, #412]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fe fc68 	bl	8004d58 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7fe fc64 	bl	8004d58 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	; 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e1fa      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649e:	4b5d      	ldr	r3, [pc, #372]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0xe4>
 80064aa:	e014      	b.n	80064d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fe fc54 	bl	8004d58 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064b4:	f7fe fc50 	bl	8004d58 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b64      	cmp	r3, #100	; 0x64
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e1e6      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c6:	4b53      	ldr	r3, [pc, #332]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x10c>
 80064d2:	e000      	b.n	80064d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d063      	beq.n	80065aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064e2:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064ee:	4b49      	ldr	r3, [pc, #292]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d11c      	bne.n	8006534 <HAL_RCC_OscConfig+0x18c>
 80064fa:	4b46      	ldr	r3, [pc, #280]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d116      	bne.n	8006534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	4b43      	ldr	r3, [pc, #268]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_RCC_OscConfig+0x176>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d001      	beq.n	800651e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e1ba      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651e:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4939      	ldr	r1, [pc, #228]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006532:	e03a      	b.n	80065aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d020      	beq.n	800657e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <HAL_RCC_OscConfig+0x270>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006542:	f7fe fc09 	bl	8004d58 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654a:	f7fe fc05 	bl	8004d58 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e19b      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b2a      	ldr	r3, [pc, #168]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4927      	ldr	r1, [pc, #156]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
 800657c:	e015      	b.n	80065aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800657e:	4b26      	ldr	r3, [pc, #152]	; (8006618 <HAL_RCC_OscConfig+0x270>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7fe fbe8 	bl	8004d58 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800658c:	f7fe fbe4 	bl	8004d58 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e17a      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659e:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03a      	beq.n	800662c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <HAL_RCC_OscConfig+0x274>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c4:	f7fe fbc8 	bl	8004d58 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065cc:	f7fe fbc4 	bl	8004d58 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e15a      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065ea:	2001      	movs	r0, #1
 80065ec:	f000 fada 	bl	8006ba4 <RCC_Delay>
 80065f0:	e01c      	b.n	800662c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_RCC_OscConfig+0x274>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f8:	f7fe fbae 	bl	8004d58 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065fe:	e00f      	b.n	8006620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006600:	f7fe fbaa 	bl	8004d58 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d908      	bls.n	8006620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e140      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000
 8006618:	42420000 	.word	0x42420000
 800661c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006620:	4b9e      	ldr	r3, [pc, #632]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e9      	bne.n	8006600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80a6 	beq.w	8006786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800663e:	4b97      	ldr	r3, [pc, #604]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664a:	4b94      	ldr	r3, [pc, #592]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4a93      	ldr	r2, [pc, #588]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	61d3      	str	r3, [r2, #28]
 8006656:	4b91      	ldr	r3, [pc, #580]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006666:	4b8e      	ldr	r3, [pc, #568]	; (80068a0 <HAL_RCC_OscConfig+0x4f8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d118      	bne.n	80066a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006672:	4b8b      	ldr	r3, [pc, #556]	; (80068a0 <HAL_RCC_OscConfig+0x4f8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a8a      	ldr	r2, [pc, #552]	; (80068a0 <HAL_RCC_OscConfig+0x4f8>)
 8006678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667e:	f7fe fb6b 	bl	8004d58 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006686:	f7fe fb67 	bl	8004d58 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b64      	cmp	r3, #100	; 0x64
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0fd      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <HAL_RCC_OscConfig+0x4f8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <HAL_RCC_OscConfig+0x312>
 80066ac:	4b7b      	ldr	r3, [pc, #492]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	4a7a      	ldr	r2, [pc, #488]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6213      	str	r3, [r2, #32]
 80066b8:	e02d      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <HAL_RCC_OscConfig+0x334>
 80066c2:	4b76      	ldr	r3, [pc, #472]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	4a75      	ldr	r2, [pc, #468]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066c8:	f023 0301 	bic.w	r3, r3, #1
 80066cc:	6213      	str	r3, [r2, #32]
 80066ce:	4b73      	ldr	r3, [pc, #460]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	4a72      	ldr	r2, [pc, #456]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	6213      	str	r3, [r2, #32]
 80066da:	e01c      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d10c      	bne.n	80066fe <HAL_RCC_OscConfig+0x356>
 80066e4:	4b6d      	ldr	r3, [pc, #436]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	4a6c      	ldr	r2, [pc, #432]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066ea:	f043 0304 	orr.w	r3, r3, #4
 80066ee:	6213      	str	r3, [r2, #32]
 80066f0:	4b6a      	ldr	r3, [pc, #424]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	4a69      	ldr	r2, [pc, #420]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6213      	str	r3, [r2, #32]
 80066fc:	e00b      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066fe:	4b67      	ldr	r3, [pc, #412]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	4a66      	ldr	r2, [pc, #408]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	6213      	str	r3, [r2, #32]
 800670a:	4b64      	ldr	r3, [pc, #400]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4a63      	ldr	r2, [pc, #396]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006710:	f023 0304 	bic.w	r3, r3, #4
 8006714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7fe fb1b 	bl	8004d58 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fe fb17 	bl	8004d58 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0ab      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673c:	4b57      	ldr	r3, [pc, #348]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0ee      	beq.n	8006726 <HAL_RCC_OscConfig+0x37e>
 8006748:	e014      	b.n	8006774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674a:	f7fe fb05 	bl	8004d58 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006750:	e00a      	b.n	8006768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006752:	f7fe fb01 	bl	8004d58 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006760:	4293      	cmp	r3, r2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e095      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006768:	4b4c      	ldr	r3, [pc, #304]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1ee      	bne.n	8006752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d105      	bne.n	8006786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677a:	4b48      	ldr	r3, [pc, #288]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	4a47      	ldr	r2, [pc, #284]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8081 	beq.w	8006892 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006790:	4b42      	ldr	r3, [pc, #264]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b08      	cmp	r3, #8
 800679a:	d061      	beq.n	8006860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d146      	bne.n	8006832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a4:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <HAL_RCC_OscConfig+0x4fc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fe fad5 	bl	8004d58 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fe fad1 	bl	8004d58 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e067      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c4:	4b35      	ldr	r3, [pc, #212]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d108      	bne.n	80067ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067da:	4b30      	ldr	r3, [pc, #192]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	492d      	ldr	r1, [pc, #180]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a19      	ldr	r1, [r3, #32]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	430b      	orrs	r3, r1
 80067fe:	4927      	ldr	r1, [pc, #156]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006804:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <HAL_RCC_OscConfig+0x4fc>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680a:	f7fe faa5 	bl	8004d58 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006812:	f7fe faa1 	bl	8004d58 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e037      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006824:	4b1d      	ldr	r3, [pc, #116]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x46a>
 8006830:	e02f      	b.n	8006892 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <HAL_RCC_OscConfig+0x4fc>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fe fa8e 	bl	8004d58 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006840:	f7fe fa8a 	bl	8004d58 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e020      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x498>
 800685e:	e018      	b.n	8006892 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e013      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCC_OscConfig+0x4f4>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	429a      	cmp	r2, r3
 800687e:	d106      	bne.n	800688e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d001      	beq.n	8006892 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40021000 	.word	0x40021000
 80068a0:	40007000 	.word	0x40007000
 80068a4:	42420060 	.word	0x42420060

080068a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0d0      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068bc:	4b6a      	ldr	r3, [pc, #424]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d910      	bls.n	80068ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ca:	4b67      	ldr	r3, [pc, #412]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 0207 	bic.w	r2, r3, #7
 80068d2:	4965      	ldr	r1, [pc, #404]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068da:	4b63      	ldr	r3, [pc, #396]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d001      	beq.n	80068ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e0b8      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d020      	beq.n	800693a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006904:	4b59      	ldr	r3, [pc, #356]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a58      	ldr	r2, [pc, #352]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800690e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800691c:	4b53      	ldr	r3, [pc, #332]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	4a52      	ldr	r2, [pc, #328]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006926:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006928:	4b50      	ldr	r3, [pc, #320]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	494d      	ldr	r1, [pc, #308]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d040      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d107      	bne.n	800695e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	4b47      	ldr	r3, [pc, #284]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d115      	bne.n	8006986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e07f      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006966:	4b41      	ldr	r3, [pc, #260]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e073      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006976:	4b3d      	ldr	r3, [pc, #244]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e06b      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006986:	4b39      	ldr	r3, [pc, #228]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f023 0203 	bic.w	r2, r3, #3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4936      	ldr	r1, [pc, #216]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	4313      	orrs	r3, r2
 8006996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006998:	f7fe f9de 	bl	8004d58 <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a0:	f7fe f9da 	bl	8004d58 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e053      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b6:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 020c 	and.w	r2, r3, #12
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1eb      	bne.n	80069a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069c8:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d210      	bcs.n	80069f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 0207 	bic.w	r2, r3, #7
 80069de:	4922      	ldr	r1, [pc, #136]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	4b20      	ldr	r3, [pc, #128]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d001      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e032      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a04:	4b19      	ldr	r3, [pc, #100]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4916      	ldr	r1, [pc, #88]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	490e      	ldr	r1, [pc, #56]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a36:	f000 f821 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	091b      	lsrs	r3, r3, #4
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006a48:	5cd3      	ldrb	r3, [r2, r3]
 8006a4a:	fa21 f303 	lsr.w	r3, r1, r3
 8006a4e:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <HAL_RCC_ClockConfig+0x1cc>)
 8006a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <HAL_RCC_ClockConfig+0x1d0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe f93c 	bl	8004cd4 <HAL_InitTick>

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40022000 	.word	0x40022000
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	0800969c 	.word	0x0800969c
 8006a74:	200000ac 	.word	0x200000ac
 8006a78:	200000b0 	.word	0x200000b0

08006a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a7c:	b490      	push	{r4, r7}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a84:	1d3c      	adds	r4, r7, #4
 8006a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a8c:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	2300      	movs	r3, #0
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aa6:	4b23      	ldr	r3, [pc, #140]	; (8006b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d002      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0x40>
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d003      	beq.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x46>
 8006aba:	e02d      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006abe:	623b      	str	r3, [r7, #32]
      break;
 8006ac0:	e02d      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	0c9b      	lsrs	r3, r3, #18
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ace:	4413      	add	r3, r2
 8006ad0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ad4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d013      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ae0:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	0c5b      	lsrs	r3, r3, #17
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006aee:	4413      	add	r3, r2
 8006af0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006af4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006afa:	fb02 f203 	mul.w	r2, r2, r3
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
 8006b06:	e004      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4a0c      	ldr	r2, [pc, #48]	; (8006b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b0c:	fb02 f303 	mul.w	r3, r2, r3
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	623b      	str	r3, [r7, #32]
      break;
 8006b16:	e002      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b18:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b1a:	623b      	str	r3, [r7, #32]
      break;
 8006b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc90      	pop	{r4, r7}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	080093c8 	.word	0x080093c8
 8006b30:	080093d8 	.word	0x080093d8
 8006b34:	40021000 	.word	0x40021000
 8006b38:	007a1200 	.word	0x007a1200
 8006b3c:	003d0900 	.word	0x003d0900

08006b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b46:	681b      	ldr	r3, [r3, #0]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	200000ac 	.word	0x200000ac

08006b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b58:	f7ff fff2 	bl	8006b40 <HAL_RCC_GetHCLKFreq>
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4a03      	ldr	r2, [pc, #12]	; (8006b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b6a:	5cd3      	ldrb	r3, [r2, r3]
 8006b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40021000 	.word	0x40021000
 8006b78:	080096ac 	.word	0x080096ac

08006b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b80:	f7ff ffde 	bl	8006b40 <HAL_RCC_GetHCLKFreq>
 8006b84:	4601      	mov	r1, r0
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	0adb      	lsrs	r3, r3, #11
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	4a03      	ldr	r2, [pc, #12]	; (8006ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b92:	5cd3      	ldrb	r3, [r2, r3]
 8006b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	080096ac 	.word	0x080096ac

08006ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006bac:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <RCC_Delay+0x34>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <RCC_Delay+0x38>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	0a5b      	lsrs	r3, r3, #9
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bc0:	bf00      	nop
  }
  while (Delay --);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1e5a      	subs	r2, r3, #1
 8006bc6:	60fa      	str	r2, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f9      	bne.n	8006bc0 <RCC_Delay+0x1c>
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	200000ac 	.word	0x200000ac
 8006bdc:	10624dd3 	.word	0x10624dd3

08006be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e041      	b.n	8006c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fd fe9e 	bl	8004948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f000 fc14 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d001      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e03a      	b.n	8006d0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <HAL_TIM_Base_Start_IT+0x98>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x58>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x58>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a14      	ldr	r2, [pc, #80]	; (8006d1c <HAL_TIM_Base_Start_IT+0x9c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x58>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <HAL_TIM_Base_Start_IT+0xa0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d010      	beq.n	8006d0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfa:	e007      	b.n	8006d0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800

08006d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e041      	b.n	8006dba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fd fe22 	bl	8004994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f000 fb72 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_TIM_PWM_Start+0x24>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	bf14      	ite	ne
 8006de0:	2301      	movne	r3, #1
 8006de2:	2300      	moveq	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	e022      	b.n	8006e2e <HAL_TIM_PWM_Start+0x6a>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d109      	bne.n	8006e02 <HAL_TIM_PWM_Start+0x3e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	bf14      	ite	ne
 8006dfa:	2301      	movne	r3, #1
 8006dfc:	2300      	moveq	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	e015      	b.n	8006e2e <HAL_TIM_PWM_Start+0x6a>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d109      	bne.n	8006e1c <HAL_TIM_PWM_Start+0x58>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	e008      	b.n	8006e2e <HAL_TIM_PWM_Start+0x6a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e05e      	b.n	8006ef4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_PWM_Start+0x82>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e44:	e013      	b.n	8006e6e <HAL_TIM_PWM_Start+0xaa>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_PWM_Start+0x92>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e54:	e00b      	b.n	8006e6e <HAL_TIM_PWM_Start+0xaa>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_PWM_Start+0xa2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e64:	e003      	b.n	8006e6e <HAL_TIM_PWM_Start+0xaa>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fd68 	bl	800794c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1e      	ldr	r2, [pc, #120]	; (8006efc <HAL_TIM_PWM_Start+0x138>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d107      	bne.n	8006e96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a18      	ldr	r2, [pc, #96]	; (8006efc <HAL_TIM_PWM_Start+0x138>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <HAL_TIM_PWM_Start+0xfa>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d009      	beq.n	8006ebe <HAL_TIM_PWM_Start+0xfa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <HAL_TIM_PWM_Start+0x13c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <HAL_TIM_PWM_Start+0xfa>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a12      	ldr	r2, [pc, #72]	; (8006f04 <HAL_TIM_PWM_Start+0x140>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d111      	bne.n	8006ee2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b06      	cmp	r3, #6
 8006ece:	d010      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee0:	e007      	b.n	8006ef2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0201 	orr.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800

08006f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d122      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d11b      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0202 	mvn.w	r2, #2
 8006f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa62 	bl	8007414 <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa55 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa64 	bl	8007426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d122      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d11b      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0204 	mvn.w	r2, #4
 8006f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa38 	bl	8007414 <HAL_TIM_IC_CaptureCallback>
 8006fa4:	e005      	b.n	8006fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa2b 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fa3a 	bl	8007426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d122      	bne.n	800700c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d11b      	bne.n	800700c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0208 	mvn.w	r2, #8
 8006fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa0e 	bl	8007414 <HAL_TIM_IC_CaptureCallback>
 8006ff8:	e005      	b.n	8007006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa01 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fa10 	bl	8007426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0310 	and.w	r3, r3, #16
 8007016:	2b10      	cmp	r3, #16
 8007018:	d122      	bne.n	8007060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b10      	cmp	r3, #16
 8007026:	d11b      	bne.n	8007060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0210 	mvn.w	r2, #16
 8007030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2208      	movs	r2, #8
 8007036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9e4 	bl	8007414 <HAL_TIM_IC_CaptureCallback>
 800704c:	e005      	b.n	800705a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9d7 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9e6 	bl	8007426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b01      	cmp	r3, #1
 800706c:	d10e      	bne.n	800708c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b01      	cmp	r3, #1
 800707a:	d107      	bne.n	800708c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0201 	mvn.w	r2, #1
 8007084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fa f9ec 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007096:	2b80      	cmp	r3, #128	; 0x80
 8007098:	d10e      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b80      	cmp	r3, #128	; 0x80
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fcd5 	bl	8007a62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d10e      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d107      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9aa 	bl	8007438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d10e      	bne.n	8007110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d107      	bne.n	8007110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0220 	mvn.w	r2, #32
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fca0 	bl	8007a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800712e:	2302      	movs	r3, #2
 8007130:	e0ac      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b0c      	cmp	r3, #12
 800713e:	f200 809f 	bhi.w	8007280 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007142:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	0800717d 	.word	0x0800717d
 800714c:	08007281 	.word	0x08007281
 8007150:	08007281 	.word	0x08007281
 8007154:	08007281 	.word	0x08007281
 8007158:	080071bd 	.word	0x080071bd
 800715c:	08007281 	.word	0x08007281
 8007160:	08007281 	.word	0x08007281
 8007164:	08007281 	.word	0x08007281
 8007168:	080071ff 	.word	0x080071ff
 800716c:	08007281 	.word	0x08007281
 8007170:	08007281 	.word	0x08007281
 8007174:	08007281 	.word	0x08007281
 8007178:	0800723f 	.word	0x0800723f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f9c4 	bl	8007510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0208 	orr.w	r2, r2, #8
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0204 	bic.w	r2, r2, #4
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	619a      	str	r2, [r3, #24]
      break;
 80071ba:	e062      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fa0a 	bl	80075dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6999      	ldr	r1, [r3, #24]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	619a      	str	r2, [r3, #24]
      break;
 80071fc:	e041      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fa53 	bl	80076b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0208 	orr.w	r2, r2, #8
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	61da      	str	r2, [r3, #28]
      break;
 800723c:	e021      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fa9d 	bl	8007784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69d9      	ldr	r1, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	021a      	lsls	r2, r3, #8
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	61da      	str	r2, [r3, #28]
      break;
 800727e:	e000      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIM_ConfigClockSource+0x18>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e0a6      	b.n	80073fa <HAL_TIM_ConfigClockSource+0x166>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d067      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0x120>
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d80b      	bhi.n	8007300 <HAL_TIM_ConfigClockSource+0x6c>
 80072e8:	2b10      	cmp	r3, #16
 80072ea:	d073      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x140>
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d802      	bhi.n	80072f6 <HAL_TIM_ConfigClockSource+0x62>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d06f      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80072f4:	e078      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d06c      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x140>
 80072fa:	2b30      	cmp	r3, #48	; 0x30
 80072fc:	d06a      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80072fe:	e073      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007300:	2b70      	cmp	r3, #112	; 0x70
 8007302:	d00d      	beq.n	8007320 <HAL_TIM_ConfigClockSource+0x8c>
 8007304:	2b70      	cmp	r3, #112	; 0x70
 8007306:	d804      	bhi.n	8007312 <HAL_TIM_ConfigClockSource+0x7e>
 8007308:	2b50      	cmp	r3, #80	; 0x50
 800730a:	d033      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0xe0>
 800730c:	2b60      	cmp	r3, #96	; 0x60
 800730e:	d041      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007310:	e06a      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007316:	d066      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x152>
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731c:	d017      	beq.n	800734e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800731e:	e063      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	6899      	ldr	r1, [r3, #8]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f000 faed 	bl	800790e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007342:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	609a      	str	r2, [r3, #8]
      break;
 800734c:	e04c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6899      	ldr	r1, [r3, #8]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f000 fad6 	bl	800790e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007370:	609a      	str	r2, [r3, #8]
      break;
 8007372:	e039      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6859      	ldr	r1, [r3, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	461a      	mov	r2, r3
 8007382:	f000 fa4d 	bl	8007820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2150      	movs	r1, #80	; 0x50
 800738c:	4618      	mov	r0, r3
 800738e:	f000 faa4 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 8007392:	e029      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6859      	ldr	r1, [r3, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f000 fa6b 	bl	800787c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2160      	movs	r1, #96	; 0x60
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fa94 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80073b2:	e019      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f000 fa2d 	bl	8007820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2140      	movs	r1, #64	; 0x40
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fa84 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80073d2:	e009      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f000 fa7b 	bl	80078da <TIM_ITRx_SetConfig>
        break;
 80073e4:	e000      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80073e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr

08007426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr

08007438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr
	...

0800744c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a29      	ldr	r2, [pc, #164]	; (8007504 <TIM_Base_SetConfig+0xb8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00b      	beq.n	800747c <TIM_Base_SetConfig+0x30>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d007      	beq.n	800747c <TIM_Base_SetConfig+0x30>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a26      	ldr	r2, [pc, #152]	; (8007508 <TIM_Base_SetConfig+0xbc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_Base_SetConfig+0x30>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a25      	ldr	r2, [pc, #148]	; (800750c <TIM_Base_SetConfig+0xc0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d108      	bne.n	800748e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1c      	ldr	r2, [pc, #112]	; (8007504 <TIM_Base_SetConfig+0xb8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00b      	beq.n	80074ae <TIM_Base_SetConfig+0x62>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749c:	d007      	beq.n	80074ae <TIM_Base_SetConfig+0x62>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <TIM_Base_SetConfig+0xbc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_Base_SetConfig+0x62>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a18      	ldr	r2, [pc, #96]	; (800750c <TIM_Base_SetConfig+0xc0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d108      	bne.n	80074c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a07      	ldr	r2, [pc, #28]	; (8007504 <TIM_Base_SetConfig+0xb8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d103      	bne.n	80074f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	615a      	str	r2, [r3, #20]
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800

08007510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 0302 	bic.w	r3, r3, #2
 8007558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	4313      	orrs	r3, r2
 8007562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a1c      	ldr	r2, [pc, #112]	; (80075d8 <TIM_OC1_SetConfig+0xc8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d10c      	bne.n	8007586 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f023 0308 	bic.w	r3, r3, #8
 8007572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0304 	bic.w	r3, r3, #4
 8007584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <TIM_OC1_SetConfig+0xc8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d111      	bne.n	80075b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800759c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00

080075dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0210 	bic.w	r2, r3, #16
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f023 0320 	bic.w	r3, r3, #32
 8007626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <TIM_OC2_SetConfig+0xd0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d10d      	bne.n	8007658 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a14      	ldr	r2, [pc, #80]	; (80076ac <TIM_OC2_SetConfig+0xd0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d113      	bne.n	8007688 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800766e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	621a      	str	r2, [r3, #32]
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr
 80076ac:	40012c00 	.word	0x40012c00

080076b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <TIM_OC3_SetConfig+0xd0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d10d      	bne.n	800772a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a14      	ldr	r2, [pc, #80]	; (8007780 <TIM_OC3_SetConfig+0xd0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d113      	bne.n	800775a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	621a      	str	r2, [r3, #32]
}
 8007774:	bf00      	nop
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40012c00 	.word	0x40012c00

08007784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	031b      	lsls	r3, r3, #12
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0f      	ldr	r2, [pc, #60]	; (800781c <TIM_OC4_SetConfig+0x98>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	019b      	lsls	r3, r3, #6
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr
 800781c:	40012c00 	.word	0x40012c00

08007820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f023 0201 	bic.w	r2, r3, #1
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800784a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f023 030a 	bic.w	r3, r3, #10
 800785c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	621a      	str	r2, [r3, #32]
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f023 0210 	bic.w	r2, r3, #16
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	031b      	lsls	r3, r3, #12
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	621a      	str	r2, [r3, #32]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr

080078da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f043 0307 	orr.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	609a      	str	r2, [r3, #8]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr

0800790e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800790e:	b480      	push	{r7}
 8007910:	b087      	sub	sp, #28
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
 800791a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007928:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	021a      	lsls	r2, r3, #8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	431a      	orrs	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	4313      	orrs	r3, r2
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	609a      	str	r2, [r3, #8]
}
 8007942:	bf00      	nop
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr

0800794c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2201      	movs	r2, #1
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	43db      	mvns	r3, r3
 800796e:	401a      	ands	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1a      	ldr	r2, [r3, #32]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	bc80      	pop	{r7}
 8007992:	4770      	bx	lr

08007994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e046      	b.n	8007a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f8:	d009      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a12      	ldr	r2, [pc, #72]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a10      	ldr	r2, [pc, #64]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d10c      	bne.n	8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800

08007a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	4770      	bx	lr

08007a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e03f      	b.n	8007b06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fd f812 	bl	8004ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fc27 	bl	800830c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695a      	ldr	r2, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b08a      	sub	sp, #40	; 0x28
 8007b12:	af02      	add	r7, sp, #8
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d17c      	bne.n	8007c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_UART_Transmit+0x2c>
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e075      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Transmit+0x3e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e06e      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2221      	movs	r2, #33	; 0x21
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b62:	f7fd f8f9 	bl	8004d58 <HAL_GetTick>
 8007b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	88fa      	ldrh	r2, [r7, #6]
 8007b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d108      	bne.n	8007b90 <HAL_UART_Transmit+0x82>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	e003      	b.n	8007b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ba0:	e02a      	b.n	8007bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 fa13 	bl	8007fd8 <UART_WaitOnFlagUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e036      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	61bb      	str	r3, [r7, #24]
 8007bd8:	e007      	b.n	8007bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	781a      	ldrb	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1cf      	bne.n	8007ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2140      	movs	r1, #64	; 0x40
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f9e3 	bl	8007fd8 <UART_WaitOnFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e006      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e000      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
  }
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08a      	sub	sp, #40	; 0x28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <HAL_UART_IRQHandler+0x52>
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa9b 	bl	80081ba <UART_Receive_IT>
      return;
 8007c84:	e17c      	b.n	8007f80 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80b1 	beq.w	8007df0 <HAL_UART_IRQHandler+0x1bc>
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x70>
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80a6 	beq.w	8007df0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x90>
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f043 0201 	orr.w	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_UART_IRQHandler+0xb0>
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	f043 0202 	orr.w	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_UART_IRQHandler+0xd0>
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfc:	f043 0204 	orr.w	r2, r3, #4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00f      	beq.n	8007d2e <HAL_UART_IRQHandler+0xfa>
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <HAL_UART_IRQHandler+0xee>
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f043 0208 	orr.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 811f 	beq.w	8007f76 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <HAL_UART_IRQHandler+0x11e>
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa34 	bl	80081ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf14      	ite	ne
 8007d60:	2301      	movne	r3, #1
 8007d62:	2300      	moveq	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <HAL_UART_IRQHandler+0x146>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d031      	beq.n	8007dde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f976 	bl	800806c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d023      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	695a      	ldr	r2, [r3, #20]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d013      	beq.n	8007dce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	4a77      	ldr	r2, [pc, #476]	; (8007f88 <HAL_UART_IRQHandler+0x354>)
 8007dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fd f922 	bl	8004ffc <HAL_DMA_Abort_IT>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d016      	beq.n	8007dec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	e00e      	b.n	8007dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8ee 	bl	8007fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd4:	e00a      	b.n	8007dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f8ea 	bl	8007fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ddc:	e006      	b.n	8007dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8e6 	bl	8007fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007dea:	e0c4      	b.n	8007f76 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dec:	bf00      	nop
    return;
 8007dee:	e0c2      	b.n	8007f76 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f040 80a1 	bne.w	8007f3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 809b 	beq.w	8007f3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8095 	beq.w	8007f3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d04e      	beq.n	8007ed4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007e40:	8a3b      	ldrh	r3, [r7, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8099 	beq.w	8007f7a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e4c:	8a3a      	ldrh	r2, [r7, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	f080 8093 	bcs.w	8007f7a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8a3a      	ldrh	r2, [r7, #16]
 8007e58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d02b      	beq.n	8007ebc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0201 	bic.w	r2, r2, #1
 8007e82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0210 	bic.w	r2, r2, #16
 8007eb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd f865 	bl	8004f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f878 	bl	8007fc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ed2:	e052      	b.n	8007f7a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d048      	beq.n	8007f7e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007eec:	8a7b      	ldrh	r3, [r7, #18]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d045      	beq.n	8007f7e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695a      	ldr	r2, [r3, #20]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0210 	bic.w	r2, r2, #16
 8007f2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f30:	8a7b      	ldrh	r3, [r7, #18]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f844 	bl	8007fc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f3a:	e020      	b.n	8007f7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d008      	beq.n	8007f58 <HAL_UART_IRQHandler+0x324>
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f8cb 	bl	80080ec <UART_Transmit_IT>
    return;
 8007f56:	e013      	b.n	8007f80 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00e      	beq.n	8007f80 <HAL_UART_IRQHandler+0x34c>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f90c 	bl	800818a <UART_EndTransmit_IT>
    return;
 8007f72:	bf00      	nop
 8007f74:	e004      	b.n	8007f80 <HAL_UART_IRQHandler+0x34c>
    return;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_UART_IRQHandler+0x34c>
      return;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_UART_IRQHandler+0x34c>
      return;
 8007f7e:	bf00      	nop
  }
}
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	080080c5 	.word	0x080080c5

08007f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe8:	e02c      	b.n	8008044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d028      	beq.n	8008044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ff8:	f7fc feae 	bl	8004d58 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	429a      	cmp	r2, r3
 8008006:	d21d      	bcs.n	8008044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e00f      	b.n	8008064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4013      	ands	r3, r2
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	429a      	cmp	r2, r3
 8008052:	bf0c      	ite	eq
 8008054:	2301      	moveq	r3, #1
 8008056:	2300      	movne	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	461a      	mov	r2, r3
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	429a      	cmp	r2, r3
 8008060:	d0c3      	beq.n	8007fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008082:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008098:	2b01      	cmp	r3, #1
 800809a:	d107      	bne.n	80080ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0210 	bic.w	r2, r2, #16
 80080aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff ff66 	bl	8007fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b21      	cmp	r3, #33	; 0x21
 80080fe:	d13e      	bne.n	800817e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008108:	d114      	bne.n	8008134 <UART_Transmit_IT+0x48>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d110      	bne.n	8008134 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008126:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	1c9a      	adds	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	621a      	str	r2, [r3, #32]
 8008132:	e008      	b.n	8008146 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	1c59      	adds	r1, r3, #1
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6211      	str	r1, [r2, #32]
 800813e:	781a      	ldrb	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29b      	uxth	r3, r3
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	4619      	mov	r1, r3
 8008154:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10f      	bne.n	800817a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008168:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008178:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800817e:	2302      	movs	r3, #2
  }
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff feee 	bl	8007f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b22      	cmp	r3, #34	; 0x22
 80081cc:	f040 8099 	bne.w	8008302 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d117      	bne.n	800820a <UART_Receive_IT+0x50>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d113      	bne.n	800820a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	1c9a      	adds	r2, r3, #2
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	629a      	str	r2, [r3, #40]	; 0x28
 8008208:	e026      	b.n	8008258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821c:	d007      	beq.n	800822e <UART_Receive_IT+0x74>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <UART_Receive_IT+0x82>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	b2da      	uxtb	r2, r3
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e008      	b.n	800824e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008248:	b2da      	uxtb	r2, r3
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4619      	mov	r1, r3
 8008266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008268:	2b00      	cmp	r3, #0
 800826a:	d148      	bne.n	80082fe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0220 	bic.w	r2, r2, #32
 800827a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800828a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695a      	ldr	r2, [r3, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0201 	bic.w	r2, r2, #1
 800829a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d123      	bne.n	80082f4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0210 	bic.w	r2, r2, #16
 80082c0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d10a      	bne.n	80082e6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fe68 	bl	8007fc2 <HAL_UARTEx_RxEventCallback>
 80082f2:	e002      	b.n	80082fa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fe52 	bl	8007f9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e002      	b.n	8008304 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008346:	f023 030c 	bic.w	r3, r3, #12
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6812      	ldr	r2, [r2, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	430b      	orrs	r3, r1
 8008352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a2c      	ldr	r2, [pc, #176]	; (8008420 <UART_SetConfig+0x114>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d103      	bne.n	800837c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008374:	f7fe fc02 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	e002      	b.n	8008382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800837c:	f7fe fbea 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8008380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009a      	lsls	r2, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	fbb2 f3f3 	udiv	r3, r2, r3
 8008398:	4a22      	ldr	r2, [pc, #136]	; (8008424 <UART_SetConfig+0x118>)
 800839a:	fba2 2303 	umull	r2, r3, r2, r3
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	0119      	lsls	r1, r3, #4
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009a      	lsls	r2, r3, #2
 80083ac:	441a      	add	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80083b8:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <UART_SetConfig+0x118>)
 80083ba:	fba3 0302 	umull	r0, r3, r3, r2
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	2064      	movs	r0, #100	; 0x64
 80083c2:	fb00 f303 	mul.w	r3, r0, r3
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	3332      	adds	r3, #50	; 0x32
 80083cc:	4a15      	ldr	r2, [pc, #84]	; (8008424 <UART_SetConfig+0x118>)
 80083ce:	fba2 2303 	umull	r2, r3, r2, r3
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083d8:	4419      	add	r1, r3
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009a      	lsls	r2, r3, #2
 80083e4:	441a      	add	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80083f0:	4b0c      	ldr	r3, [pc, #48]	; (8008424 <UART_SetConfig+0x118>)
 80083f2:	fba3 0302 	umull	r0, r3, r3, r2
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	2064      	movs	r0, #100	; 0x64
 80083fa:	fb00 f303 	mul.w	r3, r0, r3
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	3332      	adds	r3, #50	; 0x32
 8008404:	4a07      	ldr	r2, [pc, #28]	; (8008424 <UART_SetConfig+0x118>)
 8008406:	fba2 2303 	umull	r2, r3, r2, r3
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	440a      	add	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008418:	bf00      	nop
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40013800 	.word	0x40013800
 8008424:	51eb851f 	.word	0x51eb851f

08008428 <__errno>:
 8008428:	4b01      	ldr	r3, [pc, #4]	; (8008430 <__errno+0x8>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	200000b8 	.word	0x200000b8

08008434 <__libc_init_array>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	2500      	movs	r5, #0
 8008438:	4e0c      	ldr	r6, [pc, #48]	; (800846c <__libc_init_array+0x38>)
 800843a:	4c0d      	ldr	r4, [pc, #52]	; (8008470 <__libc_init_array+0x3c>)
 800843c:	1ba4      	subs	r4, r4, r6
 800843e:	10a4      	asrs	r4, r4, #2
 8008440:	42a5      	cmp	r5, r4
 8008442:	d109      	bne.n	8008458 <__libc_init_array+0x24>
 8008444:	f000 ffa4 	bl	8009390 <_init>
 8008448:	2500      	movs	r5, #0
 800844a:	4e0a      	ldr	r6, [pc, #40]	; (8008474 <__libc_init_array+0x40>)
 800844c:	4c0a      	ldr	r4, [pc, #40]	; (8008478 <__libc_init_array+0x44>)
 800844e:	1ba4      	subs	r4, r4, r6
 8008450:	10a4      	asrs	r4, r4, #2
 8008452:	42a5      	cmp	r5, r4
 8008454:	d105      	bne.n	8008462 <__libc_init_array+0x2e>
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800845c:	4798      	blx	r3
 800845e:	3501      	adds	r5, #1
 8008460:	e7ee      	b.n	8008440 <__libc_init_array+0xc>
 8008462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008466:	4798      	blx	r3
 8008468:	3501      	adds	r5, #1
 800846a:	e7f2      	b.n	8008452 <__libc_init_array+0x1e>
 800846c:	08009730 	.word	0x08009730
 8008470:	08009730 	.word	0x08009730
 8008474:	08009730 	.word	0x08009730
 8008478:	08009734 	.word	0x08009734

0800847c <memset>:
 800847c:	4603      	mov	r3, r0
 800847e:	4402      	add	r2, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <memset+0xa>
 8008484:	4770      	bx	lr
 8008486:	f803 1b01 	strb.w	r1, [r3], #1
 800848a:	e7f9      	b.n	8008480 <memset+0x4>

0800848c <siprintf>:
 800848c:	b40e      	push	{r1, r2, r3}
 800848e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008492:	b500      	push	{lr}
 8008494:	b09c      	sub	sp, #112	; 0x70
 8008496:	ab1d      	add	r3, sp, #116	; 0x74
 8008498:	9002      	str	r0, [sp, #8]
 800849a:	9006      	str	r0, [sp, #24]
 800849c:	9107      	str	r1, [sp, #28]
 800849e:	9104      	str	r1, [sp, #16]
 80084a0:	4808      	ldr	r0, [pc, #32]	; (80084c4 <siprintf+0x38>)
 80084a2:	4909      	ldr	r1, [pc, #36]	; (80084c8 <siprintf+0x3c>)
 80084a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084a8:	9105      	str	r1, [sp, #20]
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	a902      	add	r1, sp, #8
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	f000 f866 	bl	8008580 <_svfiprintf_r>
 80084b4:	2200      	movs	r2, #0
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	b01c      	add	sp, #112	; 0x70
 80084bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c0:	b003      	add	sp, #12
 80084c2:	4770      	bx	lr
 80084c4:	200000b8 	.word	0x200000b8
 80084c8:	ffff0208 	.word	0xffff0208

080084cc <__ssputs_r>:
 80084cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	688e      	ldr	r6, [r1, #8]
 80084d2:	4682      	mov	sl, r0
 80084d4:	429e      	cmp	r6, r3
 80084d6:	460c      	mov	r4, r1
 80084d8:	4690      	mov	r8, r2
 80084da:	4699      	mov	r9, r3
 80084dc:	d837      	bhi.n	800854e <__ssputs_r+0x82>
 80084de:	898a      	ldrh	r2, [r1, #12]
 80084e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084e4:	d031      	beq.n	800854a <__ssputs_r+0x7e>
 80084e6:	2302      	movs	r3, #2
 80084e8:	6825      	ldr	r5, [r4, #0]
 80084ea:	6909      	ldr	r1, [r1, #16]
 80084ec:	1a6f      	subs	r7, r5, r1
 80084ee:	6965      	ldr	r5, [r4, #20]
 80084f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80084f8:	f109 0301 	add.w	r3, r9, #1
 80084fc:	443b      	add	r3, r7
 80084fe:	429d      	cmp	r5, r3
 8008500:	bf38      	it	cc
 8008502:	461d      	movcc	r5, r3
 8008504:	0553      	lsls	r3, r2, #21
 8008506:	d530      	bpl.n	800856a <__ssputs_r+0x9e>
 8008508:	4629      	mov	r1, r5
 800850a:	f000 fb37 	bl	8008b7c <_malloc_r>
 800850e:	4606      	mov	r6, r0
 8008510:	b950      	cbnz	r0, 8008528 <__ssputs_r+0x5c>
 8008512:	230c      	movs	r3, #12
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	f8ca 3000 	str.w	r3, [sl]
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	463a      	mov	r2, r7
 800852a:	6921      	ldr	r1, [r4, #16]
 800852c:	f000 fab6 	bl	8008a9c <memcpy>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	6126      	str	r6, [r4, #16]
 800853e:	443e      	add	r6, r7
 8008540:	6026      	str	r6, [r4, #0]
 8008542:	464e      	mov	r6, r9
 8008544:	6165      	str	r5, [r4, #20]
 8008546:	1bed      	subs	r5, r5, r7
 8008548:	60a5      	str	r5, [r4, #8]
 800854a:	454e      	cmp	r6, r9
 800854c:	d900      	bls.n	8008550 <__ssputs_r+0x84>
 800854e:	464e      	mov	r6, r9
 8008550:	4632      	mov	r2, r6
 8008552:	4641      	mov	r1, r8
 8008554:	6820      	ldr	r0, [r4, #0]
 8008556:	f000 faac 	bl	8008ab2 <memmove>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	2000      	movs	r0, #0
 800855e:	1b9b      	subs	r3, r3, r6
 8008560:	60a3      	str	r3, [r4, #8]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	441e      	add	r6, r3
 8008566:	6026      	str	r6, [r4, #0]
 8008568:	e7dc      	b.n	8008524 <__ssputs_r+0x58>
 800856a:	462a      	mov	r2, r5
 800856c:	f000 fb60 	bl	8008c30 <_realloc_r>
 8008570:	4606      	mov	r6, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	d1e2      	bne.n	800853c <__ssputs_r+0x70>
 8008576:	6921      	ldr	r1, [r4, #16]
 8008578:	4650      	mov	r0, sl
 800857a:	f000 fab3 	bl	8008ae4 <_free_r>
 800857e:	e7c8      	b.n	8008512 <__ssputs_r+0x46>

08008580 <_svfiprintf_r>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	461d      	mov	r5, r3
 8008586:	898b      	ldrh	r3, [r1, #12]
 8008588:	b09d      	sub	sp, #116	; 0x74
 800858a:	061f      	lsls	r7, r3, #24
 800858c:	4680      	mov	r8, r0
 800858e:	460c      	mov	r4, r1
 8008590:	4616      	mov	r6, r2
 8008592:	d50f      	bpl.n	80085b4 <_svfiprintf_r+0x34>
 8008594:	690b      	ldr	r3, [r1, #16]
 8008596:	b96b      	cbnz	r3, 80085b4 <_svfiprintf_r+0x34>
 8008598:	2140      	movs	r1, #64	; 0x40
 800859a:	f000 faef 	bl	8008b7c <_malloc_r>
 800859e:	6020      	str	r0, [r4, #0]
 80085a0:	6120      	str	r0, [r4, #16]
 80085a2:	b928      	cbnz	r0, 80085b0 <_svfiprintf_r+0x30>
 80085a4:	230c      	movs	r3, #12
 80085a6:	f8c8 3000 	str.w	r3, [r8]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	e0c8      	b.n	8008742 <_svfiprintf_r+0x1c2>
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	6163      	str	r3, [r4, #20]
 80085b4:	2300      	movs	r3, #0
 80085b6:	9309      	str	r3, [sp, #36]	; 0x24
 80085b8:	2320      	movs	r3, #32
 80085ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085be:	2330      	movs	r3, #48	; 0x30
 80085c0:	f04f 0b01 	mov.w	fp, #1
 80085c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085c8:	9503      	str	r5, [sp, #12]
 80085ca:	4637      	mov	r7, r6
 80085cc:	463d      	mov	r5, r7
 80085ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085d2:	b10b      	cbz	r3, 80085d8 <_svfiprintf_r+0x58>
 80085d4:	2b25      	cmp	r3, #37	; 0x25
 80085d6:	d13e      	bne.n	8008656 <_svfiprintf_r+0xd6>
 80085d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80085dc:	d00b      	beq.n	80085f6 <_svfiprintf_r+0x76>
 80085de:	4653      	mov	r3, sl
 80085e0:	4632      	mov	r2, r6
 80085e2:	4621      	mov	r1, r4
 80085e4:	4640      	mov	r0, r8
 80085e6:	f7ff ff71 	bl	80084cc <__ssputs_r>
 80085ea:	3001      	adds	r0, #1
 80085ec:	f000 80a4 	beq.w	8008738 <_svfiprintf_r+0x1b8>
 80085f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f2:	4453      	add	r3, sl
 80085f4:	9309      	str	r3, [sp, #36]	; 0x24
 80085f6:	783b      	ldrb	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 809d 	beq.w	8008738 <_svfiprintf_r+0x1b8>
 80085fe:	2300      	movs	r3, #0
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	9307      	str	r3, [sp, #28]
 800860c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008610:	931a      	str	r3, [sp, #104]	; 0x68
 8008612:	462f      	mov	r7, r5
 8008614:	2205      	movs	r2, #5
 8008616:	f817 1b01 	ldrb.w	r1, [r7], #1
 800861a:	4850      	ldr	r0, [pc, #320]	; (800875c <_svfiprintf_r+0x1dc>)
 800861c:	f000 fa30 	bl	8008a80 <memchr>
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	b9d0      	cbnz	r0, 800865a <_svfiprintf_r+0xda>
 8008624:	06d9      	lsls	r1, r3, #27
 8008626:	bf44      	itt	mi
 8008628:	2220      	movmi	r2, #32
 800862a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800862e:	071a      	lsls	r2, r3, #28
 8008630:	bf44      	itt	mi
 8008632:	222b      	movmi	r2, #43	; 0x2b
 8008634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008638:	782a      	ldrb	r2, [r5, #0]
 800863a:	2a2a      	cmp	r2, #42	; 0x2a
 800863c:	d015      	beq.n	800866a <_svfiprintf_r+0xea>
 800863e:	462f      	mov	r7, r5
 8008640:	2000      	movs	r0, #0
 8008642:	250a      	movs	r5, #10
 8008644:	9a07      	ldr	r2, [sp, #28]
 8008646:	4639      	mov	r1, r7
 8008648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864c:	3b30      	subs	r3, #48	; 0x30
 800864e:	2b09      	cmp	r3, #9
 8008650:	d94d      	bls.n	80086ee <_svfiprintf_r+0x16e>
 8008652:	b1b8      	cbz	r0, 8008684 <_svfiprintf_r+0x104>
 8008654:	e00f      	b.n	8008676 <_svfiprintf_r+0xf6>
 8008656:	462f      	mov	r7, r5
 8008658:	e7b8      	b.n	80085cc <_svfiprintf_r+0x4c>
 800865a:	4a40      	ldr	r2, [pc, #256]	; (800875c <_svfiprintf_r+0x1dc>)
 800865c:	463d      	mov	r5, r7
 800865e:	1a80      	subs	r0, r0, r2
 8008660:	fa0b f000 	lsl.w	r0, fp, r0
 8008664:	4318      	orrs	r0, r3
 8008666:	9004      	str	r0, [sp, #16]
 8008668:	e7d3      	b.n	8008612 <_svfiprintf_r+0x92>
 800866a:	9a03      	ldr	r2, [sp, #12]
 800866c:	1d11      	adds	r1, r2, #4
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	9103      	str	r1, [sp, #12]
 8008672:	2a00      	cmp	r2, #0
 8008674:	db01      	blt.n	800867a <_svfiprintf_r+0xfa>
 8008676:	9207      	str	r2, [sp, #28]
 8008678:	e004      	b.n	8008684 <_svfiprintf_r+0x104>
 800867a:	4252      	negs	r2, r2
 800867c:	f043 0302 	orr.w	r3, r3, #2
 8008680:	9207      	str	r2, [sp, #28]
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	783b      	ldrb	r3, [r7, #0]
 8008686:	2b2e      	cmp	r3, #46	; 0x2e
 8008688:	d10c      	bne.n	80086a4 <_svfiprintf_r+0x124>
 800868a:	787b      	ldrb	r3, [r7, #1]
 800868c:	2b2a      	cmp	r3, #42	; 0x2a
 800868e:	d133      	bne.n	80086f8 <_svfiprintf_r+0x178>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	3702      	adds	r7, #2
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	9203      	str	r2, [sp, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bfb8      	it	lt
 800869e:	f04f 33ff 	movlt.w	r3, #4294967295
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	4d2e      	ldr	r5, [pc, #184]	; (8008760 <_svfiprintf_r+0x1e0>)
 80086a6:	2203      	movs	r2, #3
 80086a8:	7839      	ldrb	r1, [r7, #0]
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f9e8 	bl	8008a80 <memchr>
 80086b0:	b138      	cbz	r0, 80086c2 <_svfiprintf_r+0x142>
 80086b2:	2340      	movs	r3, #64	; 0x40
 80086b4:	1b40      	subs	r0, r0, r5
 80086b6:	fa03 f000 	lsl.w	r0, r3, r0
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	3701      	adds	r7, #1
 80086be:	4303      	orrs	r3, r0
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	7839      	ldrb	r1, [r7, #0]
 80086c4:	2206      	movs	r2, #6
 80086c6:	4827      	ldr	r0, [pc, #156]	; (8008764 <_svfiprintf_r+0x1e4>)
 80086c8:	1c7e      	adds	r6, r7, #1
 80086ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ce:	f000 f9d7 	bl	8008a80 <memchr>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d038      	beq.n	8008748 <_svfiprintf_r+0x1c8>
 80086d6:	4b24      	ldr	r3, [pc, #144]	; (8008768 <_svfiprintf_r+0x1e8>)
 80086d8:	bb13      	cbnz	r3, 8008720 <_svfiprintf_r+0x1a0>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	3307      	adds	r3, #7
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	3308      	adds	r3, #8
 80086e4:	9303      	str	r3, [sp, #12]
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	444b      	add	r3, r9
 80086ea:	9309      	str	r3, [sp, #36]	; 0x24
 80086ec:	e76d      	b.n	80085ca <_svfiprintf_r+0x4a>
 80086ee:	fb05 3202 	mla	r2, r5, r2, r3
 80086f2:	2001      	movs	r0, #1
 80086f4:	460f      	mov	r7, r1
 80086f6:	e7a6      	b.n	8008646 <_svfiprintf_r+0xc6>
 80086f8:	2300      	movs	r3, #0
 80086fa:	250a      	movs	r5, #10
 80086fc:	4619      	mov	r1, r3
 80086fe:	3701      	adds	r7, #1
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	4638      	mov	r0, r7
 8008704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008708:	3a30      	subs	r2, #48	; 0x30
 800870a:	2a09      	cmp	r2, #9
 800870c:	d903      	bls.n	8008716 <_svfiprintf_r+0x196>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0c8      	beq.n	80086a4 <_svfiprintf_r+0x124>
 8008712:	9105      	str	r1, [sp, #20]
 8008714:	e7c6      	b.n	80086a4 <_svfiprintf_r+0x124>
 8008716:	fb05 2101 	mla	r1, r5, r1, r2
 800871a:	2301      	movs	r3, #1
 800871c:	4607      	mov	r7, r0
 800871e:	e7f0      	b.n	8008702 <_svfiprintf_r+0x182>
 8008720:	ab03      	add	r3, sp, #12
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	4622      	mov	r2, r4
 8008726:	4b11      	ldr	r3, [pc, #68]	; (800876c <_svfiprintf_r+0x1ec>)
 8008728:	a904      	add	r1, sp, #16
 800872a:	4640      	mov	r0, r8
 800872c:	f3af 8000 	nop.w
 8008730:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008734:	4681      	mov	r9, r0
 8008736:	d1d6      	bne.n	80086e6 <_svfiprintf_r+0x166>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	065b      	lsls	r3, r3, #25
 800873c:	f53f af35 	bmi.w	80085aa <_svfiprintf_r+0x2a>
 8008740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008742:	b01d      	add	sp, #116	; 0x74
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	ab03      	add	r3, sp, #12
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	4622      	mov	r2, r4
 800874e:	4b07      	ldr	r3, [pc, #28]	; (800876c <_svfiprintf_r+0x1ec>)
 8008750:	a904      	add	r1, sp, #16
 8008752:	4640      	mov	r0, r8
 8008754:	f000 f882 	bl	800885c <_printf_i>
 8008758:	e7ea      	b.n	8008730 <_svfiprintf_r+0x1b0>
 800875a:	bf00      	nop
 800875c:	080096b4 	.word	0x080096b4
 8008760:	080096ba 	.word	0x080096ba
 8008764:	080096be 	.word	0x080096be
 8008768:	00000000 	.word	0x00000000
 800876c:	080084cd 	.word	0x080084cd

08008770 <_printf_common>:
 8008770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	4691      	mov	r9, r2
 8008776:	461f      	mov	r7, r3
 8008778:	688a      	ldr	r2, [r1, #8]
 800877a:	690b      	ldr	r3, [r1, #16]
 800877c:	4606      	mov	r6, r0
 800877e:	4293      	cmp	r3, r2
 8008780:	bfb8      	it	lt
 8008782:	4613      	movlt	r3, r2
 8008784:	f8c9 3000 	str.w	r3, [r9]
 8008788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800878c:	460c      	mov	r4, r1
 800878e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008792:	b112      	cbz	r2, 800879a <_printf_common+0x2a>
 8008794:	3301      	adds	r3, #1
 8008796:	f8c9 3000 	str.w	r3, [r9]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	0699      	lsls	r1, r3, #26
 800879e:	bf42      	ittt	mi
 80087a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087a4:	3302      	addmi	r3, #2
 80087a6:	f8c9 3000 	strmi.w	r3, [r9]
 80087aa:	6825      	ldr	r5, [r4, #0]
 80087ac:	f015 0506 	ands.w	r5, r5, #6
 80087b0:	d107      	bne.n	80087c2 <_printf_common+0x52>
 80087b2:	f104 0a19 	add.w	sl, r4, #25
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	f8d9 2000 	ldr.w	r2, [r9]
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	42ab      	cmp	r3, r5
 80087c0:	dc29      	bgt.n	8008816 <_printf_common+0xa6>
 80087c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	3300      	adds	r3, #0
 80087ca:	bf18      	it	ne
 80087cc:	2301      	movne	r3, #1
 80087ce:	0692      	lsls	r2, r2, #26
 80087d0:	d42e      	bmi.n	8008830 <_printf_common+0xc0>
 80087d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d6:	4639      	mov	r1, r7
 80087d8:	4630      	mov	r0, r6
 80087da:	47c0      	blx	r8
 80087dc:	3001      	adds	r0, #1
 80087de:	d021      	beq.n	8008824 <_printf_common+0xb4>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	68e5      	ldr	r5, [r4, #12]
 80087e4:	f003 0306 	and.w	r3, r3, #6
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	bf18      	it	ne
 80087ec:	2500      	movne	r5, #0
 80087ee:	f8d9 2000 	ldr.w	r2, [r9]
 80087f2:	f04f 0900 	mov.w	r9, #0
 80087f6:	bf08      	it	eq
 80087f8:	1aad      	subeq	r5, r5, r2
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	bf08      	it	eq
 8008800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008804:	4293      	cmp	r3, r2
 8008806:	bfc4      	itt	gt
 8008808:	1a9b      	subgt	r3, r3, r2
 800880a:	18ed      	addgt	r5, r5, r3
 800880c:	341a      	adds	r4, #26
 800880e:	454d      	cmp	r5, r9
 8008810:	d11a      	bne.n	8008848 <_printf_common+0xd8>
 8008812:	2000      	movs	r0, #0
 8008814:	e008      	b.n	8008828 <_printf_common+0xb8>
 8008816:	2301      	movs	r3, #1
 8008818:	4652      	mov	r2, sl
 800881a:	4639      	mov	r1, r7
 800881c:	4630      	mov	r0, r6
 800881e:	47c0      	blx	r8
 8008820:	3001      	adds	r0, #1
 8008822:	d103      	bne.n	800882c <_printf_common+0xbc>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882c:	3501      	adds	r5, #1
 800882e:	e7c2      	b.n	80087b6 <_printf_common+0x46>
 8008830:	2030      	movs	r0, #48	; 0x30
 8008832:	18e1      	adds	r1, r4, r3
 8008834:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800883e:	4422      	add	r2, r4
 8008840:	3302      	adds	r3, #2
 8008842:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008846:	e7c4      	b.n	80087d2 <_printf_common+0x62>
 8008848:	2301      	movs	r3, #1
 800884a:	4622      	mov	r2, r4
 800884c:	4639      	mov	r1, r7
 800884e:	4630      	mov	r0, r6
 8008850:	47c0      	blx	r8
 8008852:	3001      	adds	r0, #1
 8008854:	d0e6      	beq.n	8008824 <_printf_common+0xb4>
 8008856:	f109 0901 	add.w	r9, r9, #1
 800885a:	e7d8      	b.n	800880e <_printf_common+0x9e>

0800885c <_printf_i>:
 800885c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008860:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008864:	460c      	mov	r4, r1
 8008866:	7e09      	ldrb	r1, [r1, #24]
 8008868:	b085      	sub	sp, #20
 800886a:	296e      	cmp	r1, #110	; 0x6e
 800886c:	4617      	mov	r7, r2
 800886e:	4606      	mov	r6, r0
 8008870:	4698      	mov	r8, r3
 8008872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008874:	f000 80b3 	beq.w	80089de <_printf_i+0x182>
 8008878:	d822      	bhi.n	80088c0 <_printf_i+0x64>
 800887a:	2963      	cmp	r1, #99	; 0x63
 800887c:	d036      	beq.n	80088ec <_printf_i+0x90>
 800887e:	d80a      	bhi.n	8008896 <_printf_i+0x3a>
 8008880:	2900      	cmp	r1, #0
 8008882:	f000 80b9 	beq.w	80089f8 <_printf_i+0x19c>
 8008886:	2958      	cmp	r1, #88	; 0x58
 8008888:	f000 8083 	beq.w	8008992 <_printf_i+0x136>
 800888c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008890:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008894:	e032      	b.n	80088fc <_printf_i+0xa0>
 8008896:	2964      	cmp	r1, #100	; 0x64
 8008898:	d001      	beq.n	800889e <_printf_i+0x42>
 800889a:	2969      	cmp	r1, #105	; 0x69
 800889c:	d1f6      	bne.n	800888c <_printf_i+0x30>
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	6813      	ldr	r3, [r2, #0]
 80088a2:	0605      	lsls	r5, r0, #24
 80088a4:	f103 0104 	add.w	r1, r3, #4
 80088a8:	d52a      	bpl.n	8008900 <_printf_i+0xa4>
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	da03      	bge.n	80088ba <_printf_i+0x5e>
 80088b2:	222d      	movs	r2, #45	; 0x2d
 80088b4:	425b      	negs	r3, r3
 80088b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088ba:	486f      	ldr	r0, [pc, #444]	; (8008a78 <_printf_i+0x21c>)
 80088bc:	220a      	movs	r2, #10
 80088be:	e039      	b.n	8008934 <_printf_i+0xd8>
 80088c0:	2973      	cmp	r1, #115	; 0x73
 80088c2:	f000 809d 	beq.w	8008a00 <_printf_i+0x1a4>
 80088c6:	d808      	bhi.n	80088da <_printf_i+0x7e>
 80088c8:	296f      	cmp	r1, #111	; 0x6f
 80088ca:	d020      	beq.n	800890e <_printf_i+0xb2>
 80088cc:	2970      	cmp	r1, #112	; 0x70
 80088ce:	d1dd      	bne.n	800888c <_printf_i+0x30>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	f043 0320 	orr.w	r3, r3, #32
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	e003      	b.n	80088e2 <_printf_i+0x86>
 80088da:	2975      	cmp	r1, #117	; 0x75
 80088dc:	d017      	beq.n	800890e <_printf_i+0xb2>
 80088de:	2978      	cmp	r1, #120	; 0x78
 80088e0:	d1d4      	bne.n	800888c <_printf_i+0x30>
 80088e2:	2378      	movs	r3, #120	; 0x78
 80088e4:	4865      	ldr	r0, [pc, #404]	; (8008a7c <_printf_i+0x220>)
 80088e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ea:	e055      	b.n	8008998 <_printf_i+0x13c>
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f2:	1d19      	adds	r1, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6011      	str	r1, [r2, #0]
 80088f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088fc:	2301      	movs	r3, #1
 80088fe:	e08c      	b.n	8008a1a <_printf_i+0x1be>
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008906:	6011      	str	r1, [r2, #0]
 8008908:	bf18      	it	ne
 800890a:	b21b      	sxthne	r3, r3
 800890c:	e7cf      	b.n	80088ae <_printf_i+0x52>
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	6825      	ldr	r5, [r4, #0]
 8008912:	1d18      	adds	r0, r3, #4
 8008914:	6010      	str	r0, [r2, #0]
 8008916:	0628      	lsls	r0, r5, #24
 8008918:	d501      	bpl.n	800891e <_printf_i+0xc2>
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	e002      	b.n	8008924 <_printf_i+0xc8>
 800891e:	0668      	lsls	r0, r5, #25
 8008920:	d5fb      	bpl.n	800891a <_printf_i+0xbe>
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	296f      	cmp	r1, #111	; 0x6f
 8008926:	bf14      	ite	ne
 8008928:	220a      	movne	r2, #10
 800892a:	2208      	moveq	r2, #8
 800892c:	4852      	ldr	r0, [pc, #328]	; (8008a78 <_printf_i+0x21c>)
 800892e:	2100      	movs	r1, #0
 8008930:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008934:	6865      	ldr	r5, [r4, #4]
 8008936:	2d00      	cmp	r5, #0
 8008938:	60a5      	str	r5, [r4, #8]
 800893a:	f2c0 8095 	blt.w	8008a68 <_printf_i+0x20c>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	f021 0104 	bic.w	r1, r1, #4
 8008944:	6021      	str	r1, [r4, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d13d      	bne.n	80089c6 <_printf_i+0x16a>
 800894a:	2d00      	cmp	r5, #0
 800894c:	f040 808e 	bne.w	8008a6c <_printf_i+0x210>
 8008950:	4665      	mov	r5, ip
 8008952:	2a08      	cmp	r2, #8
 8008954:	d10b      	bne.n	800896e <_printf_i+0x112>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	07db      	lsls	r3, r3, #31
 800895a:	d508      	bpl.n	800896e <_printf_i+0x112>
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	bfde      	ittt	le
 8008964:	2330      	movle	r3, #48	; 0x30
 8008966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800896a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800896e:	ebac 0305 	sub.w	r3, ip, r5
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	f8cd 8000 	str.w	r8, [sp]
 8008978:	463b      	mov	r3, r7
 800897a:	aa03      	add	r2, sp, #12
 800897c:	4621      	mov	r1, r4
 800897e:	4630      	mov	r0, r6
 8008980:	f7ff fef6 	bl	8008770 <_printf_common>
 8008984:	3001      	adds	r0, #1
 8008986:	d14d      	bne.n	8008a24 <_printf_i+0x1c8>
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	b005      	add	sp, #20
 800898e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008992:	4839      	ldr	r0, [pc, #228]	; (8008a78 <_printf_i+0x21c>)
 8008994:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008998:	6813      	ldr	r3, [r2, #0]
 800899a:	6821      	ldr	r1, [r4, #0]
 800899c:	1d1d      	adds	r5, r3, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6015      	str	r5, [r2, #0]
 80089a2:	060a      	lsls	r2, r1, #24
 80089a4:	d50b      	bpl.n	80089be <_printf_i+0x162>
 80089a6:	07ca      	lsls	r2, r1, #31
 80089a8:	bf44      	itt	mi
 80089aa:	f041 0120 	orrmi.w	r1, r1, #32
 80089ae:	6021      	strmi	r1, [r4, #0]
 80089b0:	b91b      	cbnz	r3, 80089ba <_printf_i+0x15e>
 80089b2:	6822      	ldr	r2, [r4, #0]
 80089b4:	f022 0220 	bic.w	r2, r2, #32
 80089b8:	6022      	str	r2, [r4, #0]
 80089ba:	2210      	movs	r2, #16
 80089bc:	e7b7      	b.n	800892e <_printf_i+0xd2>
 80089be:	064d      	lsls	r5, r1, #25
 80089c0:	bf48      	it	mi
 80089c2:	b29b      	uxthmi	r3, r3
 80089c4:	e7ef      	b.n	80089a6 <_printf_i+0x14a>
 80089c6:	4665      	mov	r5, ip
 80089c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089cc:	fb02 3311 	mls	r3, r2, r1, r3
 80089d0:	5cc3      	ldrb	r3, [r0, r3]
 80089d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089d6:	460b      	mov	r3, r1
 80089d8:	2900      	cmp	r1, #0
 80089da:	d1f5      	bne.n	80089c8 <_printf_i+0x16c>
 80089dc:	e7b9      	b.n	8008952 <_printf_i+0xf6>
 80089de:	6813      	ldr	r3, [r2, #0]
 80089e0:	6825      	ldr	r5, [r4, #0]
 80089e2:	1d18      	adds	r0, r3, #4
 80089e4:	6961      	ldr	r1, [r4, #20]
 80089e6:	6010      	str	r0, [r2, #0]
 80089e8:	0628      	lsls	r0, r5, #24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	d501      	bpl.n	80089f2 <_printf_i+0x196>
 80089ee:	6019      	str	r1, [r3, #0]
 80089f0:	e002      	b.n	80089f8 <_printf_i+0x19c>
 80089f2:	066a      	lsls	r2, r5, #25
 80089f4:	d5fb      	bpl.n	80089ee <_printf_i+0x192>
 80089f6:	8019      	strh	r1, [r3, #0]
 80089f8:	2300      	movs	r3, #0
 80089fa:	4665      	mov	r5, ip
 80089fc:	6123      	str	r3, [r4, #16]
 80089fe:	e7b9      	b.n	8008974 <_printf_i+0x118>
 8008a00:	6813      	ldr	r3, [r2, #0]
 8008a02:	1d19      	adds	r1, r3, #4
 8008a04:	6011      	str	r1, [r2, #0]
 8008a06:	681d      	ldr	r5, [r3, #0]
 8008a08:	6862      	ldr	r2, [r4, #4]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f837 	bl	8008a80 <memchr>
 8008a12:	b108      	cbz	r0, 8008a18 <_printf_i+0x1bc>
 8008a14:	1b40      	subs	r0, r0, r5
 8008a16:	6060      	str	r0, [r4, #4]
 8008a18:	6863      	ldr	r3, [r4, #4]
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a22:	e7a7      	b.n	8008974 <_printf_i+0x118>
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	462a      	mov	r2, r5
 8008a28:	4639      	mov	r1, r7
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	47c0      	blx	r8
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d0aa      	beq.n	8008988 <_printf_i+0x12c>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	079b      	lsls	r3, r3, #30
 8008a36:	d413      	bmi.n	8008a60 <_printf_i+0x204>
 8008a38:	68e0      	ldr	r0, [r4, #12]
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	4298      	cmp	r0, r3
 8008a3e:	bfb8      	it	lt
 8008a40:	4618      	movlt	r0, r3
 8008a42:	e7a3      	b.n	800898c <_printf_i+0x130>
 8008a44:	2301      	movs	r3, #1
 8008a46:	464a      	mov	r2, r9
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	47c0      	blx	r8
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d09a      	beq.n	8008988 <_printf_i+0x12c>
 8008a52:	3501      	adds	r5, #1
 8008a54:	68e3      	ldr	r3, [r4, #12]
 8008a56:	9a03      	ldr	r2, [sp, #12]
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	42ab      	cmp	r3, r5
 8008a5c:	dcf2      	bgt.n	8008a44 <_printf_i+0x1e8>
 8008a5e:	e7eb      	b.n	8008a38 <_printf_i+0x1dc>
 8008a60:	2500      	movs	r5, #0
 8008a62:	f104 0919 	add.w	r9, r4, #25
 8008a66:	e7f5      	b.n	8008a54 <_printf_i+0x1f8>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1ac      	bne.n	80089c6 <_printf_i+0x16a>
 8008a6c:	7803      	ldrb	r3, [r0, #0]
 8008a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a76:	e76c      	b.n	8008952 <_printf_i+0xf6>
 8008a78:	080096c5 	.word	0x080096c5
 8008a7c:	080096d6 	.word	0x080096d6

08008a80 <memchr>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	b2c9      	uxtb	r1, r1
 8008a84:	4402      	add	r2, r0
 8008a86:	4290      	cmp	r0, r2
 8008a88:	4603      	mov	r3, r0
 8008a8a:	d101      	bne.n	8008a90 <memchr+0x10>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e003      	b.n	8008a98 <memchr+0x18>
 8008a90:	781c      	ldrb	r4, [r3, #0]
 8008a92:	3001      	adds	r0, #1
 8008a94:	428c      	cmp	r4, r1
 8008a96:	d1f6      	bne.n	8008a86 <memchr+0x6>
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd10      	pop	{r4, pc}

08008a9c <memcpy>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	1e43      	subs	r3, r0, #1
 8008aa0:	440a      	add	r2, r1
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	d100      	bne.n	8008aa8 <memcpy+0xc>
 8008aa6:	bd10      	pop	{r4, pc}
 8008aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab0:	e7f7      	b.n	8008aa2 <memcpy+0x6>

08008ab2 <memmove>:
 8008ab2:	4288      	cmp	r0, r1
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	eb01 0302 	add.w	r3, r1, r2
 8008aba:	d807      	bhi.n	8008acc <memmove+0x1a>
 8008abc:	1e42      	subs	r2, r0, #1
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	d00a      	beq.n	8008ad8 <memmove+0x26>
 8008ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008aca:	e7f8      	b.n	8008abe <memmove+0xc>
 8008acc:	4283      	cmp	r3, r0
 8008ace:	d9f5      	bls.n	8008abc <memmove+0xa>
 8008ad0:	1881      	adds	r1, r0, r2
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	42d3      	cmn	r3, r2
 8008ad6:	d100      	bne.n	8008ada <memmove+0x28>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ade:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ae2:	e7f7      	b.n	8008ad4 <memmove+0x22>

08008ae4 <_free_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	d043      	beq.n	8008b74 <_free_r+0x90>
 8008aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af0:	1f0c      	subs	r4, r1, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bfb8      	it	lt
 8008af6:	18e4      	addlt	r4, r4, r3
 8008af8:	f000 f8d0 	bl	8008c9c <__malloc_lock>
 8008afc:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <_free_r+0x94>)
 8008afe:	6813      	ldr	r3, [r2, #0]
 8008b00:	4610      	mov	r0, r2
 8008b02:	b933      	cbnz	r3, 8008b12 <_free_r+0x2e>
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	6014      	str	r4, [r2, #0]
 8008b08:	4628      	mov	r0, r5
 8008b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b0e:	f000 b8c6 	b.w	8008c9e <__malloc_unlock>
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	d90b      	bls.n	8008b2e <_free_r+0x4a>
 8008b16:	6821      	ldr	r1, [r4, #0]
 8008b18:	1862      	adds	r2, r4, r1
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	bf01      	itttt	eq
 8008b1e:	681a      	ldreq	r2, [r3, #0]
 8008b20:	685b      	ldreq	r3, [r3, #4]
 8008b22:	1852      	addeq	r2, r2, r1
 8008b24:	6022      	streq	r2, [r4, #0]
 8008b26:	6063      	str	r3, [r4, #4]
 8008b28:	6004      	str	r4, [r0, #0]
 8008b2a:	e7ed      	b.n	8008b08 <_free_r+0x24>
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	b10a      	cbz	r2, 8008b36 <_free_r+0x52>
 8008b32:	42a2      	cmp	r2, r4
 8008b34:	d9fa      	bls.n	8008b2c <_free_r+0x48>
 8008b36:	6819      	ldr	r1, [r3, #0]
 8008b38:	1858      	adds	r0, r3, r1
 8008b3a:	42a0      	cmp	r0, r4
 8008b3c:	d10b      	bne.n	8008b56 <_free_r+0x72>
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	4401      	add	r1, r0
 8008b42:	1858      	adds	r0, r3, r1
 8008b44:	4282      	cmp	r2, r0
 8008b46:	6019      	str	r1, [r3, #0]
 8008b48:	d1de      	bne.n	8008b08 <_free_r+0x24>
 8008b4a:	6810      	ldr	r0, [r2, #0]
 8008b4c:	6852      	ldr	r2, [r2, #4]
 8008b4e:	4401      	add	r1, r0
 8008b50:	6019      	str	r1, [r3, #0]
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	e7d8      	b.n	8008b08 <_free_r+0x24>
 8008b56:	d902      	bls.n	8008b5e <_free_r+0x7a>
 8008b58:	230c      	movs	r3, #12
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	e7d4      	b.n	8008b08 <_free_r+0x24>
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	1821      	adds	r1, r4, r0
 8008b62:	428a      	cmp	r2, r1
 8008b64:	bf01      	itttt	eq
 8008b66:	6811      	ldreq	r1, [r2, #0]
 8008b68:	6852      	ldreq	r2, [r2, #4]
 8008b6a:	1809      	addeq	r1, r1, r0
 8008b6c:	6021      	streq	r1, [r4, #0]
 8008b6e:	6062      	str	r2, [r4, #4]
 8008b70:	605c      	str	r4, [r3, #4]
 8008b72:	e7c9      	b.n	8008b08 <_free_r+0x24>
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop
 8008b78:	200003b0 	.word	0x200003b0

08008b7c <_malloc_r>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	1ccd      	adds	r5, r1, #3
 8008b80:	f025 0503 	bic.w	r5, r5, #3
 8008b84:	3508      	adds	r5, #8
 8008b86:	2d0c      	cmp	r5, #12
 8008b88:	bf38      	it	cc
 8008b8a:	250c      	movcc	r5, #12
 8008b8c:	2d00      	cmp	r5, #0
 8008b8e:	4606      	mov	r6, r0
 8008b90:	db01      	blt.n	8008b96 <_malloc_r+0x1a>
 8008b92:	42a9      	cmp	r1, r5
 8008b94:	d903      	bls.n	8008b9e <_malloc_r+0x22>
 8008b96:	230c      	movs	r3, #12
 8008b98:	6033      	str	r3, [r6, #0]
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	f000 f87d 	bl	8008c9c <__malloc_lock>
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <_malloc_r+0xac>)
 8008ba4:	6814      	ldr	r4, [r2, #0]
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	b991      	cbnz	r1, 8008bd0 <_malloc_r+0x54>
 8008baa:	4c20      	ldr	r4, [pc, #128]	; (8008c2c <_malloc_r+0xb0>)
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	b91b      	cbnz	r3, 8008bb8 <_malloc_r+0x3c>
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f000 f863 	bl	8008c7c <_sbrk_r>
 8008bb6:	6020      	str	r0, [r4, #0]
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f000 f85e 	bl	8008c7c <_sbrk_r>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d124      	bne.n	8008c0e <_malloc_r+0x92>
 8008bc4:	230c      	movs	r3, #12
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	6033      	str	r3, [r6, #0]
 8008bca:	f000 f868 	bl	8008c9e <__malloc_unlock>
 8008bce:	e7e4      	b.n	8008b9a <_malloc_r+0x1e>
 8008bd0:	680b      	ldr	r3, [r1, #0]
 8008bd2:	1b5b      	subs	r3, r3, r5
 8008bd4:	d418      	bmi.n	8008c08 <_malloc_r+0x8c>
 8008bd6:	2b0b      	cmp	r3, #11
 8008bd8:	d90f      	bls.n	8008bfa <_malloc_r+0x7e>
 8008bda:	600b      	str	r3, [r1, #0]
 8008bdc:	18cc      	adds	r4, r1, r3
 8008bde:	50cd      	str	r5, [r1, r3]
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 f85c 	bl	8008c9e <__malloc_unlock>
 8008be6:	f104 000b 	add.w	r0, r4, #11
 8008bea:	1d23      	adds	r3, r4, #4
 8008bec:	f020 0007 	bic.w	r0, r0, #7
 8008bf0:	1ac3      	subs	r3, r0, r3
 8008bf2:	d0d3      	beq.n	8008b9c <_malloc_r+0x20>
 8008bf4:	425a      	negs	r2, r3
 8008bf6:	50e2      	str	r2, [r4, r3]
 8008bf8:	e7d0      	b.n	8008b9c <_malloc_r+0x20>
 8008bfa:	684b      	ldr	r3, [r1, #4]
 8008bfc:	428c      	cmp	r4, r1
 8008bfe:	bf16      	itet	ne
 8008c00:	6063      	strne	r3, [r4, #4]
 8008c02:	6013      	streq	r3, [r2, #0]
 8008c04:	460c      	movne	r4, r1
 8008c06:	e7eb      	b.n	8008be0 <_malloc_r+0x64>
 8008c08:	460c      	mov	r4, r1
 8008c0a:	6849      	ldr	r1, [r1, #4]
 8008c0c:	e7cc      	b.n	8008ba8 <_malloc_r+0x2c>
 8008c0e:	1cc4      	adds	r4, r0, #3
 8008c10:	f024 0403 	bic.w	r4, r4, #3
 8008c14:	42a0      	cmp	r0, r4
 8008c16:	d005      	beq.n	8008c24 <_malloc_r+0xa8>
 8008c18:	1a21      	subs	r1, r4, r0
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f000 f82e 	bl	8008c7c <_sbrk_r>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d0cf      	beq.n	8008bc4 <_malloc_r+0x48>
 8008c24:	6025      	str	r5, [r4, #0]
 8008c26:	e7db      	b.n	8008be0 <_malloc_r+0x64>
 8008c28:	200003b0 	.word	0x200003b0
 8008c2c:	200003b4 	.word	0x200003b4

08008c30 <_realloc_r>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	4607      	mov	r7, r0
 8008c34:	4614      	mov	r4, r2
 8008c36:	460e      	mov	r6, r1
 8008c38:	b921      	cbnz	r1, 8008c44 <_realloc_r+0x14>
 8008c3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c3e:	4611      	mov	r1, r2
 8008c40:	f7ff bf9c 	b.w	8008b7c <_malloc_r>
 8008c44:	b922      	cbnz	r2, 8008c50 <_realloc_r+0x20>
 8008c46:	f7ff ff4d 	bl	8008ae4 <_free_r>
 8008c4a:	4625      	mov	r5, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c50:	f000 f826 	bl	8008ca0 <_malloc_usable_size_r>
 8008c54:	42a0      	cmp	r0, r4
 8008c56:	d20f      	bcs.n	8008c78 <_realloc_r+0x48>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f7ff ff8e 	bl	8008b7c <_malloc_r>
 8008c60:	4605      	mov	r5, r0
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0f2      	beq.n	8008c4c <_realloc_r+0x1c>
 8008c66:	4631      	mov	r1, r6
 8008c68:	4622      	mov	r2, r4
 8008c6a:	f7ff ff17 	bl	8008a9c <memcpy>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4638      	mov	r0, r7
 8008c72:	f7ff ff37 	bl	8008ae4 <_free_r>
 8008c76:	e7e9      	b.n	8008c4c <_realloc_r+0x1c>
 8008c78:	4635      	mov	r5, r6
 8008c7a:	e7e7      	b.n	8008c4c <_realloc_r+0x1c>

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4c05      	ldr	r4, [pc, #20]	; (8008c98 <_sbrk_r+0x1c>)
 8008c82:	4605      	mov	r5, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	f7fb ffac 	bl	8004be4 <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	602b      	str	r3, [r5, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	200005f0 	.word	0x200005f0

08008c9c <__malloc_lock>:
 8008c9c:	4770      	bx	lr

08008c9e <__malloc_unlock>:
 8008c9e:	4770      	bx	lr

08008ca0 <_malloc_usable_size_r>:
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f18      	subs	r0, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbc      	itt	lt
 8008caa:	580b      	ldrlt	r3, [r1, r0]
 8008cac:	18c0      	addlt	r0, r0, r3
 8008cae:	4770      	bx	lr

08008cb0 <atan>:
 8008cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4bb6      	ldr	r3, [pc, #728]	; (8008f90 <atan+0x2e0>)
 8008cb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008cba:	429e      	cmp	r6, r3
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	468b      	mov	fp, r1
 8008cc2:	dd17      	ble.n	8008cf4 <atan+0x44>
 8008cc4:	4bb3      	ldr	r3, [pc, #716]	; (8008f94 <atan+0x2e4>)
 8008cc6:	429e      	cmp	r6, r3
 8008cc8:	dc01      	bgt.n	8008cce <atan+0x1e>
 8008cca:	d109      	bne.n	8008ce0 <atan+0x30>
 8008ccc:	b140      	cbz	r0, 8008ce0 <atan+0x30>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fa49 	bl	800016c <__adddf3>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	460d      	mov	r5, r1
 8008cde:	e005      	b.n	8008cec <atan+0x3c>
 8008ce0:	f1bb 0f00 	cmp.w	fp, #0
 8008ce4:	4cac      	ldr	r4, [pc, #688]	; (8008f98 <atan+0x2e8>)
 8008ce6:	f340 8121 	ble.w	8008f2c <atan+0x27c>
 8008cea:	4dac      	ldr	r5, [pc, #688]	; (8008f9c <atan+0x2ec>)
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	4baa      	ldr	r3, [pc, #680]	; (8008fa0 <atan+0x2f0>)
 8008cf6:	429e      	cmp	r6, r3
 8008cf8:	dc11      	bgt.n	8008d1e <atan+0x6e>
 8008cfa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008cfe:	429e      	cmp	r6, r3
 8008d00:	dc0a      	bgt.n	8008d18 <atan+0x68>
 8008d02:	a38b      	add	r3, pc, #556	; (adr r3, 8008f30 <atan+0x280>)
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f7f7 fa30 	bl	800016c <__adddf3>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4ba5      	ldr	r3, [pc, #660]	; (8008fa4 <atan+0x2f4>)
 8008d10:	f7f7 fe72 	bl	80009f8 <__aeabi_dcmpgt>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1e9      	bne.n	8008cec <atan+0x3c>
 8008d18:	f04f 3aff 	mov.w	sl, #4294967295
 8008d1c:	e027      	b.n	8008d6e <atan+0xbe>
 8008d1e:	f000 f951 	bl	8008fc4 <fabs>
 8008d22:	4ba1      	ldr	r3, [pc, #644]	; (8008fa8 <atan+0x2f8>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	429e      	cmp	r6, r3
 8008d28:	460d      	mov	r5, r1
 8008d2a:	f300 80b8 	bgt.w	8008e9e <atan+0x1ee>
 8008d2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008d32:	429e      	cmp	r6, r3
 8008d34:	f300 809c 	bgt.w	8008e70 <atan+0x1c0>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	f7f7 fa16 	bl	800016c <__adddf3>
 8008d40:	2200      	movs	r2, #0
 8008d42:	4b98      	ldr	r3, [pc, #608]	; (8008fa4 <atan+0x2f4>)
 8008d44:	f7f7 fa10 	bl	8000168 <__aeabi_dsub>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d52:	4620      	mov	r0, r4
 8008d54:	4629      	mov	r1, r5
 8008d56:	f7f7 fa09 	bl	800016c <__adddf3>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	f7f7 fce3 	bl	800072c <__aeabi_ddiv>
 8008d66:	f04f 0a00 	mov.w	sl, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	4622      	mov	r2, r4
 8008d70:	462b      	mov	r3, r5
 8008d72:	4620      	mov	r0, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	f7f7 fbaf 	bl	80004d8 <__aeabi_dmul>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4680      	mov	r8, r0
 8008d80:	4689      	mov	r9, r1
 8008d82:	f7f7 fba9 	bl	80004d8 <__aeabi_dmul>
 8008d86:	a36c      	add	r3, pc, #432	; (adr r3, 8008f38 <atan+0x288>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	460f      	mov	r7, r1
 8008d90:	f7f7 fba2 	bl	80004d8 <__aeabi_dmul>
 8008d94:	a36a      	add	r3, pc, #424	; (adr r3, 8008f40 <atan+0x290>)
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	f7f7 f9e7 	bl	800016c <__adddf3>
 8008d9e:	4632      	mov	r2, r6
 8008da0:	463b      	mov	r3, r7
 8008da2:	f7f7 fb99 	bl	80004d8 <__aeabi_dmul>
 8008da6:	a368      	add	r3, pc, #416	; (adr r3, 8008f48 <atan+0x298>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f7f7 f9de 	bl	800016c <__adddf3>
 8008db0:	4632      	mov	r2, r6
 8008db2:	463b      	mov	r3, r7
 8008db4:	f7f7 fb90 	bl	80004d8 <__aeabi_dmul>
 8008db8:	a365      	add	r3, pc, #404	; (adr r3, 8008f50 <atan+0x2a0>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 f9d5 	bl	800016c <__adddf3>
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	f7f7 fb87 	bl	80004d8 <__aeabi_dmul>
 8008dca:	a363      	add	r3, pc, #396	; (adr r3, 8008f58 <atan+0x2a8>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 f9cc 	bl	800016c <__adddf3>
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	f7f7 fb7e 	bl	80004d8 <__aeabi_dmul>
 8008ddc:	a360      	add	r3, pc, #384	; (adr r3, 8008f60 <atan+0x2b0>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 f9c3 	bl	800016c <__adddf3>
 8008de6:	4642      	mov	r2, r8
 8008de8:	464b      	mov	r3, r9
 8008dea:	f7f7 fb75 	bl	80004d8 <__aeabi_dmul>
 8008dee:	a35e      	add	r3, pc, #376	; (adr r3, 8008f68 <atan+0x2b8>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fb6c 	bl	80004d8 <__aeabi_dmul>
 8008e00:	a35b      	add	r3, pc, #364	; (adr r3, 8008f70 <atan+0x2c0>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 f9af 	bl	8000168 <__aeabi_dsub>
 8008e0a:	4632      	mov	r2, r6
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	f7f7 fb63 	bl	80004d8 <__aeabi_dmul>
 8008e12:	a359      	add	r3, pc, #356	; (adr r3, 8008f78 <atan+0x2c8>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 f9a6 	bl	8000168 <__aeabi_dsub>
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	463b      	mov	r3, r7
 8008e20:	f7f7 fb5a 	bl	80004d8 <__aeabi_dmul>
 8008e24:	a356      	add	r3, pc, #344	; (adr r3, 8008f80 <atan+0x2d0>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 f99d 	bl	8000168 <__aeabi_dsub>
 8008e2e:	4632      	mov	r2, r6
 8008e30:	463b      	mov	r3, r7
 8008e32:	f7f7 fb51 	bl	80004d8 <__aeabi_dmul>
 8008e36:	a354      	add	r3, pc, #336	; (adr r3, 8008f88 <atan+0x2d8>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	f7f7 f994 	bl	8000168 <__aeabi_dsub>
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	f7f7 fb48 	bl	80004d8 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4649      	mov	r1, r9
 8008e50:	f7f7 f98c 	bl	800016c <__adddf3>
 8008e54:	4622      	mov	r2, r4
 8008e56:	462b      	mov	r3, r5
 8008e58:	f7f7 fb3e 	bl	80004d8 <__aeabi_dmul>
 8008e5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	d144      	bne.n	8008ef0 <atan+0x240>
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 f97d 	bl	8000168 <__aeabi_dsub>
 8008e6e:	e734      	b.n	8008cda <atan+0x2a>
 8008e70:	2200      	movs	r2, #0
 8008e72:	4b4c      	ldr	r3, [pc, #304]	; (8008fa4 <atan+0x2f4>)
 8008e74:	f7f7 f978 	bl	8000168 <__aeabi_dsub>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	4b49      	ldr	r3, [pc, #292]	; (8008fa4 <atan+0x2f4>)
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 f972 	bl	800016c <__adddf3>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	f7f7 fc4c 	bl	800072c <__aeabi_ddiv>
 8008e94:	f04f 0a01 	mov.w	sl, #1
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	e767      	b.n	8008d6e <atan+0xbe>
 8008e9e:	4b43      	ldr	r3, [pc, #268]	; (8008fac <atan+0x2fc>)
 8008ea0:	429e      	cmp	r6, r3
 8008ea2:	dc1a      	bgt.n	8008eda <atan+0x22a>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4b42      	ldr	r3, [pc, #264]	; (8008fb0 <atan+0x300>)
 8008ea8:	f7f7 f95e 	bl	8000168 <__aeabi_dsub>
 8008eac:	2200      	movs	r2, #0
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460f      	mov	r7, r1
 8008eb2:	4b3f      	ldr	r3, [pc, #252]	; (8008fb0 <atan+0x300>)
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fb0e 	bl	80004d8 <__aeabi_dmul>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <atan+0x2f4>)
 8008ec0:	f7f7 f954 	bl	800016c <__adddf3>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fc2e 	bl	800072c <__aeabi_ddiv>
 8008ed0:	f04f 0a02 	mov.w	sl, #2
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	e749      	b.n	8008d6e <atan+0xbe>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	2000      	movs	r0, #0
 8008ee0:	4934      	ldr	r1, [pc, #208]	; (8008fb4 <atan+0x304>)
 8008ee2:	f7f7 fc23 	bl	800072c <__aeabi_ddiv>
 8008ee6:	f04f 0a03 	mov.w	sl, #3
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	e73e      	b.n	8008d6e <atan+0xbe>
 8008ef0:	4b31      	ldr	r3, [pc, #196]	; (8008fb8 <atan+0x308>)
 8008ef2:	4e32      	ldr	r6, [pc, #200]	; (8008fbc <atan+0x30c>)
 8008ef4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008ef8:	4456      	add	r6, sl
 8008efa:	449a      	add	sl, r3
 8008efc:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f00:	f7f7 f932 	bl	8000168 <__aeabi_dsub>
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	f7f7 f92e 	bl	8000168 <__aeabi_dsub>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008f14:	f7f7 f928 	bl	8000168 <__aeabi_dsub>
 8008f18:	f1bb 0f00 	cmp.w	fp, #0
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	f6bf aee4 	bge.w	8008cec <atan+0x3c>
 8008f24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f28:	461d      	mov	r5, r3
 8008f2a:	e6df      	b.n	8008cec <atan+0x3c>
 8008f2c:	4d24      	ldr	r5, [pc, #144]	; (8008fc0 <atan+0x310>)
 8008f2e:	e6dd      	b.n	8008cec <atan+0x3c>
 8008f30:	8800759c 	.word	0x8800759c
 8008f34:	7e37e43c 	.word	0x7e37e43c
 8008f38:	e322da11 	.word	0xe322da11
 8008f3c:	3f90ad3a 	.word	0x3f90ad3a
 8008f40:	24760deb 	.word	0x24760deb
 8008f44:	3fa97b4b 	.word	0x3fa97b4b
 8008f48:	a0d03d51 	.word	0xa0d03d51
 8008f4c:	3fb10d66 	.word	0x3fb10d66
 8008f50:	c54c206e 	.word	0xc54c206e
 8008f54:	3fb745cd 	.word	0x3fb745cd
 8008f58:	920083ff 	.word	0x920083ff
 8008f5c:	3fc24924 	.word	0x3fc24924
 8008f60:	5555550d 	.word	0x5555550d
 8008f64:	3fd55555 	.word	0x3fd55555
 8008f68:	2c6a6c2f 	.word	0x2c6a6c2f
 8008f6c:	bfa2b444 	.word	0xbfa2b444
 8008f70:	52defd9a 	.word	0x52defd9a
 8008f74:	3fadde2d 	.word	0x3fadde2d
 8008f78:	af749a6d 	.word	0xaf749a6d
 8008f7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008f80:	fe231671 	.word	0xfe231671
 8008f84:	3fbc71c6 	.word	0x3fbc71c6
 8008f88:	9998ebc4 	.word	0x9998ebc4
 8008f8c:	3fc99999 	.word	0x3fc99999
 8008f90:	440fffff 	.word	0x440fffff
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	54442d18 	.word	0x54442d18
 8008f9c:	3ff921fb 	.word	0x3ff921fb
 8008fa0:	3fdbffff 	.word	0x3fdbffff
 8008fa4:	3ff00000 	.word	0x3ff00000
 8008fa8:	3ff2ffff 	.word	0x3ff2ffff
 8008fac:	40037fff 	.word	0x40037fff
 8008fb0:	3ff80000 	.word	0x3ff80000
 8008fb4:	bff00000 	.word	0xbff00000
 8008fb8:	08009708 	.word	0x08009708
 8008fbc:	080096e8 	.word	0x080096e8
 8008fc0:	bff921fb 	.word	0xbff921fb

08008fc4 <fabs>:
 8008fc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4770      	bx	lr

08008fcc <atan2>:
 8008fcc:	f000 b854 	b.w	8009078 <__ieee754_atan2>

08008fd0 <sqrt>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	b08b      	sub	sp, #44	; 0x2c
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	460d      	mov	r5, r1
 8008fda:	f000 f92b 	bl	8009234 <__ieee754_sqrt>
 8008fde:	4b24      	ldr	r3, [pc, #144]	; (8009070 <sqrt+0xa0>)
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	f993 a000 	ldrsb.w	sl, [r3]
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008fec:	d02b      	beq.n	8009046 <sqrt+0x76>
 8008fee:	4622      	mov	r2, r4
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7f7 fd09 	bl	8000a0c <__aeabi_dcmpun>
 8008ffa:	4683      	mov	fp, r0
 8008ffc:	bb18      	cbnz	r0, 8009046 <sqrt+0x76>
 8008ffe:	2600      	movs	r6, #0
 8009000:	2700      	movs	r7, #0
 8009002:	4632      	mov	r2, r6
 8009004:	463b      	mov	r3, r7
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fcd7 	bl	80009bc <__aeabi_dcmplt>
 800900e:	b1d0      	cbz	r0, 8009046 <sqrt+0x76>
 8009010:	2301      	movs	r3, #1
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	4b17      	ldr	r3, [pc, #92]	; (8009074 <sqrt+0xa4>)
 8009016:	f8cd b020 	str.w	fp, [sp, #32]
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009020:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009024:	f1ba 0f00 	cmp.w	sl, #0
 8009028:	d112      	bne.n	8009050 <sqrt+0x80>
 800902a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800902e:	4668      	mov	r0, sp
 8009030:	f000 f9ac 	bl	800938c <matherr>
 8009034:	b1b8      	cbz	r0, 8009066 <sqrt+0x96>
 8009036:	9b08      	ldr	r3, [sp, #32]
 8009038:	b11b      	cbz	r3, 8009042 <sqrt+0x72>
 800903a:	f7ff f9f5 	bl	8008428 <__errno>
 800903e:	9b08      	ldr	r3, [sp, #32]
 8009040:	6003      	str	r3, [r0, #0]
 8009042:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009046:	4640      	mov	r0, r8
 8009048:	4649      	mov	r1, r9
 800904a:	b00b      	add	sp, #44	; 0x2c
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	4632      	mov	r2, r6
 8009052:	463b      	mov	r3, r7
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f7f7 fb68 	bl	800072c <__aeabi_ddiv>
 800905c:	f1ba 0f02 	cmp.w	sl, #2
 8009060:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009064:	d1e3      	bne.n	800902e <sqrt+0x5e>
 8009066:	f7ff f9df 	bl	8008428 <__errno>
 800906a:	2321      	movs	r3, #33	; 0x21
 800906c:	6003      	str	r3, [r0, #0]
 800906e:	e7e2      	b.n	8009036 <sqrt+0x66>
 8009070:	2000011c 	.word	0x2000011c
 8009074:	08009728 	.word	0x08009728

08009078 <__ieee754_atan2>:
 8009078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	4256      	negs	r6, r2
 800907e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8009082:	4316      	orrs	r6, r2
 8009084:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8009230 <__ieee754_atan2+0x1b8>
 8009088:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800908c:	454e      	cmp	r6, r9
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	469e      	mov	lr, r3
 8009094:	d808      	bhi.n	80090a8 <__ieee754_atan2+0x30>
 8009096:	4246      	negs	r6, r0
 8009098:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800909c:	4306      	orrs	r6, r0
 800909e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80090a2:	454e      	cmp	r6, r9
 80090a4:	4688      	mov	r8, r1
 80090a6:	d906      	bls.n	80090b6 <__ieee754_atan2+0x3e>
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7f7 f85e 	bl	800016c <__adddf3>
 80090b0:	4604      	mov	r4, r0
 80090b2:	460d      	mov	r5, r1
 80090b4:	e030      	b.n	8009118 <__ieee754_atan2+0xa0>
 80090b6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80090ba:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80090be:	4316      	orrs	r6, r2
 80090c0:	d103      	bne.n	80090ca <__ieee754_atan2+0x52>
 80090c2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c6:	f7ff bdf3 	b.w	8008cb0 <atan>
 80090ca:	179e      	asrs	r6, r3, #30
 80090cc:	f006 0602 	and.w	r6, r6, #2
 80090d0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80090d4:	ea57 0100 	orrs.w	r1, r7, r0
 80090d8:	d107      	bne.n	80090ea <__ieee754_atan2+0x72>
 80090da:	2e02      	cmp	r6, #2
 80090dc:	d079      	beq.n	80091d2 <__ieee754_atan2+0x15a>
 80090de:	2e03      	cmp	r6, #3
 80090e0:	d11a      	bne.n	8009118 <__ieee754_atan2+0xa0>
 80090e2:	a541      	add	r5, pc, #260	; (adr r5, 80091e8 <__ieee754_atan2+0x170>)
 80090e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090e8:	e016      	b.n	8009118 <__ieee754_atan2+0xa0>
 80090ea:	ea5c 0102 	orrs.w	r1, ip, r2
 80090ee:	d106      	bne.n	80090fe <__ieee754_atan2+0x86>
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	da71      	bge.n	80091da <__ieee754_atan2+0x162>
 80090f6:	a53e      	add	r5, pc, #248	; (adr r5, 80091f0 <__ieee754_atan2+0x178>)
 80090f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090fc:	e00c      	b.n	8009118 <__ieee754_atan2+0xa0>
 80090fe:	45cc      	cmp	ip, r9
 8009100:	d123      	bne.n	800914a <__ieee754_atan2+0xd2>
 8009102:	4567      	cmp	r7, ip
 8009104:	d114      	bne.n	8009130 <__ieee754_atan2+0xb8>
 8009106:	2e02      	cmp	r6, #2
 8009108:	d00a      	beq.n	8009120 <__ieee754_atan2+0xa8>
 800910a:	2e03      	cmp	r6, #3
 800910c:	d00c      	beq.n	8009128 <__ieee754_atan2+0xb0>
 800910e:	2e01      	cmp	r6, #1
 8009110:	d15b      	bne.n	80091ca <__ieee754_atan2+0x152>
 8009112:	a539      	add	r5, pc, #228	; (adr r5, 80091f8 <__ieee754_atan2+0x180>)
 8009114:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	a537      	add	r5, pc, #220	; (adr r5, 8009200 <__ieee754_atan2+0x188>)
 8009122:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009126:	e7f7      	b.n	8009118 <__ieee754_atan2+0xa0>
 8009128:	a537      	add	r5, pc, #220	; (adr r5, 8009208 <__ieee754_atan2+0x190>)
 800912a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800912e:	e7f3      	b.n	8009118 <__ieee754_atan2+0xa0>
 8009130:	2e02      	cmp	r6, #2
 8009132:	d04e      	beq.n	80091d2 <__ieee754_atan2+0x15a>
 8009134:	2e03      	cmp	r6, #3
 8009136:	d0d4      	beq.n	80090e2 <__ieee754_atan2+0x6a>
 8009138:	2e01      	cmp	r6, #1
 800913a:	f04f 0400 	mov.w	r4, #0
 800913e:	d102      	bne.n	8009146 <__ieee754_atan2+0xce>
 8009140:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8009144:	e7e8      	b.n	8009118 <__ieee754_atan2+0xa0>
 8009146:	2500      	movs	r5, #0
 8009148:	e7e6      	b.n	8009118 <__ieee754_atan2+0xa0>
 800914a:	454f      	cmp	r7, r9
 800914c:	d0d0      	beq.n	80090f0 <__ieee754_atan2+0x78>
 800914e:	eba7 070c 	sub.w	r7, r7, ip
 8009152:	153f      	asrs	r7, r7, #20
 8009154:	2f3c      	cmp	r7, #60	; 0x3c
 8009156:	dc1e      	bgt.n	8009196 <__ieee754_atan2+0x11e>
 8009158:	2b00      	cmp	r3, #0
 800915a:	da01      	bge.n	8009160 <__ieee754_atan2+0xe8>
 800915c:	373c      	adds	r7, #60	; 0x3c
 800915e:	db1e      	blt.n	800919e <__ieee754_atan2+0x126>
 8009160:	4620      	mov	r0, r4
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 fae2 	bl	800072c <__aeabi_ddiv>
 8009168:	f7ff ff2c 	bl	8008fc4 <fabs>
 800916c:	f7ff fda0 	bl	8008cb0 <atan>
 8009170:	4604      	mov	r4, r0
 8009172:	460d      	mov	r5, r1
 8009174:	2e01      	cmp	r6, #1
 8009176:	d015      	beq.n	80091a4 <__ieee754_atan2+0x12c>
 8009178:	2e02      	cmp	r6, #2
 800917a:	d017      	beq.n	80091ac <__ieee754_atan2+0x134>
 800917c:	2e00      	cmp	r6, #0
 800917e:	d0cb      	beq.n	8009118 <__ieee754_atan2+0xa0>
 8009180:	a323      	add	r3, pc, #140	; (adr r3, 8009210 <__ieee754_atan2+0x198>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f6 ffed 	bl	8000168 <__aeabi_dsub>
 800918e:	a322      	add	r3, pc, #136	; (adr r3, 8009218 <__ieee754_atan2+0x1a0>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	e016      	b.n	80091c4 <__ieee754_atan2+0x14c>
 8009196:	a522      	add	r5, pc, #136	; (adr r5, 8009220 <__ieee754_atan2+0x1a8>)
 8009198:	e9d5 4500 	ldrd	r4, r5, [r5]
 800919c:	e7ea      	b.n	8009174 <__ieee754_atan2+0xfc>
 800919e:	2400      	movs	r4, #0
 80091a0:	2500      	movs	r5, #0
 80091a2:	e7e7      	b.n	8009174 <__ieee754_atan2+0xfc>
 80091a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80091a8:	461d      	mov	r5, r3
 80091aa:	e7b5      	b.n	8009118 <__ieee754_atan2+0xa0>
 80091ac:	a318      	add	r3, pc, #96	; (adr r3, 8009210 <__ieee754_atan2+0x198>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	4620      	mov	r0, r4
 80091b4:	4629      	mov	r1, r5
 80091b6:	f7f6 ffd7 	bl	8000168 <__aeabi_dsub>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	a116      	add	r1, pc, #88	; (adr r1, 8009218 <__ieee754_atan2+0x1a0>)
 80091c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c4:	f7f6 ffd0 	bl	8000168 <__aeabi_dsub>
 80091c8:	e772      	b.n	80090b0 <__ieee754_atan2+0x38>
 80091ca:	a517      	add	r5, pc, #92	; (adr r5, 8009228 <__ieee754_atan2+0x1b0>)
 80091cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091d0:	e7a2      	b.n	8009118 <__ieee754_atan2+0xa0>
 80091d2:	a511      	add	r5, pc, #68	; (adr r5, 8009218 <__ieee754_atan2+0x1a0>)
 80091d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091d8:	e79e      	b.n	8009118 <__ieee754_atan2+0xa0>
 80091da:	a511      	add	r5, pc, #68	; (adr r5, 8009220 <__ieee754_atan2+0x1a8>)
 80091dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091e0:	e79a      	b.n	8009118 <__ieee754_atan2+0xa0>
 80091e2:	bf00      	nop
 80091e4:	f3af 8000 	nop.w
 80091e8:	54442d18 	.word	0x54442d18
 80091ec:	c00921fb 	.word	0xc00921fb
 80091f0:	54442d18 	.word	0x54442d18
 80091f4:	bff921fb 	.word	0xbff921fb
 80091f8:	54442d18 	.word	0x54442d18
 80091fc:	bfe921fb 	.word	0xbfe921fb
 8009200:	7f3321d2 	.word	0x7f3321d2
 8009204:	4002d97c 	.word	0x4002d97c
 8009208:	7f3321d2 	.word	0x7f3321d2
 800920c:	c002d97c 	.word	0xc002d97c
 8009210:	33145c07 	.word	0x33145c07
 8009214:	3ca1a626 	.word	0x3ca1a626
 8009218:	54442d18 	.word	0x54442d18
 800921c:	400921fb 	.word	0x400921fb
 8009220:	54442d18 	.word	0x54442d18
 8009224:	3ff921fb 	.word	0x3ff921fb
 8009228:	54442d18 	.word	0x54442d18
 800922c:	3fe921fb 	.word	0x3fe921fb
 8009230:	7ff00000 	.word	0x7ff00000

08009234 <__ieee754_sqrt>:
 8009234:	4b54      	ldr	r3, [pc, #336]	; (8009388 <__ieee754_sqrt+0x154>)
 8009236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923a:	438b      	bics	r3, r1
 800923c:	4606      	mov	r6, r0
 800923e:	460d      	mov	r5, r1
 8009240:	460a      	mov	r2, r1
 8009242:	460c      	mov	r4, r1
 8009244:	d10f      	bne.n	8009266 <__ieee754_sqrt+0x32>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	f7f7 f945 	bl	80004d8 <__aeabi_dmul>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	4629      	mov	r1, r5
 8009256:	f7f6 ff89 	bl	800016c <__adddf3>
 800925a:	4606      	mov	r6, r0
 800925c:	460d      	mov	r5, r1
 800925e:	4630      	mov	r0, r6
 8009260:	4629      	mov	r1, r5
 8009262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009266:	2900      	cmp	r1, #0
 8009268:	4607      	mov	r7, r0
 800926a:	4603      	mov	r3, r0
 800926c:	dc0e      	bgt.n	800928c <__ieee754_sqrt+0x58>
 800926e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009272:	ea5c 0707 	orrs.w	r7, ip, r7
 8009276:	d0f2      	beq.n	800925e <__ieee754_sqrt+0x2a>
 8009278:	b141      	cbz	r1, 800928c <__ieee754_sqrt+0x58>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	f7f6 ff73 	bl	8000168 <__aeabi_dsub>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	f7f7 fa51 	bl	800072c <__aeabi_ddiv>
 800928a:	e7e6      	b.n	800925a <__ieee754_sqrt+0x26>
 800928c:	1512      	asrs	r2, r2, #20
 800928e:	d074      	beq.n	800937a <__ieee754_sqrt+0x146>
 8009290:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009294:	07d5      	lsls	r5, r2, #31
 8009296:	f04f 0500 	mov.w	r5, #0
 800929a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800929e:	bf48      	it	mi
 80092a0:	0fd9      	lsrmi	r1, r3, #31
 80092a2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80092a6:	bf44      	itt	mi
 80092a8:	005b      	lslmi	r3, r3, #1
 80092aa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80092ae:	1051      	asrs	r1, r2, #1
 80092b0:	0fda      	lsrs	r2, r3, #31
 80092b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80092b6:	4628      	mov	r0, r5
 80092b8:	2216      	movs	r2, #22
 80092ba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	1987      	adds	r7, r0, r6
 80092c2:	42a7      	cmp	r7, r4
 80092c4:	bfde      	ittt	le
 80092c6:	19b8      	addle	r0, r7, r6
 80092c8:	1be4      	suble	r4, r4, r7
 80092ca:	19ad      	addle	r5, r5, r6
 80092cc:	0fdf      	lsrs	r7, r3, #31
 80092ce:	3a01      	subs	r2, #1
 80092d0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80092d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80092dc:	d1f0      	bne.n	80092c0 <__ieee754_sqrt+0x8c>
 80092de:	f04f 0c20 	mov.w	ip, #32
 80092e2:	4696      	mov	lr, r2
 80092e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80092e8:	4284      	cmp	r4, r0
 80092ea:	eb06 070e 	add.w	r7, r6, lr
 80092ee:	dc02      	bgt.n	80092f6 <__ieee754_sqrt+0xc2>
 80092f0:	d112      	bne.n	8009318 <__ieee754_sqrt+0xe4>
 80092f2:	429f      	cmp	r7, r3
 80092f4:	d810      	bhi.n	8009318 <__ieee754_sqrt+0xe4>
 80092f6:	2f00      	cmp	r7, #0
 80092f8:	eb07 0e06 	add.w	lr, r7, r6
 80092fc:	da42      	bge.n	8009384 <__ieee754_sqrt+0x150>
 80092fe:	f1be 0f00 	cmp.w	lr, #0
 8009302:	db3f      	blt.n	8009384 <__ieee754_sqrt+0x150>
 8009304:	f100 0801 	add.w	r8, r0, #1
 8009308:	1a24      	subs	r4, r4, r0
 800930a:	4640      	mov	r0, r8
 800930c:	429f      	cmp	r7, r3
 800930e:	bf88      	it	hi
 8009310:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8009314:	1bdb      	subs	r3, r3, r7
 8009316:	4432      	add	r2, r6
 8009318:	0064      	lsls	r4, r4, #1
 800931a:	f1bc 0c01 	subs.w	ip, ip, #1
 800931e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009322:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800932a:	d1dd      	bne.n	80092e8 <__ieee754_sqrt+0xb4>
 800932c:	4323      	orrs	r3, r4
 800932e:	d006      	beq.n	800933e <__ieee754_sqrt+0x10a>
 8009330:	1c54      	adds	r4, r2, #1
 8009332:	bf0b      	itete	eq
 8009334:	4662      	moveq	r2, ip
 8009336:	3201      	addne	r2, #1
 8009338:	3501      	addeq	r5, #1
 800933a:	f022 0201 	bicne.w	r2, r2, #1
 800933e:	106b      	asrs	r3, r5, #1
 8009340:	0852      	lsrs	r2, r2, #1
 8009342:	07e8      	lsls	r0, r5, #31
 8009344:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009348:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800934c:	bf48      	it	mi
 800934e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009352:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009356:	4616      	mov	r6, r2
 8009358:	e781      	b.n	800925e <__ieee754_sqrt+0x2a>
 800935a:	0adc      	lsrs	r4, r3, #11
 800935c:	3915      	subs	r1, #21
 800935e:	055b      	lsls	r3, r3, #21
 8009360:	2c00      	cmp	r4, #0
 8009362:	d0fa      	beq.n	800935a <__ieee754_sqrt+0x126>
 8009364:	02e6      	lsls	r6, r4, #11
 8009366:	d50a      	bpl.n	800937e <__ieee754_sqrt+0x14a>
 8009368:	f1c2 0020 	rsb	r0, r2, #32
 800936c:	fa23 f000 	lsr.w	r0, r3, r0
 8009370:	1e55      	subs	r5, r2, #1
 8009372:	4093      	lsls	r3, r2
 8009374:	4304      	orrs	r4, r0
 8009376:	1b4a      	subs	r2, r1, r5
 8009378:	e78a      	b.n	8009290 <__ieee754_sqrt+0x5c>
 800937a:	4611      	mov	r1, r2
 800937c:	e7f0      	b.n	8009360 <__ieee754_sqrt+0x12c>
 800937e:	0064      	lsls	r4, r4, #1
 8009380:	3201      	adds	r2, #1
 8009382:	e7ef      	b.n	8009364 <__ieee754_sqrt+0x130>
 8009384:	4680      	mov	r8, r0
 8009386:	e7bf      	b.n	8009308 <__ieee754_sqrt+0xd4>
 8009388:	7ff00000 	.word	0x7ff00000

0800938c <matherr>:
 800938c:	2000      	movs	r0, #0
 800938e:	4770      	bx	lr

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
